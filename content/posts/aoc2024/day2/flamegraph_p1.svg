<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="11891466120"><g><title>[ld-linux-x86-64.so.2] (4,501,141 samples, 0.04%)</title><rect x="0.0015%" y="357" width="0.0379%" height="15" fill="rgb(227,0,7)" fg:x="173844" fg:w="4501141"/><text x="0.2515%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="341" width="0.0367%" height="15" fill="rgb(217,0,24)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="325" width="0.0367%" height="15" fill="rgb(221,193,54)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="309" width="0.0367%" height="15" fill="rgb(248,212,6)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="293" width="0.0367%" height="15" fill="rgb(208,68,35)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="303.50"></text></g><g><title>_dl_catch_exception (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="277" width="0.0367%" height="15" fill="rgb(232,128,0)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="261" width="0.0367%" height="15" fill="rgb(207,160,47)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="245" width="0.0367%" height="15" fill="rgb(228,23,34)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="229" width="0.0367%" height="15" fill="rgb(218,30,26)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,364,985 samples, 0.04%)</title><rect x="0.0026%" y="213" width="0.0367%" height="15" fill="rgb(220,122,19)" fg:x="310000" fg:w="4364985"/><text x="0.2526%" y="223.50"></text></g><g><title>[unknown] (4,118,463 samples, 0.03%)</title><rect x="0.0393%" y="357" width="0.0346%" height="15" fill="rgb(250,228,42)" fg:x="4674985" fg:w="4118463"/><text x="0.2893%" y="367.50"></text></g><g><title>statx (4,118,463 samples, 0.03%)</title><rect x="0.0393%" y="341" width="0.0346%" height="15" fill="rgb(240,193,28)" fg:x="4674985" fg:w="4118463"/><text x="0.2893%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (339,531,741 samples, 2.86%)</title><rect x="13.5849%" y="229" width="2.8553%" height="15" fill="rgb(216,20,37)" fg:x="1615439123" fg:w="339531741"/><text x="13.8349%" y="239.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (339,531,741 samples, 2.86%)</title><rect x="13.5849%" y="213" width="2.8553%" height="15" fill="rgb(206,188,39)" fg:x="1615439123" fg:w="339531741"/><text x="13.8349%" y="223.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (339,531,741 samples, 2.86%)</title><rect x="13.5849%" y="197" width="2.8553%" height="15" fill="rgb(217,207,13)" fg:x="1615439123" fg:w="339531741"/><text x="13.8349%" y="207.50">&lt;u..</text></g><g><title>&lt;core::slice::iter::Windows&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (325,761,976 samples, 2.74%)</title><rect x="17.6067%" y="181" width="2.7395%" height="15" fill="rgb(231,73,38)" fg:x="2093696354" fg:w="325761976"/><text x="17.8567%" y="191.50">&lt;c..</text></g><g><title>core::num::&lt;impl i32&gt;::abs (172,588,153 samples, 1.45%)</title><rect x="25.9858%" y="117" width="1.4514%" height="15" fill="rgb(225,20,46)" fg:x="3090093417" fg:w="172588153"/><text x="26.2358%" y="127.50"></text></g><g><title>aoc2024::day2::check_line (1,327,990,378 samples, 11.17%)</title><rect x="16.4401%" y="229" width="11.1676%" height="15" fill="rgb(210,31,41)" fg:x="1954970864" fg:w="1327990378"/><text x="16.6901%" y="239.50">aoc2024::day2::c..</text></g><g><title>core::iter::traits::iterator::Iterator::all (1,327,990,378 samples, 11.17%)</title><rect x="16.4401%" y="213" width="11.1676%" height="15" fill="rgb(221,200,47)" fg:x="1954970864" fg:w="1327990378"/><text x="16.6901%" y="223.50">core::iter::trai..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,327,990,378 samples, 11.17%)</title><rect x="16.4401%" y="197" width="11.1676%" height="15" fill="rgb(226,26,5)" fg:x="1954970864" fg:w="1327990378"/><text x="16.6901%" y="207.50">core::iter::trai..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (863,502,912 samples, 7.26%)</title><rect x="20.3462%" y="181" width="7.2615%" height="15" fill="rgb(249,33,26)" fg:x="2419458330" fg:w="863502912"/><text x="20.5962%" y="191.50">core::iter..</text></g><g><title>aoc2024::day2::check_line::_{{closure}} (863,502,912 samples, 7.26%)</title><rect x="20.3462%" y="165" width="7.2615%" height="15" fill="rgb(235,183,28)" fg:x="2419458330" fg:w="863502912"/><text x="20.5962%" y="175.50">aoc2024::d..</text></g><g><title>aoc2024::day2::check_pair (762,568,074 samples, 6.41%)</title><rect x="21.1950%" y="149" width="6.4127%" height="15" fill="rgb(221,5,38)" fg:x="2520393168" fg:w="762568074"/><text x="21.4450%" y="159.50">aoc2024:..</text></g><g><title>core::num::&lt;impl u8&gt;::abs_diff (271,421,175 samples, 2.28%)</title><rect x="25.3252%" y="133" width="2.2825%" height="15" fill="rgb(247,18,42)" fg:x="3011540067" fg:w="271421175"/><text x="25.5752%" y="143.50">c..</text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_sub (20,279,672 samples, 0.17%)</title><rect x="27.4372%" y="117" width="0.1705%" height="15" fill="rgb(241,131,45)" fg:x="3262681570" fg:w="20279672"/><text x="27.6872%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,062,196,570 samples, 8.93%)</title><rect x="41.0822%" y="213" width="8.9324%" height="15" fill="rgb(249,31,29)" fg:x="4885272357" fg:w="1062196570"/><text x="41.3322%" y="223.50">alloc::vec::V..</text></g><g><title>core::ptr::write (87,845,178 samples, 0.74%)</title><rect x="49.2759%" y="197" width="0.7387%" height="15" fill="rgb(225,111,53)" fg:x="5859623749" fg:w="87845178"/><text x="49.5259%" y="207.50"></text></g><g><title>&lt;u8 as core::ops::arith::Add&gt;::add (249,545,483 samples, 2.10%)</title><rect x="82.5212%" y="197" width="2.0985%" height="15" fill="rgb(238,160,17)" fg:x="9812975113" fg:w="249545483"/><text x="82.7712%" y="207.50">&lt;..</text></g><g><title>&lt;u8 as core::ops::arith::Mul&gt;::mul (772,871,652 samples, 6.50%)</title><rect x="84.6197%" y="197" width="6.4994%" height="15" fill="rgb(214,148,48)" fg:x="10062520596" fg:w="772871652"/><text x="84.8697%" y="207.50">&lt;u8 as co..</text></g><g><title>aoc2024::util::fast_parse (5,330,131,505 samples, 44.82%)</title><rect x="50.0146%" y="213" width="44.8232%" height="15" fill="rgb(232,36,49)" fg:x="5947468927" fg:w="5330131505"/><text x="50.2646%" y="223.50">aoc2024::util::fast_parse</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="197" width="3.7187%" height="15" fill="rgb(209,103,24)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="207.50">core..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="181" width="3.7187%" height="15" fill="rgb(229,88,8)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="191.50">&lt;cor..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="165" width="3.7187%" height="15" fill="rgb(213,181,19)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="175.50">&lt;cor..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="149" width="3.7187%" height="15" fill="rgb(254,191,54)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="159.50">&lt;cor..</text></g><g><title>core::slice::index::get_offset_len_noubcheck (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="133" width="3.7187%" height="15" fill="rgb(241,83,37)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="143.50">core..</text></g><g><title>core::slice::index::get_noubcheck (442,208,184 samples, 3.72%)</title><rect x="91.1191%" y="117" width="3.7187%" height="15" fill="rgb(233,36,39)" fg:x="10835392248" fg:w="442208184"/><text x="91.3691%" y="127.50">core..</text></g><g><title>aoc2024::day2::parse_line (8,033,937,395 samples, 67.56%)</title><rect x="27.6077%" y="229" width="67.5605%" height="15" fill="rgb(226,3,54)" fg:x="3282961242" fg:w="8033937395"/><text x="27.8577%" y="239.50">aoc2024::day2::parse_line</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39,298,205 samples, 0.33%)</title><rect x="94.8378%" y="213" width="0.3305%" height="15" fill="rgb(245,192,40)" fg:x="11277600432" fg:w="39298205"/><text x="95.0878%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39,298,205 samples, 0.33%)</title><rect x="94.8378%" y="197" width="0.3305%" height="15" fill="rgb(238,167,29)" fg:x="11277600432" fg:w="39298205"/><text x="95.0878%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (39,298,205 samples, 0.33%)</title><rect x="94.8378%" y="181" width="0.3305%" height="15" fill="rgb(232,182,51)" fg:x="11277600432" fg:w="39298205"/><text x="95.0878%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (39,298,205 samples, 0.33%)</title><rect x="94.8378%" y="165" width="0.3305%" height="15" fill="rgb(231,60,39)" fg:x="11277600432" fg:w="39298205"/><text x="95.0878%" y="175.50"></text></g><g><title>core::num::&lt;impl i32&gt;::abs (8,834,468 samples, 0.07%)</title><rect x="95.1682%" y="213" width="0.0743%" height="15" fill="rgb(208,69,12)" fg:x="11316898637" fg:w="8834468"/><text x="95.4182%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::abs_diff (227,713,466 samples, 1.91%)</title><rect x="95.1682%" y="229" width="1.9149%" height="15" fill="rgb(235,93,37)" fg:x="11316898637" fg:w="227713466"/><text x="95.4182%" y="239.50">c..</text></g><g><title>core::num::&lt;impl i32&gt;::wrapping_sub (218,878,998 samples, 1.84%)</title><rect x="95.2425%" y="213" width="1.8406%" height="15" fill="rgb(213,116,39)" fg:x="11325733105" fg:w="218878998"/><text x="95.4925%" y="223.50">c..</text></g><g><title>aoc2024::day2::part1_opt (11,539,602,995 samples, 97.04%)</title><rect x="0.0739%" y="245" width="97.0410%" height="15" fill="rgb(222,207,29)" fg:x="8793448" fg:w="11539602995"/><text x="0.3239%" y="255.50">aoc2024::day2::part1_opt</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="229" width="0.0318%" height="15" fill="rgb(206,96,30)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="213" width="0.0318%" height="15" fill="rgb(218,138,4)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="197" width="0.0318%" height="15" fill="rgb(250,191,14)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="181" width="0.0318%" height="15" fill="rgb(239,60,40)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="165" width="0.0318%" height="15" fill="rgb(206,27,48)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="149" width="0.0318%" height="15" fill="rgb(225,35,8)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="159.50"></text></g><g><title>__rdl_dealloc (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="133" width="0.0318%" height="15" fill="rgb(250,213,24)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="117" width="0.0318%" height="15" fill="rgb(247,123,22)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="127.50"></text></g><g><title>cfree (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="101" width="0.0318%" height="15" fill="rgb(231,138,38)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="111.50"></text></g><g><title>[libc.so.6] (3,784,340 samples, 0.03%)</title><rect x="97.0832%" y="85" width="0.0318%" height="15" fill="rgb(231,145,46)" fg:x="11544612103" fg:w="3784340"/><text x="97.3332%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="245" width="0.2637%" height="15" fill="rgb(251,118,11)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="229" width="0.2637%" height="15" fill="rgb(217,147,25)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="213" width="0.2637%" height="15" fill="rgb(247,81,37)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="197" width="0.2637%" height="15" fill="rgb(209,12,38)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="181" width="0.2637%" height="15" fill="rgb(227,1,9)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="165" width="0.2637%" height="15" fill="rgb(248,47,43)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="149" width="0.2637%" height="15" fill="rgb(221,10,30)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="159.50"></text></g><g><title>__rdl_dealloc (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="133" width="0.2637%" height="15" fill="rgb(210,229,1)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="117" width="0.2637%" height="15" fill="rgb(222,148,37)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="127.50"></text></g><g><title>cfree (31,356,095 samples, 0.26%)</title><rect x="97.1150%" y="101" width="0.2637%" height="15" fill="rgb(234,67,33)" fg:x="11548396443" fg:w="31356095"/><text x="97.3650%" y="111.50"></text></g><g><title>[libc.so.6] (27,451,648 samples, 0.23%)</title><rect x="97.1478%" y="85" width="0.2309%" height="15" fill="rgb(247,98,35)" fg:x="11552300890" fg:w="27451648"/><text x="97.3978%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3,975,265 samples, 0.03%)</title><rect x="97.3787%" y="245" width="0.0334%" height="15" fill="rgb(247,138,52)" fg:x="11579752538" fg:w="3975265"/><text x="97.6287%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,926,542 samples, 0.03%)</title><rect x="97.4121%" y="213" width="0.0330%" height="15" fill="rgb(213,79,30)" fg:x="11583727803" fg:w="3926542"/><text x="97.6621%" y="223.50"></text></g><g><title>alloc::string::String::new (3,997,317 samples, 0.03%)</title><rect x="97.4451%" y="213" width="0.0336%" height="15" fill="rgb(246,177,23)" fg:x="11587654345" fg:w="3997317"/><text x="97.6951%" y="223.50"></text></g><g><title>__rust_alloc (3,873,375 samples, 0.03%)</title><rect x="97.5114%" y="117" width="0.0326%" height="15" fill="rgb(230,62,27)" fg:x="11595536852" fg:w="3873375"/><text x="97.7614%" y="127.50"></text></g><g><title>alloc::string::String::try_reserve_exact (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="213" width="0.1938%" height="15" fill="rgb(216,154,8)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve_exact (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="197" width="0.1938%" height="15" fill="rgb(244,35,45)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="181" width="0.1938%" height="15" fill="rgb(251,115,12)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve_exact (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="165" width="0.1938%" height="15" fill="rgb(240,54,50)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_exact (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="149" width="0.1938%" height="15" fill="rgb(233,84,52)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (23,049,432 samples, 0.19%)</title><rect x="97.4787%" y="133" width="0.1938%" height="15" fill="rgb(207,117,47)" fg:x="11591651662" fg:w="23049432"/><text x="97.7287%" y="143.50"></text></g><g><title>malloc (15,290,867 samples, 0.13%)</title><rect x="97.5440%" y="117" width="0.1286%" height="15" fill="rgb(249,43,39)" fg:x="11599410227" fg:w="15290867"/><text x="97.7940%" y="127.50"></text></g><g><title>[libc.so.6] (15,290,867 samples, 0.13%)</title><rect x="97.5440%" y="101" width="0.1286%" height="15" fill="rgb(209,38,44)" fg:x="11599410227" fg:w="15290867"/><text x="97.7940%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="213" width="0.1315%" height="15" fill="rgb(236,212,23)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="197" width="0.1315%" height="15" fill="rgb(242,79,21)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="181" width="0.1315%" height="15" fill="rgb(211,96,35)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="165" width="0.1315%" height="15" fill="rgb(253,215,40)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="175.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="149" width="0.1315%" height="15" fill="rgb(211,81,21)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="159.50"></text></g><g><title>__close (15,635,354 samples, 0.13%)</title><rect x="97.6726%" y="133" width="0.1315%" height="15" fill="rgb(208,190,38)" fg:x="11614701094" fg:w="15635354"/><text x="97.9226%" y="143.50"></text></g><g><title>core::mem::zeroed (15,642,098 samples, 0.13%)</title><rect x="97.8041%" y="165" width="0.1315%" height="15" fill="rgb(235,213,38)" fg:x="11630336448" fg:w="15642098"/><text x="98.0541%" y="175.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (15,642,098 samples, 0.13%)</title><rect x="97.8041%" y="149" width="0.1315%" height="15" fill="rgb(237,122,38)" fg:x="11630336448" fg:w="15642098"/><text x="98.0541%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15,642,098 samples, 0.13%)</title><rect x="97.8041%" y="133" width="0.1315%" height="15" fill="rgb(244,218,35)" fg:x="11630336448" fg:w="15642098"/><text x="98.0541%" y="143.50"></text></g><g><title>core::intrinsics::write_bytes (15,642,098 samples, 0.13%)</title><rect x="97.8041%" y="117" width="0.1315%" height="15" fill="rgb(240,68,47)" fg:x="11630336448" fg:w="15642098"/><text x="98.0541%" y="127.50"></text></g><g><title>libc::unix::linux_like::linux::makedev (3,790,680 samples, 0.03%)</title><rect x="97.9356%" y="165" width="0.0319%" height="15" fill="rgb(210,16,53)" fg:x="11645978546" fg:w="3790680"/><text x="98.1856%" y="175.50"></text></g><g><title>std::fs::File::metadata (35,266,991 samples, 0.30%)</title><rect x="97.8041%" y="213" width="0.2966%" height="15" fill="rgb(235,124,12)" fg:x="11630336448" fg:w="35266991"/><text x="98.0541%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::File::file_attr (35,266,991 samples, 0.30%)</title><rect x="97.8041%" y="197" width="0.2966%" height="15" fill="rgb(224,169,11)" fg:x="11630336448" fg:w="35266991"/><text x="98.0541%" y="207.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (35,266,991 samples, 0.30%)</title><rect x="97.8041%" y="181" width="0.2966%" height="15" fill="rgb(250,166,2)" fg:x="11630336448" fg:w="35266991"/><text x="98.0541%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (15,834,213 samples, 0.13%)</title><rect x="97.9675%" y="165" width="0.1332%" height="15" fill="rgb(242,216,29)" fg:x="11649769226" fg:w="15834213"/><text x="98.2175%" y="175.50"></text></g><g><title>statx (15,834,213 samples, 0.13%)</title><rect x="97.9675%" y="149" width="0.1332%" height="15" fill="rgb(230,116,27)" fg:x="11649769226" fg:w="15834213"/><text x="98.2175%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,201,311 samples, 0.09%)</title><rect x="98.1006%" y="101" width="0.0942%" height="15" fill="rgb(228,99,48)" fg:x="11665603439" fg:w="11201311"/><text x="98.3506%" y="111.50"></text></g><g><title>[libc.so.6] (11,201,311 samples, 0.09%)</title><rect x="98.1006%" y="85" width="0.0942%" height="15" fill="rgb(253,11,6)" fg:x="11665603439" fg:w="11201311"/><text x="98.3506%" y="95.50"></text></g><g><title>std::sys::pal::unix::cvt (4,069,246 samples, 0.03%)</title><rect x="98.1948%" y="53" width="0.0342%" height="15" fill="rgb(247,143,39)" fg:x="11676804750" fg:w="4069246"/><text x="98.4448%" y="63.50"></text></g><g><title>std::fs::File::open (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="213" width="0.1616%" height="15" fill="rgb(236,97,10)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="223.50"></text></g><g><title>std::fs::OpenOptions::open (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="197" width="0.1616%" height="15" fill="rgb(233,208,19)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="181" width="0.1616%" height="15" fill="rgb(216,164,2)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::File::open (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="165" width="0.1616%" height="15" fill="rgb(220,129,5)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="175.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="149" width="0.1616%" height="15" fill="rgb(242,17,10)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="159.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="133" width="0.1616%" height="15" fill="rgb(242,107,0)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="143.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (19,212,020 samples, 0.16%)</title><rect x="98.1006%" y="117" width="0.1616%" height="15" fill="rgb(251,28,31)" fg:x="11665603439" fg:w="19212020"/><text x="98.3506%" y="127.50"></text></g><g><title>std::sys::pal::unix::fs::File::open::_{{closure}} (8,010,709 samples, 0.07%)</title><rect x="98.1948%" y="101" width="0.0674%" height="15" fill="rgb(233,223,10)" fg:x="11676804750" fg:w="8010709"/><text x="98.4448%" y="111.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c (8,010,709 samples, 0.07%)</title><rect x="98.1948%" y="85" width="0.0674%" height="15" fill="rgb(215,21,27)" fg:x="11676804750" fg:w="8010709"/><text x="98.4448%" y="95.50"></text></g><g><title>std::sys::pal::unix::cvt_r (8,010,709 samples, 0.07%)</title><rect x="98.1948%" y="69" width="0.0674%" height="15" fill="rgb(232,23,21)" fg:x="11676804750" fg:w="8010709"/><text x="98.4448%" y="79.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c::_{{closure}} (3,941,463 samples, 0.03%)</title><rect x="98.2290%" y="53" width="0.0331%" height="15" fill="rgb(244,5,23)" fg:x="11680873996" fg:w="3941463"/><text x="98.4790%" y="63.50"></text></g><g><title>open64 (3,941,463 samples, 0.03%)</title><rect x="98.2290%" y="37" width="0.0331%" height="15" fill="rgb(226,81,46)" fg:x="11680873996" fg:w="3941463"/><text x="98.4790%" y="47.50"></text></g><g><title>core::str::converts::from_utf8 (175,471,931 samples, 1.48%)</title><rect x="98.2622%" y="181" width="1.4756%" height="15" fill="rgb(247,70,30)" fg:x="11684815459" fg:w="175471931"/><text x="98.5122%" y="191.50"></text></g><g><title>core::str::validations::run_utf8_validation (175,471,931 samples, 1.48%)</title><rect x="98.2622%" y="165" width="1.4756%" height="15" fill="rgb(212,68,19)" fg:x="11684815459" fg:w="175471931"/><text x="98.5122%" y="175.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (15,685,631 samples, 0.13%)</title><rect x="99.7378%" y="149" width="0.1319%" height="15" fill="rgb(240,187,13)" fg:x="11860287390" fg:w="15685631"/><text x="99.9878%" y="159.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (15,685,631 samples, 0.13%)</title><rect x="99.7378%" y="133" width="0.1319%" height="15" fill="rgb(223,113,26)" fg:x="11860287390" fg:w="15685631"/><text x="99.9878%" y="143.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (15,685,631 samples, 0.13%)</title><rect x="99.7378%" y="117" width="0.1319%" height="15" fill="rgb(206,192,2)" fg:x="11860287390" fg:w="15685631"/><text x="99.9878%" y="127.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (15,685,631 samples, 0.13%)</title><rect x="99.7378%" y="101" width="0.1319%" height="15" fill="rgb(241,108,4)" fg:x="11860287390" fg:w="15685631"/><text x="99.9878%" y="111.50"></text></g><g><title>read (15,685,631 samples, 0.13%)</title><rect x="99.7378%" y="85" width="0.1319%" height="15" fill="rgb(247,173,49)" fg:x="11860287390" fg:w="15685631"/><text x="99.9878%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,967,548 samples, 0.03%)</title><rect x="99.8697%" y="149" width="0.0334%" height="15" fill="rgb(224,114,35)" fg:x="11875973021" fg:w="3967548"/><text x="100.1197%" y="159.50"></text></g><g><title>all (11,891,466,120 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="11891466120"/><text x="0.2500%" y="399.50"></text></g><g><title>aoc2024 (11,891,466,120 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="11891466120"/><text x="0.2500%" y="383.50">aoc2024</text></g><g><title>_start (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="357" width="99.9261%" height="15" fill="rgb(236,23,11)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="367.50">_start</text></g><g><title>__libc_start_main (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="341" width="99.9261%" height="15" fill="rgb(205,117,38)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="351.50">__libc_start_main</text></g><g><title>[libc.so.6] (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="325" width="99.9261%" height="15" fill="rgb(237,72,25)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="335.50">[libc.so.6]</text></g><g><title>main (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="309" width="99.9261%" height="15" fill="rgb(244,70,9)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="319.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="293" width="99.9261%" height="15" fill="rgb(217,125,39)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="277" width="99.9261%" height="15" fill="rgb(235,36,10)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc2024::main (11,882,672,672 samples, 99.93%)</title><rect x="0.0739%" y="261" width="99.9261%" height="15" fill="rgb(251,123,47)" fg:x="8793448" fg:w="11882672672"/><text x="0.3239%" y="271.50">aoc2024::main</text></g><g><title>std::fs::read_to_string (307,738,317 samples, 2.59%)</title><rect x="97.4121%" y="245" width="2.5879%" height="15" fill="rgb(221,13,13)" fg:x="11583727803" fg:w="307738317"/><text x="97.6621%" y="255.50">st..</text></g><g><title>std::fs::read_to_string::inner (307,738,317 samples, 2.59%)</title><rect x="97.4121%" y="229" width="2.5879%" height="15" fill="rgb(238,131,9)" fg:x="11583727803" fg:w="307738317"/><text x="97.6621%" y="239.50">st..</text></g><g><title>std::io::default_read_to_string (206,650,661 samples, 1.74%)</title><rect x="98.2622%" y="213" width="1.7378%" height="15" fill="rgb(211,50,8)" fg:x="11684815459" fg:w="206650661"/><text x="98.5122%" y="223.50"></text></g><g><title>std::io::append_to_string (206,650,661 samples, 1.74%)</title><rect x="98.2622%" y="197" width="1.7378%" height="15" fill="rgb(245,182,24)" fg:x="11684815459" fg:w="206650661"/><text x="98.5122%" y="207.50"></text></g><g><title>std::io::default_read_to_string::_{{closure}} (31,178,730 samples, 0.26%)</title><rect x="99.7378%" y="181" width="0.2622%" height="15" fill="rgb(242,14,37)" fg:x="11860287390" fg:w="31178730"/><text x="99.9878%" y="191.50"></text></g><g><title>std::io::default_read_to_end (31,178,730 samples, 0.26%)</title><rect x="99.7378%" y="165" width="0.2622%" height="15" fill="rgb(246,228,12)" fg:x="11860287390" fg:w="31178730"/><text x="99.9878%" y="175.50"></text></g><g><title>std::io::default_read_to_end::small_probe_read (11,525,551 samples, 0.10%)</title><rect x="99.9031%" y="149" width="0.0969%" height="15" fill="rgb(213,55,15)" fg:x="11879940569" fg:w="11525551"/><text x="100.1531%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,922,321 samples, 0.03%)</title><rect x="99.9670%" y="133" width="0.0330%" height="15" fill="rgb(209,9,3)" fg:x="11887543799" fg:w="3922321"/><text x="100.2170%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,922,321 samples, 0.03%)</title><rect x="99.9670%" y="117" width="0.0330%" height="15" fill="rgb(230,59,30)" fg:x="11887543799" fg:w="3922321"/><text x="100.2170%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,922,321 samples, 0.03%)</title><rect x="99.9670%" y="101" width="0.0330%" height="15" fill="rgb(209,121,21)" fg:x="11887543799" fg:w="3922321"/><text x="100.2170%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,922,321 samples, 0.03%)</title><rect x="99.9670%" y="85" width="0.0330%" height="15" fill="rgb(220,109,13)" fg:x="11887543799" fg:w="3922321"/><text x="100.2170%" y="95.50"></text></g></svg></svg>