<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="7881630767"><g><title>[libc.so.6] (17,579,783 samples, 0.22%)</title><rect x="0.0000%" y="405" width="0.2230%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="17579783"/><text x="0.2500%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,487,311 samples, 0.04%)</title><rect x="0.2230%" y="405" width="0.0442%" height="15" fill="rgb(217,0,24)" fg:x="17579783" fg:w="3487311"/><text x="0.4730%" y="415.50"></text></g><g><title>[[stack]] (31,702,988 samples, 0.40%)</title><rect x="0.0000%" y="421" width="0.4022%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="31702988"/><text x="0.2500%" y="431.50"></text></g><g><title>malloc (10,635,894 samples, 0.13%)</title><rect x="0.2673%" y="405" width="0.1349%" height="15" fill="rgb(248,212,6)" fg:x="21067094" fg:w="10635894"/><text x="0.5173%" y="415.50"></text></g><g><title>[libc.so.6] (10,485,798 samples, 0.13%)</title><rect x="0.4022%" y="405" width="0.1330%" height="15" fill="rgb(208,68,35)" fg:x="31702988" fg:w="10485798"/><text x="0.6522%" y="415.50"></text></g><g><title>[anon] (27,183,713 samples, 0.34%)</title><rect x="0.4022%" y="421" width="0.3449%" height="15" fill="rgb(232,128,0)" fg:x="31702988" fg:w="27183713"/><text x="0.6522%" y="431.50"></text></g><g><title>cfree (16,697,915 samples, 0.21%)</title><rect x="0.5353%" y="405" width="0.2119%" height="15" fill="rgb(207,160,47)" fg:x="42188786" fg:w="16697915"/><text x="0.7853%" y="415.50"></text></g><g><title>[aoc2024] (14,106,700 samples, 0.18%)</title><rect x="0.7471%" y="421" width="0.1790%" height="15" fill="rgb(228,23,34)" fg:x="58886701" fg:w="14106700"/><text x="0.9971%" y="431.50"></text></g><g><title>[libc.so.6] (14,106,700 samples, 0.18%)</title><rect x="0.7471%" y="405" width="0.1790%" height="15" fill="rgb(218,30,26)" fg:x="58886701" fg:w="14106700"/><text x="0.9971%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,932,667 samples, 0.04%)</title><rect x="0.9261%" y="421" width="0.0372%" height="15" fill="rgb(220,122,19)" fg:x="72993401" fg:w="2932667"/><text x="1.1761%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="405" width="0.0359%" height="15" fill="rgb(250,228,42)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="389" width="0.0359%" height="15" fill="rgb(240,193,28)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="373" width="0.0359%" height="15" fill="rgb(216,20,37)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="357" width="0.0359%" height="15" fill="rgb(206,188,39)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="367.50"></text></g><g><title>_dl_catch_exception (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="341" width="0.0359%" height="15" fill="rgb(217,207,13)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="325" width="0.0359%" height="15" fill="rgb(231,73,38)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="309" width="0.0359%" height="15" fill="rgb(225,20,46)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="293" width="0.0359%" height="15" fill="rgb(210,31,41)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,833,370 samples, 0.04%)</title><rect x="0.9274%" y="277" width="0.0359%" height="15" fill="rgb(221,200,47)" fg:x="73092698" fg:w="2833370"/><text x="1.1774%" y="287.50"></text></g><g><title>[libc.so.6] (14,349,757 samples, 0.18%)</title><rect x="0.9633%" y="421" width="0.1821%" height="15" fill="rgb(226,26,5)" fg:x="75926068" fg:w="14349757"/><text x="1.2133%" y="431.50"></text></g><g><title>[libc.so.6] (7,246,669 samples, 0.09%)</title><rect x="1.0535%" y="405" width="0.0919%" height="15" fill="rgb(249,33,26)" fg:x="83029156" fg:w="7246669"/><text x="1.3035%" y="415.50"></text></g><g><title>[libc.so.6] (116,911,370 samples, 1.48%)</title><rect x="1.1454%" y="405" width="1.4833%" height="15" fill="rgb(235,183,28)" fg:x="90275825" fg:w="116911370"/><text x="1.3954%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (10,825,888 samples, 0.14%)</title><rect x="2.6287%" y="405" width="0.1374%" height="15" fill="rgb(221,5,38)" fg:x="207187195" fg:w="10825888"/><text x="2.8787%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7,021,389 samples, 0.09%)</title><rect x="2.6770%" y="389" width="0.0891%" height="15" fill="rgb(247,18,42)" fg:x="210991694" fg:w="7021389"/><text x="2.9270%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7,021,389 samples, 0.09%)</title><rect x="2.6770%" y="373" width="0.0891%" height="15" fill="rgb(241,131,45)" fg:x="210991694" fg:w="7021389"/><text x="2.9270%" y="383.50"></text></g><g><title>alloc::alloc::realloc (7,021,389 samples, 0.09%)</title><rect x="2.6770%" y="357" width="0.0891%" height="15" fill="rgb(249,31,29)" fg:x="210991694" fg:w="7021389"/><text x="2.9270%" y="367.50"></text></g><g><title>__rdl_realloc (7,021,389 samples, 0.09%)</title><rect x="2.6770%" y="341" width="0.0891%" height="15" fill="rgb(225,111,53)" fg:x="210991694" fg:w="7021389"/><text x="2.9270%" y="351.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7,021,389 samples, 0.09%)</title><rect x="2.6770%" y="325" width="0.0891%" height="15" fill="rgb(238,160,17)" fg:x="210991694" fg:w="7021389"/><text x="2.9270%" y="335.50"></text></g><g><title>cfree (28,168,142 samples, 0.36%)</title><rect x="2.7661%" y="405" width="0.3574%" height="15" fill="rgb(214,148,48)" fg:x="218013083" fg:w="28168142"/><text x="3.0161%" y="415.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (10,656,547 samples, 0.14%)</title><rect x="4.0948%" y="325" width="0.1352%" height="15" fill="rgb(232,36,49)" fg:x="322735132" fg:w="10656547"/><text x="4.3448%" y="335.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (10,656,547 samples, 0.14%)</title><rect x="4.0948%" y="309" width="0.1352%" height="15" fill="rgb(209,103,24)" fg:x="322735132" fg:w="10656547"/><text x="4.3448%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (10,656,547 samples, 0.14%)</title><rect x="4.0948%" y="293" width="0.1352%" height="15" fill="rgb(229,88,8)" fg:x="322735132" fg:w="10656547"/><text x="4.3448%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (10,656,547 samples, 0.14%)</title><rect x="4.0948%" y="277" width="0.1352%" height="15" fill="rgb(213,181,19)" fg:x="322735132" fg:w="10656547"/><text x="4.3448%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (101,509,243 samples, 1.29%)</title><rect x="3.1235%" y="405" width="1.2879%" height="15" fill="rgb(254,191,54)" fg:x="246181225" fg:w="101509243"/><text x="3.3735%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (101,509,243 samples, 1.29%)</title><rect x="3.1235%" y="389" width="1.2879%" height="15" fill="rgb(241,83,37)" fg:x="246181225" fg:w="101509243"/><text x="3.3735%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (24,955,336 samples, 0.32%)</title><rect x="4.0948%" y="373" width="0.3166%" height="15" fill="rgb(233,36,39)" fg:x="322735132" fg:w="24955336"/><text x="4.3448%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (24,955,336 samples, 0.32%)</title><rect x="4.0948%" y="357" width="0.3166%" height="15" fill="rgb(226,3,54)" fg:x="322735132" fg:w="24955336"/><text x="4.3448%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (24,955,336 samples, 0.32%)</title><rect x="4.0948%" y="341" width="0.3166%" height="15" fill="rgb(245,192,40)" fg:x="322735132" fg:w="24955336"/><text x="4.3448%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="325" width="0.1814%" height="15" fill="rgb(238,167,29)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="335.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="309" width="0.1814%" height="15" fill="rgb(232,182,51)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="293" width="0.1814%" height="15" fill="rgb(231,60,39)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="277" width="0.1814%" height="15" fill="rgb(208,69,12)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="287.50"></text></g><g><title>alloc::alloc::alloc (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="261" width="0.1814%" height="15" fill="rgb(235,93,37)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="271.50"></text></g><g><title>__rdl_alloc (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="245" width="0.1814%" height="15" fill="rgb(213,116,39)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14,298,789 samples, 0.18%)</title><rect x="4.2300%" y="229" width="0.1814%" height="15" fill="rgb(222,207,29)" fg:x="333391679" fg:w="14298789"/><text x="4.4800%" y="239.50"></text></g><g><title>malloc (24,554,324 samples, 0.31%)</title><rect x="4.4114%" y="405" width="0.3115%" height="15" fill="rgb(206,96,30)" fg:x="347690468" fg:w="24554324"/><text x="4.6614%" y="415.50"></text></g><g><title>[unknown] (285,521,170 samples, 3.62%)</title><rect x="1.1454%" y="421" width="3.6226%" height="15" fill="rgb(218,138,4)" fg:x="90275825" fg:w="285521170"/><text x="1.3954%" y="431.50">[unk..</text></g><g><title>realloc (3,552,203 samples, 0.05%)</title><rect x="4.7229%" y="405" width="0.0451%" height="15" fill="rgb(250,191,14)" fg:x="372244792" fg:w="3552203"/><text x="4.9729%" y="415.50"></text></g><g><title>[libc.so.6] (21,785,308 samples, 0.28%)</title><rect x="4.7680%" y="389" width="0.2764%" height="15" fill="rgb(239,60,40)" fg:x="375796995" fg:w="21785308"/><text x="5.0180%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,467,970 samples, 0.04%)</title><rect x="8.2547%" y="341" width="0.0440%" height="15" fill="rgb(206,27,48)" fg:x="650604580" fg:w="3467970"/><text x="8.5047%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,467,970 samples, 0.04%)</title><rect x="8.2547%" y="325" width="0.0440%" height="15" fill="rgb(225,35,8)" fg:x="650604580" fg:w="3467970"/><text x="8.5047%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,467,970 samples, 0.04%)</title><rect x="8.2547%" y="309" width="0.0440%" height="15" fill="rgb(250,213,24)" fg:x="650604580" fg:w="3467970"/><text x="8.5047%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,629,480 samples, 0.05%)</title><rect x="8.2987%" y="341" width="0.0460%" height="15" fill="rgb(247,123,22)" fg:x="654072550" fg:w="3629480"/><text x="8.5487%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,629,480 samples, 0.05%)</title><rect x="8.2987%" y="325" width="0.0460%" height="15" fill="rgb(231,138,38)" fg:x="654072550" fg:w="3629480"/><text x="8.5487%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3,629,480 samples, 0.05%)</title><rect x="8.2987%" y="309" width="0.0460%" height="15" fill="rgb(231,145,46)" fg:x="654072550" fg:w="3629480"/><text x="8.5487%" y="319.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="229" width="0.0451%" height="15" fill="rgb(251,118,11)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="239.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="213" width="0.0451%" height="15" fill="rgb(217,147,25)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="223.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="197" width="0.0451%" height="15" fill="rgb(247,81,37)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="207.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="181" width="0.0451%" height="15" fill="rgb(209,12,38)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="165" width="0.0451%" height="15" fill="rgb(227,1,9)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3,552,605 samples, 0.05%)</title><rect x="8.4345%" y="149" width="0.0451%" height="15" fill="rgb(248,47,43)" fg:x="664774099" fg:w="3552605"/><text x="8.6845%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,215,687 samples, 0.27%)</title><rect x="8.3447%" y="293" width="0.2692%" height="15" fill="rgb(221,10,30)" fg:x="657702030" fg:w="21215687"/><text x="8.5947%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,215,687 samples, 0.27%)</title><rect x="8.3447%" y="277" width="0.2692%" height="15" fill="rgb(210,229,1)" fg:x="657702030" fg:w="21215687"/><text x="8.5947%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (14,143,618 samples, 0.18%)</title><rect x="8.4345%" y="261" width="0.1795%" height="15" fill="rgb(222,148,37)" fg:x="664774099" fg:w="14143618"/><text x="8.6845%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14,143,618 samples, 0.18%)</title><rect x="8.4345%" y="245" width="0.1795%" height="15" fill="rgb(234,67,33)" fg:x="664774099" fg:w="14143618"/><text x="8.6845%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (10,591,013 samples, 0.13%)</title><rect x="8.4795%" y="229" width="0.1344%" height="15" fill="rgb(247,98,35)" fg:x="668326704" fg:w="10591013"/><text x="8.7295%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10,591,013 samples, 0.13%)</title><rect x="8.4795%" y="213" width="0.1344%" height="15" fill="rgb(247,138,52)" fg:x="668326704" fg:w="10591013"/><text x="8.7295%" y="223.50"></text></g><g><title>aoc2024::day23::brute_force_clique::_{{closure}} (10,591,013 samples, 0.13%)</title><rect x="8.4795%" y="197" width="0.1344%" height="15" fill="rgb(213,79,30)" fg:x="668326704" fg:w="10591013"/><text x="8.7295%" y="207.50"></text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (24,756,739 samples, 0.31%)</title><rect x="8.3447%" y="341" width="0.3141%" height="15" fill="rgb(246,177,23)" fg:x="657702030" fg:w="24756739"/><text x="8.5947%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,756,739 samples, 0.31%)</title><rect x="8.3447%" y="325" width="0.3141%" height="15" fill="rgb(230,62,27)" fg:x="657702030" fg:w="24756739"/><text x="8.5947%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (24,756,739 samples, 0.31%)</title><rect x="8.3447%" y="309" width="0.3141%" height="15" fill="rgb(216,154,8)" fg:x="657702030" fg:w="24756739"/><text x="8.5947%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3,541,052 samples, 0.04%)</title><rect x="8.6139%" y="293" width="0.0449%" height="15" fill="rgb(244,35,45)" fg:x="678917717" fg:w="3541052"/><text x="8.8639%" y="303.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::increment_indices (270,809,864 samples, 3.44%)</title><rect x="5.2680%" y="357" width="3.4360%" height="15" fill="rgb(251,115,12)" fg:x="415202089" fg:w="270809864"/><text x="5.5180%" y="367.50">ite..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::len (3,553,184 samples, 0.05%)</title><rect x="8.6589%" y="341" width="0.0451%" height="15" fill="rgb(240,54,50)" fg:x="682458769" fg:w="3553184"/><text x="8.9089%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,553,184 samples, 0.05%)</title><rect x="8.6589%" y="325" width="0.0451%" height="15" fill="rgb(233,84,52)" fg:x="682458769" fg:w="3553184"/><text x="8.9089%" y="335.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::k (6,839,440 samples, 0.09%)</title><rect x="8.7483%" y="341" width="0.0868%" height="15" fill="rgb(207,117,47)" fg:x="689505691" fg:w="6839440"/><text x="8.9983%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6,839,440 samples, 0.09%)</title><rect x="8.7483%" y="325" width="0.0868%" height="15" fill="rgb(249,43,39)" fg:x="689505691" fg:w="6839440"/><text x="8.9983%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,181,367 samples, 0.14%)</title><rect x="8.9686%" y="149" width="0.1419%" height="15" fill="rgb(209,38,44)" fg:x="706873154" fg:w="11181367"/><text x="9.2186%" y="159.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,181,367 samples, 0.14%)</title><rect x="8.9686%" y="133" width="0.1419%" height="15" fill="rgb(236,212,23)" fg:x="706873154" fg:w="11181367"/><text x="9.2186%" y="143.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,181,367 samples, 0.14%)</title><rect x="8.9686%" y="117" width="0.1419%" height="15" fill="rgb(242,79,21)" fg:x="706873154" fg:w="11181367"/><text x="9.2186%" y="127.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,181,367 samples, 0.14%)</title><rect x="8.9686%" y="101" width="0.1419%" height="15" fill="rgb(211,96,35)" fg:x="706873154" fg:w="11181367"/><text x="9.2186%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,181,367 samples, 0.14%)</title><rect x="8.9686%" y="85" width="0.1419%" height="15" fill="rgb(253,215,40)" fg:x="706873154" fg:w="11181367"/><text x="9.2186%" y="95.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (7,626,038 samples, 0.10%)</title><rect x="9.0137%" y="69" width="0.0968%" height="15" fill="rgb(211,81,21)" fg:x="710428483" fg:w="7626038"/><text x="9.2637%" y="79.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7,626,038 samples, 0.10%)</title><rect x="9.0137%" y="53" width="0.0968%" height="15" fill="rgb(208,190,38)" fg:x="710428483" fg:w="7626038"/><text x="9.2637%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7,626,038 samples, 0.10%)</title><rect x="9.0137%" y="37" width="0.0968%" height="15" fill="rgb(235,213,38)" fg:x="710428483" fg:w="7626038"/><text x="9.2637%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (42,792,189 samples, 0.54%)</title><rect x="8.8350%" y="277" width="0.5429%" height="15" fill="rgb(237,122,38)" fg:x="696345131" fg:w="42792189"/><text x="9.0850%" y="287.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="261" width="0.4542%" height="15" fill="rgb(244,218,35)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="245" width="0.4542%" height="15" fill="rgb(240,68,47)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="229" width="0.4542%" height="15" fill="rgb(210,16,53)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="213" width="0.4542%" height="15" fill="rgb(235,124,12)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="197" width="0.4542%" height="15" fill="rgb(224,169,11)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="181" width="0.4542%" height="15" fill="rgb(250,166,2)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35,796,515 samples, 0.45%)</title><rect x="8.9238%" y="165" width="0.4542%" height="15" fill="rgb(242,216,29)" fg:x="703340805" fg:w="35796515"/><text x="9.1738%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (21,082,799 samples, 0.27%)</title><rect x="9.1105%" y="149" width="0.2675%" height="15" fill="rgb(230,116,27)" fg:x="718054521" fg:w="21082799"/><text x="9.3605%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (21,082,799 samples, 0.27%)</title><rect x="9.1105%" y="133" width="0.2675%" height="15" fill="rgb(228,99,48)" fg:x="718054521" fg:w="21082799"/><text x="9.3605%" y="143.50"></text></g><g><title>aoc2024::day23::brute_force_clique::_{{closure}} (21,082,799 samples, 0.27%)</title><rect x="9.1105%" y="117" width="0.2675%" height="15" fill="rgb(253,11,6)" fg:x="718054521" fg:w="21082799"/><text x="9.3605%" y="127.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,555,390 samples, 0.05%)</title><rect x="9.4661%" y="197" width="0.0451%" height="15" fill="rgb(247,143,39)" fg:x="746085720" fg:w="3555390"/><text x="9.7161%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,526,968 samples, 0.04%)</title><rect x="9.5112%" y="197" width="0.0447%" height="15" fill="rgb(236,97,10)" fg:x="749641110" fg:w="3526968"/><text x="9.7612%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (109,692,510 samples, 1.39%)</title><rect x="8.8350%" y="325" width="1.3917%" height="15" fill="rgb(233,208,19)" fg:x="696345131" fg:w="109692510"/><text x="9.0850%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (109,692,510 samples, 1.39%)</title><rect x="8.8350%" y="309" width="1.3917%" height="15" fill="rgb(216,164,2)" fg:x="696345131" fg:w="109692510"/><text x="9.0850%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (109,692,510 samples, 1.39%)</title><rect x="8.8350%" y="293" width="1.3917%" height="15" fill="rgb(220,129,5)" fg:x="696345131" fg:w="109692510"/><text x="9.0850%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (66,900,321 samples, 0.85%)</title><rect x="9.3780%" y="277" width="0.8488%" height="15" fill="rgb(242,17,10)" fg:x="739137320" fg:w="66900321"/><text x="9.6280%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (66,900,321 samples, 0.85%)</title><rect x="9.3780%" y="261" width="0.8488%" height="15" fill="rgb(242,107,0)" fg:x="739137320" fg:w="66900321"/><text x="9.6280%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (66,900,321 samples, 0.85%)</title><rect x="9.3780%" y="245" width="0.8488%" height="15" fill="rgb(251,28,31)" fg:x="739137320" fg:w="66900321"/><text x="9.6280%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (59,951,921 samples, 0.76%)</title><rect x="9.4661%" y="229" width="0.7607%" height="15" fill="rgb(233,223,10)" fg:x="746085720" fg:w="59951921"/><text x="9.7161%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (59,951,921 samples, 0.76%)</title><rect x="9.4661%" y="213" width="0.7607%" height="15" fill="rgb(215,21,27)" fg:x="746085720" fg:w="59951921"/><text x="9.7161%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (52,869,563 samples, 0.67%)</title><rect x="9.5560%" y="197" width="0.6708%" height="15" fill="rgb(232,23,21)" fg:x="753168078" fg:w="52869563"/><text x="9.8060%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="181" width="0.6261%" height="15" fill="rgb(244,5,23)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="165" width="0.6261%" height="15" fill="rgb(226,81,46)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="175.50"></text></g><g><title>alloc::alloc::realloc (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="149" width="0.6261%" height="15" fill="rgb(247,70,30)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="159.50"></text></g><g><title>__rdl_realloc (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="133" width="0.6261%" height="15" fill="rgb(212,68,19)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="117" width="0.6261%" height="15" fill="rgb(240,187,13)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="127.50"></text></g><g><title>realloc (49,349,037 samples, 0.63%)</title><rect x="9.6007%" y="101" width="0.6261%" height="15" fill="rgb(223,113,26)" fg:x="756688604" fg:w="49349037"/><text x="9.8507%" y="111.50"></text></g><g><title>[libc.so.6] (31,707,913 samples, 0.40%)</title><rect x="9.8245%" y="85" width="0.4023%" height="15" fill="rgb(206,192,2)" fg:x="774329728" fg:w="31707913"/><text x="10.0745%" y="95.50"></text></g><g><title>[libc.so.6] (28,152,437 samples, 0.36%)</title><rect x="9.8696%" y="69" width="0.3572%" height="15" fill="rgb(241,108,4)" fg:x="777885204" fg:w="28152437"/><text x="10.1196%" y="79.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::init (123,546,558 samples, 1.57%)</title><rect x="8.7039%" y="357" width="1.5675%" height="15" fill="rgb(247,173,49)" fg:x="686011953" fg:w="123546558"/><text x="8.9539%" y="367.50"></text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::prefill (113,213,380 samples, 1.44%)</title><rect x="8.8350%" y="341" width="1.4364%" height="15" fill="rgb(224,114,35)" fg:x="696345131" fg:w="113213380"/><text x="9.0850%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,520,870 samples, 0.04%)</title><rect x="10.2268%" y="325" width="0.0447%" height="15" fill="rgb(245,159,27)" fg:x="806037641" fg:w="3520870"/><text x="10.4768%" y="335.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (7,077,286 samples, 0.09%)</title><rect x="10.5824%" y="149" width="0.0898%" height="15" fill="rgb(245,172,44)" fg:x="834066062" fg:w="7077286"/><text x="10.8324%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (24,579,087 samples, 0.31%)</title><rect x="10.5824%" y="181" width="0.3119%" height="15" fill="rgb(236,23,11)" fg:x="834066062" fg:w="24579087"/><text x="10.8324%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (24,579,087 samples, 0.31%)</title><rect x="10.5824%" y="165" width="0.3119%" height="15" fill="rgb(205,117,38)" fg:x="834066062" fg:w="24579087"/><text x="10.8324%" y="175.50"></text></g><g><title>core::ptr::write (17,501,801 samples, 0.22%)</title><rect x="10.6722%" y="149" width="0.2221%" height="15" fill="rgb(237,72,25)" fg:x="841143348" fg:w="17501801"/><text x="10.9222%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (56,162,502 samples, 0.71%)</title><rect x="10.2715%" y="277" width="0.7126%" height="15" fill="rgb(244,70,9)" fg:x="809558511" fg:w="56162502"/><text x="10.5215%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (56,162,502 samples, 0.71%)</title><rect x="10.2715%" y="261" width="0.7126%" height="15" fill="rgb(217,125,39)" fg:x="809558511" fg:w="56162502"/><text x="10.5215%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (56,162,502 samples, 0.71%)</title><rect x="10.2715%" y="245" width="0.7126%" height="15" fill="rgb(235,36,10)" fg:x="809558511" fg:w="56162502"/><text x="10.5215%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,162,502 samples, 0.71%)</title><rect x="10.2715%" y="229" width="0.7126%" height="15" fill="rgb(251,123,47)" fg:x="809558511" fg:w="56162502"/><text x="10.5215%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56,162,502 samples, 0.71%)</title><rect x="10.2715%" y="213" width="0.7126%" height="15" fill="rgb(221,13,13)" fg:x="809558511" fg:w="56162502"/><text x="10.5215%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (31,654,951 samples, 0.40%)</title><rect x="10.5824%" y="197" width="0.4016%" height="15" fill="rgb(238,131,9)" fg:x="834066062" fg:w="31654951"/><text x="10.8324%" y="207.50"></text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at::_{{closure}} (7,075,864 samples, 0.09%)</title><rect x="10.8943%" y="181" width="0.0898%" height="15" fill="rgb(211,50,8)" fg:x="858645149" fg:w="7075864"/><text x="11.1443%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,075,864 samples, 0.09%)</title><rect x="10.8943%" y="165" width="0.0898%" height="15" fill="rgb(245,182,24)" fg:x="858645149" fg:w="7075864"/><text x="11.1443%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,075,864 samples, 0.09%)</title><rect x="10.8943%" y="149" width="0.0898%" height="15" fill="rgb(242,14,37)" fg:x="858645149" fg:w="7075864"/><text x="11.1443%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,075,864 samples, 0.09%)</title><rect x="10.8943%" y="133" width="0.0898%" height="15" fill="rgb(246,228,12)" fg:x="858645149" fg:w="7075864"/><text x="11.1443%" y="143.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (506,935,145 samples, 6.43%)</title><rect x="5.1782%" y="373" width="6.4319%" height="15" fill="rgb(213,55,15)" fg:x="408127439" fg:w="506935145"/><text x="5.4282%" y="383.50">&lt;itertoo..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at (105,504,073 samples, 1.34%)</title><rect x="10.2715%" y="357" width="1.3386%" height="15" fill="rgb(209,9,3)" fg:x="809558511" fg:w="105504073"/><text x="10.5215%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (105,504,073 samples, 1.34%)</title><rect x="10.2715%" y="341" width="1.3386%" height="15" fill="rgb(230,59,30)" fg:x="809558511" fg:w="105504073"/><text x="10.5215%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (105,504,073 samples, 1.34%)</title><rect x="10.2715%" y="325" width="1.3386%" height="15" fill="rgb(209,121,21)" fg:x="809558511" fg:w="105504073"/><text x="10.5215%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (105,504,073 samples, 1.34%)</title><rect x="10.2715%" y="309" width="1.3386%" height="15" fill="rgb(220,109,13)" fg:x="809558511" fg:w="105504073"/><text x="10.5215%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (105,504,073 samples, 1.34%)</title><rect x="10.2715%" y="293" width="1.3386%" height="15" fill="rgb(232,18,1)" fg:x="809558511" fg:w="105504073"/><text x="10.5215%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="277" width="0.6260%" height="15" fill="rgb(215,41,42)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="261" width="0.6260%" height="15" fill="rgb(224,123,36)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="245" width="0.6260%" height="15" fill="rgb(240,125,3)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="229" width="0.6260%" height="15" fill="rgb(205,98,50)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="213" width="0.6260%" height="15" fill="rgb(205,185,37)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="197" width="0.6260%" height="15" fill="rgb(238,207,15)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="181" width="0.6260%" height="15" fill="rgb(213,199,42)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="191.50"></text></g><g><title>alloc::alloc::alloc (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="165" width="0.6260%" height="15" fill="rgb(235,201,11)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="175.50"></text></g><g><title>__rdl_alloc (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="149" width="0.6260%" height="15" fill="rgb(207,46,11)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (49,341,571 samples, 0.63%)</title><rect x="10.9840%" y="133" width="0.6260%" height="15" fill="rgb(241,35,35)" fg:x="865721013" fg:w="49341571"/><text x="11.2340%" y="143.50"></text></g><g><title>malloc (31,472,675 samples, 0.40%)</title><rect x="11.2107%" y="117" width="0.3993%" height="15" fill="rgb(243,32,47)" fg:x="883589909" fg:w="31472675"/><text x="11.4607%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="373" width="0.0451%" height="15" fill="rgb(247,202,23)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="357" width="0.0451%" height="15" fill="rgb(219,102,11)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="341" width="0.0451%" height="15" fill="rgb(243,110,44)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="325" width="0.0451%" height="15" fill="rgb(222,74,54)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="309" width="0.0451%" height="15" fill="rgb(216,99,12)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="293" width="0.0451%" height="15" fill="rgb(226,22,26)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="277" width="0.0451%" height="15" fill="rgb(217,163,10)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="287.50"></text></g><g><title>alloc::alloc::realloc (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="261" width="0.0451%" height="15" fill="rgb(213,25,53)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="271.50"></text></g><g><title>__rdl_realloc (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="245" width="0.0451%" height="15" fill="rgb(252,105,26)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="229" width="0.0451%" height="15" fill="rgb(220,39,43)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="239.50"></text></g><g><title>realloc (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="213" width="0.0451%" height="15" fill="rgb(229,68,48)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="223.50"></text></g><g><title>[libc.so.6] (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="197" width="0.0451%" height="15" fill="rgb(252,8,32)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="207.50"></text></g><g><title>[libc.so.6] (3,554,656 samples, 0.05%)</title><rect x="11.6101%" y="181" width="0.0451%" height="15" fill="rgb(223,20,43)" fg:x="915062584" fg:w="3554656"/><text x="11.8601%" y="191.50"></text></g><g><title>&lt;itertools::adaptors::TupleCombinations&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,808,503 samples, 0.31%)</title><rect x="12.0372%" y="341" width="0.3148%" height="15" fill="rgb(229,81,49)" fg:x="948724677" fg:w="24808503"/><text x="12.2872%" y="351.50"></text></g><g><title>&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,808,503 samples, 0.31%)</title><rect x="12.0372%" y="325" width="0.3148%" height="15" fill="rgb(236,28,36)" fg:x="948724677" fg:w="24808503"/><text x="12.2872%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (24,808,503 samples, 0.31%)</title><rect x="12.0372%" y="309" width="0.3148%" height="15" fill="rgb(249,185,26)" fg:x="948724677" fg:w="24808503"/><text x="12.2872%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="245" width="0.2253%" height="15" fill="rgb(249,174,33)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="229" width="0.2253%" height="15" fill="rgb(233,201,37)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="213" width="0.2253%" height="15" fill="rgb(221,78,26)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="197" width="0.2253%" height="15" fill="rgb(250,127,30)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="207.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_usize (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="181" width="0.2253%" height="15" fill="rgb(230,49,44)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="191.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="165" width="0.2253%" height="15" fill="rgb(229,67,23)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (17,757,579 samples, 0.23%)</title><rect x="12.6188%" y="149" width="0.2253%" height="15" fill="rgb(249,83,47)" fg:x="994568122" fg:w="17757579"/><text x="12.8688%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (17,765,795 samples, 0.23%)</title><rect x="12.9785%" y="181" width="0.2254%" height="15" fill="rgb(215,43,3)" fg:x="1022919369" fg:w="17765795"/><text x="13.2285%" y="191.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (17,765,795 samples, 0.23%)</title><rect x="12.9785%" y="165" width="0.2254%" height="15" fill="rgb(238,154,13)" fg:x="1022919369" fg:w="17765795"/><text x="13.2285%" y="175.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (17,765,795 samples, 0.23%)</title><rect x="12.9785%" y="149" width="0.2254%" height="15" fill="rgb(219,56,2)" fg:x="1022919369" fg:w="17765795"/><text x="13.2285%" y="159.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21,311,125 samples, 0.27%)</title><rect x="12.9785%" y="197" width="0.2704%" height="15" fill="rgb(233,0,4)" fg:x="1022919369" fg:w="21311125"/><text x="13.2285%" y="207.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::remove_lowest_bit (3,545,330 samples, 0.04%)</title><rect x="13.2039%" y="181" width="0.0450%" height="15" fill="rgb(235,30,7)" fg:x="1040685164" fg:w="3545330"/><text x="13.4539%" y="191.50"></text></g><g><title>core::intrinsics::likely (42,442,408 samples, 0.54%)</title><rect x="13.2489%" y="197" width="0.5385%" height="15" fill="rgb(250,79,13)" fg:x="1044230494" fg:w="42442408"/><text x="13.4989%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (20,863,466 samples, 0.26%)</title><rect x="13.7874%" y="197" width="0.2647%" height="15" fill="rgb(211,146,34)" fg:x="1086672902" fg:w="20863466"/><text x="14.0374%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20,863,466 samples, 0.26%)</title><rect x="13.7874%" y="181" width="0.2647%" height="15" fill="rgb(228,22,38)" fg:x="1086672902" fg:w="20863466"/><text x="14.0374%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20,863,466 samples, 0.26%)</title><rect x="13.7874%" y="165" width="0.2647%" height="15" fill="rgb(235,168,5)" fg:x="1086672902" fg:w="20863466"/><text x="14.0374%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (28,784,520 samples, 0.37%)</title><rect x="14.0521%" y="197" width="0.3652%" height="15" fill="rgb(221,155,16)" fg:x="1107536368" fg:w="28784520"/><text x="14.3021%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (28,784,520 samples, 0.37%)</title><rect x="14.0521%" y="181" width="0.3652%" height="15" fill="rgb(215,215,53)" fg:x="1107536368" fg:w="28784520"/><text x="14.3021%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28,784,520 samples, 0.37%)</title><rect x="14.0521%" y="165" width="0.3652%" height="15" fill="rgb(223,4,10)" fg:x="1107536368" fg:w="28784520"/><text x="14.3021%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (35,015,467 samples, 0.44%)</title><rect x="14.4173%" y="197" width="0.4443%" height="15" fill="rgb(234,103,6)" fg:x="1136320888" fg:w="35015467"/><text x="14.6673%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (35,015,467 samples, 0.44%)</title><rect x="14.4173%" y="181" width="0.4443%" height="15" fill="rgb(227,97,0)" fg:x="1136320888" fg:w="35015467"/><text x="14.6673%" y="191.50"></text></g><g><title>hashbrown::control::tag::Tag::full (33,420,151 samples, 0.42%)</title><rect x="14.8616%" y="197" width="0.4240%" height="15" fill="rgb(234,150,53)" fg:x="1171336355" fg:w="33420151"/><text x="15.1116%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (14,305,844 samples, 0.18%)</title><rect x="15.2856%" y="197" width="0.1815%" height="15" fill="rgb(228,201,54)" fg:x="1204756506" fg:w="14305844"/><text x="15.5356%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (328,631,542 samples, 4.17%)</title><rect x="11.6552%" y="373" width="4.1696%" height="15" fill="rgb(222,22,37)" fg:x="918617240" fg:w="328631542"/><text x="11.9052%" y="383.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (328,631,542 samples, 4.17%)</title><rect x="11.6552%" y="357" width="4.1696%" height="15" fill="rgb(237,53,32)" fg:x="918617240" fg:w="328631542"/><text x="11.9052%" y="367.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (273,715,602 samples, 3.47%)</title><rect x="12.3519%" y="341" width="3.4728%" height="15" fill="rgb(233,25,53)" fg:x="973533180" fg:w="273715602"/><text x="12.6019%" y="351.50">cor..</text></g><g><title>aoc2024::day23::brute_force_clique::_{{closure}} (273,715,602 samples, 3.47%)</title><rect x="12.3519%" y="325" width="3.4728%" height="15" fill="rgb(210,40,34)" fg:x="973533180" fg:w="273715602"/><text x="12.6019%" y="335.50">aoc..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (256,219,033 samples, 3.25%)</title><rect x="12.5739%" y="309" width="3.2508%" height="15" fill="rgb(241,220,44)" fg:x="991029749" fg:w="256219033"/><text x="12.8239%" y="319.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (256,219,033 samples, 3.25%)</title><rect x="12.5739%" y="293" width="3.2508%" height="15" fill="rgb(235,28,35)" fg:x="991029749" fg:w="256219033"/><text x="12.8239%" y="303.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (256,219,033 samples, 3.25%)</title><rect x="12.5739%" y="277" width="3.2508%" height="15" fill="rgb(210,56,17)" fg:x="991029749" fg:w="256219033"/><text x="12.8239%" y="287.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (256,219,033 samples, 3.25%)</title><rect x="12.5739%" y="261" width="3.2508%" height="15" fill="rgb(224,130,29)" fg:x="991029749" fg:w="256219033"/><text x="12.8239%" y="271.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (234,923,081 samples, 2.98%)</title><rect x="12.8441%" y="245" width="2.9806%" height="15" fill="rgb(235,212,8)" fg:x="1012325701" fg:w="234923081"/><text x="13.0941%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (234,923,081 samples, 2.98%)</title><rect x="12.8441%" y="229" width="2.9806%" height="15" fill="rgb(223,33,50)" fg:x="1012325701" fg:w="234923081"/><text x="13.0941%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (234,923,081 samples, 2.98%)</title><rect x="12.8441%" y="213" width="2.9806%" height="15" fill="rgb(219,149,13)" fg:x="1012325701" fg:w="234923081"/><text x="13.0941%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (28,186,432 samples, 0.36%)</title><rect x="15.4671%" y="197" width="0.3576%" height="15" fill="rgb(250,156,29)" fg:x="1219062350" fg:w="28186432"/><text x="15.7171%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (316,640,935 samples, 4.02%)</title><rect x="16.1803%" y="245" width="4.0175%" height="15" fill="rgb(216,193,19)" fg:x="1275274830" fg:w="316640935"/><text x="16.4303%" y="255.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (309,308,275 samples, 3.92%)</title><rect x="16.2734%" y="229" width="3.9244%" height="15" fill="rgb(216,135,14)" fg:x="1282607490" fg:w="309308275"/><text x="16.5234%" y="239.50">allo..</text></g><g><title>__rdl_dealloc (309,308,275 samples, 3.92%)</title><rect x="16.2734%" y="213" width="3.9244%" height="15" fill="rgb(241,47,5)" fg:x="1282607490" fg:w="309308275"/><text x="16.5234%" y="223.50">__rd..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (309,308,275 samples, 3.92%)</title><rect x="16.2734%" y="197" width="3.9244%" height="15" fill="rgb(233,42,35)" fg:x="1282607490" fg:w="309308275"/><text x="16.5234%" y="207.50">std:..</text></g><g><title>cfree (302,248,751 samples, 3.83%)</title><rect x="16.3629%" y="181" width="3.8349%" height="15" fill="rgb(231,13,6)" fg:x="1289667014" fg:w="302248751"/><text x="16.6129%" y="191.50">cfree</text></g><g><title>[libc.so.6] (260,053,614 samples, 3.30%)</title><rect x="16.8983%" y="165" width="3.2995%" height="15" fill="rgb(207,181,40)" fg:x="1331862151" fg:w="260053614"/><text x="17.1483%" y="175.50">[li..</text></g><g><title>[libc.so.6] (50,254,878 samples, 0.64%)</title><rect x="19.5602%" y="149" width="0.6376%" height="15" fill="rgb(254,173,49)" fg:x="1541660887" fg:w="50254878"/><text x="19.8102%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;usize,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;: 676]&gt; (362,292,322 samples, 4.60%)</title><rect x="15.8248%" y="373" width="4.5967%" height="15" fill="rgb(221,1,38)" fg:x="1247248782" fg:w="362292322"/><text x="16.0748%" y="383.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;usize,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="357" width="4.3304%" height="15" fill="rgb(206,124,46)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="367.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;usize,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="341" width="4.3304%" height="15" fill="rgb(249,21,11)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="351.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="325" width="4.3304%" height="15" fill="rgb(222,201,40)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="335.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,())&gt;&gt; (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="309" width="4.3304%" height="15" fill="rgb(235,61,29)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="319.50">core:..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="293" width="4.3304%" height="15" fill="rgb(219,207,3)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="303.50">&lt;hash..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (341,307,095 samples, 4.33%)</title><rect x="16.0910%" y="277" width="4.3304%" height="15" fill="rgb(222,56,46)" fg:x="1268234009" fg:w="341307095"/><text x="16.3410%" y="287.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (334,266,274 samples, 4.24%)</title><rect x="16.1803%" y="261" width="4.2411%" height="15" fill="rgb(239,76,54)" fg:x="1275274830" fg:w="334266274"/><text x="16.4303%" y="271.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (17,625,339 samples, 0.22%)</title><rect x="20.1978%" y="245" width="0.2236%" height="15" fill="rgb(231,124,27)" fg:x="1591915765" fg:w="17625339"/><text x="20.4478%" y="255.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (17,625,339 samples, 0.22%)</title><rect x="20.1978%" y="229" width="0.2236%" height="15" fill="rgb(249,195,6)" fg:x="1591915765" fg:w="17625339"/><text x="20.4478%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,530,008 samples, 0.04%)</title><rect x="20.3766%" y="213" width="0.0448%" height="15" fill="rgb(237,174,47)" fg:x="1606011096" fg:w="3530008"/><text x="20.6266%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="373" width="0.9839%" height="15" fill="rgb(206,201,31)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="357" width="0.9839%" height="15" fill="rgb(231,57,52)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="341" width="0.9839%" height="15" fill="rgb(248,177,22)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="325" width="0.9839%" height="15" fill="rgb(215,211,37)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="309" width="0.9839%" height="15" fill="rgb(241,128,51)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="293" width="0.9839%" height="15" fill="rgb(227,165,31)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="303.50"></text></g><g><title>__rdl_dealloc (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="277" width="0.9839%" height="15" fill="rgb(228,167,24)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (77,546,346 samples, 0.98%)</title><rect x="20.4214%" y="261" width="0.9839%" height="15" fill="rgb(228,143,12)" fg:x="1609541104" fg:w="77546346"/><text x="20.6714%" y="271.50"></text></g><g><title>cfree (59,898,584 samples, 0.76%)</title><rect x="20.6453%" y="245" width="0.7600%" height="15" fill="rgb(249,149,8)" fg:x="1627188866" fg:w="59898584"/><text x="20.8953%" y="255.50"></text></g><g><title>[libc.so.6] (42,250,969 samples, 0.54%)</title><rect x="20.8692%" y="229" width="0.5361%" height="15" fill="rgb(243,35,44)" fg:x="1644836481" fg:w="42250969"/><text x="21.1192%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="357" width="0.0443%" height="15" fill="rgb(246,89,9)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="341" width="0.0443%" height="15" fill="rgb(233,213,13)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="325" width="0.0443%" height="15" fill="rgb(233,141,41)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="309" width="0.0443%" height="15" fill="rgb(239,167,4)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="293" width="0.0443%" height="15" fill="rgb(209,217,16)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="277" width="0.0443%" height="15" fill="rgb(219,88,35)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="287.50"></text></g><g><title>__rdl_dealloc (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="261" width="0.0443%" height="15" fill="rgb(220,193,23)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="245" width="0.0443%" height="15" fill="rgb(230,90,52)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="255.50"></text></g><g><title>cfree (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="229" width="0.0443%" height="15" fill="rgb(252,106,19)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="239.50"></text></g><g><title>[libc.so.6] (3,491,223 samples, 0.04%)</title><rect x="21.4053%" y="213" width="0.0443%" height="15" fill="rgb(206,74,20)" fg:x="1687087450" fg:w="3491223"/><text x="21.6553%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;std::collections::hash::set::Iter&lt;usize&gt;,aoc2024::day23::brute_force_clique::{{closure}}&gt;&gt;&gt;&gt; (84,368,769 samples, 1.07%)</title><rect x="21.4053%" y="373" width="1.0704%" height="15" fill="rgb(230,138,44)" fg:x="1687087450" fg:w="84368769"/><text x="21.6553%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::lazy_buffer::LazyBuffer&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;std::collections::hash::set::Iter&lt;usize&gt;,aoc2024::day23::brute_force_clique::{{closure}}&gt;&gt;&gt;&gt; (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="357" width="1.0262%" height="15" fill="rgb(235,182,43)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="341" width="1.0262%" height="15" fill="rgb(242,16,51)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="325" width="1.0262%" height="15" fill="rgb(248,9,4)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="309" width="1.0262%" height="15" fill="rgb(210,31,22)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="293" width="1.0262%" height="15" fill="rgb(239,54,39)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="277" width="1.0262%" height="15" fill="rgb(230,99,41)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="261" width="1.0262%" height="15" fill="rgb(253,106,12)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="271.50"></text></g><g><title>__rdl_dealloc (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="245" width="1.0262%" height="15" fill="rgb(213,46,41)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="229" width="1.0262%" height="15" fill="rgb(215,133,35)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="239.50"></text></g><g><title>cfree (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="213" width="1.0262%" height="15" fill="rgb(213,28,5)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="223.50"></text></g><g><title>[libc.so.6] (80,877,546 samples, 1.03%)</title><rect x="21.4496%" y="197" width="1.0262%" height="15" fill="rgb(215,77,49)" fg:x="1690578673" fg:w="80877546"/><text x="21.6996%" y="207.50"></text></g><g><title>[libc.so.6] (73,891,726 samples, 0.94%)</title><rect x="21.5382%" y="181" width="0.9375%" height="15" fill="rgb(248,100,22)" fg:x="1697564493" fg:w="73891726"/><text x="21.7882%" y="191.50"></text></g><g><title>[libc.so.6] (17,528,483 samples, 0.22%)</title><rect x="22.2534%" y="165" width="0.2224%" height="15" fill="rgb(208,67,9)" fg:x="1753927736" fg:w="17528483"/><text x="22.5034%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (7,070,934 samples, 0.09%)</title><rect x="22.4758%" y="373" width="0.0897%" height="15" fill="rgb(219,133,21)" fg:x="1771456219" fg:w="7070934"/><text x="22.7258%" y="383.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (7,070,934 samples, 0.09%)</title><rect x="22.4758%" y="357" width="0.0897%" height="15" fill="rgb(246,46,29)" fg:x="1771456219" fg:w="7070934"/><text x="22.7258%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,070,934 samples, 0.09%)</title><rect x="22.4758%" y="341" width="0.0897%" height="15" fill="rgb(246,185,52)" fg:x="1771456219" fg:w="7070934"/><text x="22.7258%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="277" width="0.0435%" height="15" fill="rgb(252,136,11)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="261" width="0.0435%" height="15" fill="rgb(219,138,53)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="245" width="0.0435%" height="15" fill="rgb(211,51,23)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="229" width="0.0435%" height="15" fill="rgb(247,221,28)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="213" width="0.0435%" height="15" fill="rgb(251,222,45)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="197" width="0.0435%" height="15" fill="rgb(217,162,53)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="207.50"></text></g><g><title>core::ptr::write (3,427,969 samples, 0.04%)</title><rect x="22.5655%" y="181" width="0.0435%" height="15" fill="rgb(229,93,14)" fg:x="1778527153" fg:w="3427969"/><text x="22.8155%" y="191.50"></text></g><g><title>itertools::Itertools::combinations (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="373" width="0.1338%" height="15" fill="rgb(209,67,49)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="383.50"></text></g><g><title>itertools::combinations::combinations (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="357" width="0.1338%" height="15" fill="rgb(213,87,29)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="341" width="0.1338%" height="15" fill="rgb(205,151,52)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="325" width="0.1338%" height="15" fill="rgb(253,215,39)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="309" width="0.1338%" height="15" fill="rgb(221,220,41)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10,548,669 samples, 0.13%)</title><rect x="22.5655%" y="293" width="0.1338%" height="15" fill="rgb(218,133,21)" fg:x="1778527153" fg:w="10548669"/><text x="22.8155%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="277" width="0.0903%" height="15" fill="rgb(221,193,43)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="261" width="0.0903%" height="15" fill="rgb(240,128,52)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="245" width="0.0903%" height="15" fill="rgb(253,114,12)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="229" width="0.0903%" height="15" fill="rgb(215,223,47)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="213" width="0.0903%" height="15" fill="rgb(248,225,23)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="197" width="0.0903%" height="15" fill="rgb(250,108,0)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="181" width="0.0903%" height="15" fill="rgb(228,208,7)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="191.50"></text></g><g><title>alloc::alloc::alloc (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="165" width="0.0903%" height="15" fill="rgb(244,45,10)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="175.50"></text></g><g><title>__rdl_alloc (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="149" width="0.0903%" height="15" fill="rgb(207,125,25)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="133" width="0.0903%" height="15" fill="rgb(210,195,18)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="143.50"></text></g><g><title>malloc (7,120,700 samples, 0.09%)</title><rect x="22.6090%" y="117" width="0.0903%" height="15" fill="rgb(249,80,12)" fg:x="1781955122" fg:w="7120700"/><text x="22.8590%" y="127.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (10,520,090 samples, 0.13%)</title><rect x="22.6993%" y="261" width="0.1335%" height="15" fill="rgb(221,65,9)" fg:x="1789075822" fg:w="10520090"/><text x="22.9493%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (10,520,090 samples, 0.13%)</title><rect x="22.6993%" y="245" width="0.1335%" height="15" fill="rgb(235,49,36)" fg:x="1789075822" fg:w="10520090"/><text x="22.9493%" y="255.50"></text></g><g><title>aoc2024::day23::brute_force_clique (1,405,534,085 samples, 17.83%)</title><rect x="5.0444%" y="389" width="17.8330%" height="15" fill="rgb(225,32,20)" fg:x="397582303" fg:w="1405534085"/><text x="5.2944%" y="399.50">aoc2024::day23::brute_force_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="373" width="0.1781%" height="15" fill="rgb(215,141,46)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="357" width="0.1781%" height="15" fill="rgb(250,160,47)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="341" width="0.1781%" height="15" fill="rgb(216,222,40)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="325" width="0.1781%" height="15" fill="rgb(234,217,39)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="309" width="0.1781%" height="15" fill="rgb(207,178,40)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="293" width="0.1781%" height="15" fill="rgb(221,136,13)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (14,040,566 samples, 0.18%)</title><rect x="22.6993%" y="277" width="0.1781%" height="15" fill="rgb(249,199,10)" fg:x="1789075822" fg:w="14040566"/><text x="22.9493%" y="287.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (3,520,476 samples, 0.04%)</title><rect x="22.8328%" y="261" width="0.0447%" height="15" fill="rgb(249,222,13)" fg:x="1799595912" fg:w="3520476"/><text x="23.0828%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (3,520,476 samples, 0.04%)</title><rect x="22.8328%" y="245" width="0.0447%" height="15" fill="rgb(244,185,38)" fg:x="1799595912" fg:w="3520476"/><text x="23.0828%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,520,476 samples, 0.04%)</title><rect x="22.8328%" y="229" width="0.0447%" height="15" fill="rgb(236,202,9)" fg:x="1799595912" fg:w="3520476"/><text x="23.0828%" y="239.50"></text></g><g><title>&lt;core::ops::try_trait::NeverShortCircuit&lt;T&gt; as core::ops::try_trait::Try&gt;::from_output (44,921,110 samples, 0.57%)</title><rect x="22.8775%" y="357" width="0.5699%" height="15" fill="rgb(250,229,37)" fg:x="1803116388" fg:w="44921110"/><text x="23.1275%" y="367.50"></text></g><g><title>[libc.so.6] (44,921,110 samples, 0.57%)</title><rect x="22.8775%" y="341" width="0.5699%" height="15" fill="rgb(206,174,23)" fg:x="1803116388" fg:w="44921110"/><text x="23.1275%" y="351.50"></text></g><g><title>core::array::from_fn (62,573,890 samples, 0.79%)</title><rect x="22.8775%" y="389" width="0.7939%" height="15" fill="rgb(211,33,43)" fg:x="1803116388" fg:w="62573890"/><text x="23.1275%" y="399.50"></text></g><g><title>core::array::try_from_fn (62,573,890 samples, 0.79%)</title><rect x="22.8775%" y="373" width="0.7939%" height="15" fill="rgb(245,58,50)" fg:x="1803116388" fg:w="62573890"/><text x="23.1275%" y="383.50"></text></g><g><title>core::array::try_from_fn_erased (17,652,780 samples, 0.22%)</title><rect x="23.4474%" y="357" width="0.2240%" height="15" fill="rgb(244,68,36)" fg:x="1848037498" fg:w="17652780"/><text x="23.6974%" y="367.50"></text></g><g><title>core::array::Guard&lt;T&gt;::push_unchecked (17,652,780 samples, 0.22%)</title><rect x="23.4474%" y="341" width="0.2240%" height="15" fill="rgb(232,229,15)" fg:x="1848037498" fg:w="17652780"/><text x="23.6974%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (17,652,780 samples, 0.22%)</title><rect x="23.4474%" y="325" width="0.2240%" height="15" fill="rgb(254,30,23)" fg:x="1848037498" fg:w="17652780"/><text x="23.6974%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (88,688,863 samples, 1.13%)</title><rect x="24.1205%" y="357" width="1.1253%" height="15" fill="rgb(235,160,14)" fg:x="1901090606" fg:w="88688863"/><text x="24.3705%" y="367.50"></text></g><g><title>core::cmp::min (38,826,887 samples, 0.49%)</title><rect x="24.7532%" y="341" width="0.4926%" height="15" fill="rgb(212,155,44)" fg:x="1950952582" fg:w="38826887"/><text x="25.0032%" y="351.50"></text></g><g><title>core::cmp::Ord::min (38,826,887 samples, 0.49%)</title><rect x="24.7532%" y="325" width="0.4926%" height="15" fill="rgb(226,2,50)" fg:x="1950952582" fg:w="38826887"/><text x="25.0032%" y="335.50"></text></g><g><title>core::cmp::min_by (38,826,887 samples, 0.49%)</title><rect x="24.7532%" y="309" width="0.4926%" height="15" fill="rgb(234,177,6)" fg:x="1950952582" fg:w="38826887"/><text x="25.0032%" y="319.50"></text></g><g><title>cfree (135,080,013 samples, 1.71%)</title><rect x="31.4751%" y="229" width="1.7139%" height="15" fill="rgb(217,24,9)" fg:x="2480752587" fg:w="135080013"/><text x="31.7251%" y="239.50"></text></g><g><title>[libc.so.6] (113,299,089 samples, 1.44%)</title><rect x="31.7515%" y="213" width="1.4375%" height="15" fill="rgb(220,13,46)" fg:x="2502533511" fg:w="113299089"/><text x="32.0015%" y="223.50"></text></g><g><title>core::intrinsics::unlikely (3,548,301 samples, 0.05%)</title><rect x="33.1890%" y="229" width="0.0450%" height="15" fill="rgb(239,221,27)" fg:x="2615832600" fg:w="3548301"/><text x="33.4390%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,435,445 samples, 0.04%)</title><rect x="33.8018%" y="197" width="0.0436%" height="15" fill="rgb(222,198,25)" fg:x="2664132331" fg:w="3435445"/><text x="34.0518%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (125,315,001 samples, 1.59%)</title><rect x="34.2928%" y="181" width="1.5900%" height="15" fill="rgb(211,99,13)" fg:x="2702829023" fg:w="125315001"/><text x="34.5428%" y="191.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (81,347,974 samples, 1.03%)</title><rect x="34.8506%" y="165" width="1.0321%" height="15" fill="rgb(232,111,31)" fg:x="2746796050" fg:w="81347974"/><text x="35.1006%" y="175.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (77,878,398 samples, 0.99%)</title><rect x="34.8946%" y="149" width="0.9881%" height="15" fill="rgb(245,82,37)" fg:x="2750265626" fg:w="77878398"/><text x="35.1446%" y="159.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (77,878,398 samples, 0.99%)</title><rect x="34.8946%" y="133" width="0.9881%" height="15" fill="rgb(227,149,46)" fg:x="2750265626" fg:w="77878398"/><text x="35.1446%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35,021,117 samples, 0.44%)</title><rect x="35.8827%" y="181" width="0.4443%" height="15" fill="rgb(218,36,50)" fg:x="2828144024" fg:w="35021117"/><text x="36.1327%" y="191.50"></text></g><g><title>core::ptr::read (11,129,705 samples, 0.14%)</title><rect x="36.3271%" y="117" width="0.1412%" height="15" fill="rgb(226,80,48)" fg:x="2863165141" fg:w="11129705"/><text x="36.5771%" y="127.50"></text></g><g><title>core::mem::swap (18,818,217 samples, 0.24%)</title><rect x="36.3271%" y="181" width="0.2388%" height="15" fill="rgb(238,224,15)" fg:x="2863165141" fg:w="18818217"/><text x="36.5771%" y="191.50"></text></g><g><title>core::intrinsics::typed_swap (18,818,217 samples, 0.24%)</title><rect x="36.3271%" y="165" width="0.2388%" height="15" fill="rgb(241,136,10)" fg:x="2863165141" fg:w="18818217"/><text x="36.5771%" y="175.50"></text></g><g><title>core::ptr::swap_nonoverlapping (18,818,217 samples, 0.24%)</title><rect x="36.3271%" y="149" width="0.2388%" height="15" fill="rgb(208,32,45)" fg:x="2863165141" fg:w="18818217"/><text x="36.5771%" y="159.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (18,818,217 samples, 0.24%)</title><rect x="36.3271%" y="133" width="0.2388%" height="15" fill="rgb(207,135,9)" fg:x="2863165141" fg:w="18818217"/><text x="36.5771%" y="143.50"></text></g><g><title>core::ptr::write (7,688,512 samples, 0.10%)</title><rect x="36.4683%" y="117" width="0.0975%" height="15" fill="rgb(206,86,44)" fg:x="2874294846" fg:w="7688512"/><text x="36.7183%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (158,909,425 samples, 2.02%)</title><rect x="36.5658%" y="181" width="2.0162%" height="15" fill="rgb(245,177,15)" fg:x="2881983358" fg:w="158909425"/><text x="36.8158%" y="191.50">h..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="165" width="0.3488%" height="15" fill="rgb(206,64,50)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="149" width="0.3488%" height="15" fill="rgb(234,36,40)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="133" width="0.3488%" height="15" fill="rgb(213,64,8)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="117" width="0.3488%" height="15" fill="rgb(210,75,36)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="101" width="0.3488%" height="15" fill="rgb(229,88,21)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="111.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_usize (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="85" width="0.3488%" height="15" fill="rgb(252,204,47)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="95.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="69" width="0.3488%" height="15" fill="rgb(208,77,27)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (27,488,212 samples, 0.35%)</title><rect x="38.2333%" y="53" width="0.3488%" height="15" fill="rgb(221,76,26)" fg:x="3013404571" fg:w="27488212"/><text x="38.4833%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (17,659,778 samples, 0.22%)</title><rect x="38.5820%" y="181" width="0.2241%" height="15" fill="rgb(225,139,18)" fg:x="3040892783" fg:w="17659778"/><text x="38.8320%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (52,893,750 samples, 0.67%)</title><rect x="38.8061%" y="165" width="0.6711%" height="15" fill="rgb(230,137,11)" fg:x="3058552561" fg:w="52893750"/><text x="39.0561%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (52,893,750 samples, 0.67%)</title><rect x="38.8061%" y="149" width="0.6711%" height="15" fill="rgb(212,28,1)" fg:x="3058552561" fg:w="52893750"/><text x="39.0561%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (35,279,466 samples, 0.45%)</title><rect x="39.4772%" y="165" width="0.4476%" height="15" fill="rgb(248,164,17)" fg:x="3111446311" fg:w="35279466"/><text x="39.7272%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (35,279,466 samples, 0.45%)</title><rect x="39.4772%" y="149" width="0.4476%" height="15" fill="rgb(222,171,42)" fg:x="3111446311" fg:w="35279466"/><text x="39.7272%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (35,279,466 samples, 0.45%)</title><rect x="39.4772%" y="133" width="0.4476%" height="15" fill="rgb(243,84,45)" fg:x="3111446311" fg:w="35279466"/><text x="39.7272%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (95,268,125 samples, 1.21%)</title><rect x="38.8061%" y="181" width="1.2087%" height="15" fill="rgb(252,49,23)" fg:x="3058552561" fg:w="95268125"/><text x="39.0561%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::ctrl (7,094,909 samples, 0.09%)</title><rect x="39.9248%" y="165" width="0.0900%" height="15" fill="rgb(215,19,7)" fg:x="3146725777" fg:w="7094909"/><text x="40.1748%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (56,542,178 samples, 0.72%)</title><rect x="40.0148%" y="149" width="0.7174%" height="15" fill="rgb(238,81,41)" fg:x="3153820686" fg:w="56542178"/><text x="40.2648%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (516,053,755 samples, 6.55%)</title><rect x="40.7322%" y="149" width="6.5476%" height="15" fill="rgb(210,199,37)" fg:x="3210362864" fg:w="516053755"/><text x="40.9822%" y="159.50">hashbrown..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (516,053,755 samples, 6.55%)</title><rect x="40.7322%" y="133" width="6.5476%" height="15" fill="rgb(244,192,49)" fg:x="3210362864" fg:w="516053755"/><text x="40.9822%" y="143.50">core::cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (516,053,755 samples, 6.55%)</title><rect x="40.7322%" y="117" width="6.5476%" height="15" fill="rgb(226,211,11)" fg:x="3210362864" fg:w="516053755"/><text x="40.9822%" y="127.50">core::int..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (71,087,472 samples, 0.90%)</title><rect x="47.2798%" y="133" width="0.9019%" height="15" fill="rgb(236,162,54)" fg:x="3726416619" fg:w="71087472"/><text x="47.5298%" y="143.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (72,533,881 samples, 0.92%)</title><rect x="48.1817%" y="133" width="0.9203%" height="15" fill="rgb(220,229,9)" fg:x="3797504091" fg:w="72533881"/><text x="48.4317%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (316,515,476 samples, 4.02%)</title><rect x="47.2798%" y="149" width="4.0159%" height="15" fill="rgb(250,87,22)" fg:x="3726416619" fg:w="316515476"/><text x="47.5298%" y="159.50">hash..</text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (172,894,123 samples, 2.19%)</title><rect x="49.1020%" y="133" width="2.1936%" height="15" fill="rgb(239,43,17)" fg:x="3870037972" fg:w="172894123"/><text x="49.3520%" y="143.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (172,894,123 samples, 2.19%)</title><rect x="49.1020%" y="117" width="2.1936%" height="15" fill="rgb(231,177,25)" fg:x="3870037972" fg:w="172894123"/><text x="49.3520%" y="127.50">c..</text></g><g><title>core::intrinsics::unlikely (49,363,434 samples, 0.63%)</title><rect x="51.2956%" y="133" width="0.6263%" height="15" fill="rgb(219,179,1)" fg:x="4042932095" fg:w="49363434"/><text x="51.5456%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (370,648,586 samples, 4.70%)</title><rect x="51.2956%" y="149" width="4.7027%" height="15" fill="rgb(238,219,53)" fg:x="4042932095" fg:w="370648586"/><text x="51.5456%" y="159.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (321,285,152 samples, 4.08%)</title><rect x="51.9219%" y="133" width="4.0764%" height="15" fill="rgb(232,167,36)" fg:x="4092295529" fg:w="321285152"/><text x="52.1719%" y="143.50">hash..</text></g><g><title>hashbrown::control::tag::Tag::is_full (321,285,152 samples, 4.08%)</title><rect x="51.9219%" y="117" width="4.0764%" height="15" fill="rgb(244,19,51)" fg:x="4092295529" fg:w="321285152"/><text x="52.1719%" y="127.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,326,928,111 samples, 16.84%)</title><rect x="40.0148%" y="165" width="16.8357%" height="15" fill="rgb(224,6,22)" fg:x="3153820686" fg:w="1326928111"/><text x="40.2648%" y="175.50">hashbrown::raw::RawTableIn..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (67,168,116 samples, 0.85%)</title><rect x="55.9983%" y="149" width="0.8522%" height="15" fill="rgb(224,145,5)" fg:x="4413580681" fg:w="67168116"/><text x="56.2483%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,451,380,212 samples, 18.41%)</title><rect x="40.0148%" y="181" width="18.4147%" height="15" fill="rgb(234,130,49)" fg:x="3153820686" fg:w="1451380212"/><text x="40.2648%" y="191.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (124,452,101 samples, 1.58%)</title><rect x="56.8505%" y="165" width="1.5790%" height="15" fill="rgb(254,6,2)" fg:x="4480748797" fg:w="124452101"/><text x="57.1005%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (124,452,101 samples, 1.58%)</title><rect x="56.8505%" y="149" width="1.5790%" height="15" fill="rgb(208,96,46)" fg:x="4480748797" fg:w="124452101"/><text x="57.1005%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (63,465,546 samples, 0.81%)</title><rect x="57.6243%" y="133" width="0.8052%" height="15" fill="rgb(239,3,39)" fg:x="4541735352" fg:w="63465546"/><text x="57.8743%" y="143.50"></text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (98,791,990 samples, 1.25%)</title><rect x="58.4295%" y="149" width="1.2534%" height="15" fill="rgb(233,210,1)" fg:x="4605200898" fg:w="98791990"/><text x="58.6795%" y="159.50"></text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (98,791,990 samples, 1.25%)</title><rect x="58.4295%" y="133" width="1.2534%" height="15" fill="rgb(244,137,37)" fg:x="4605200898" fg:w="98791990"/><text x="58.6795%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (98,791,990 samples, 1.25%)</title><rect x="58.4295%" y="117" width="1.2534%" height="15" fill="rgb(240,136,2)" fg:x="4605200898" fg:w="98791990"/><text x="58.6795%" y="127.50"></text></g><g><title>core::intrinsics::write_bytes (98,791,990 samples, 1.25%)</title><rect x="58.4295%" y="101" width="1.2534%" height="15" fill="rgb(239,18,37)" fg:x="4605200898" fg:w="98791990"/><text x="58.6795%" y="111.50"></text></g><g><title>[libc.so.6] (91,807,265 samples, 1.16%)</title><rect x="58.5182%" y="85" width="1.1648%" height="15" fill="rgb(218,185,22)" fg:x="4612185623" fg:w="91807265"/><text x="58.7682%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (10,581,618 samples, 0.13%)</title><rect x="60.1791%" y="117" width="0.1343%" height="15" fill="rgb(225,218,4)" fg:x="4743091143" fg:w="10581618"/><text x="60.4291%" y="127.50"></text></g><g><title>core::intrinsics::unlikely (3,532,460 samples, 0.04%)</title><rect x="60.3576%" y="101" width="0.0448%" height="15" fill="rgb(230,182,32)" fg:x="4757161244" fg:w="3532460"/><text x="60.6076%" y="111.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (46,258,701 samples, 0.59%)</title><rect x="59.9061%" y="133" width="0.5869%" height="15" fill="rgb(242,56,43)" fg:x="4721577525" fg:w="46258701"/><text x="60.1561%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14,163,465 samples, 0.18%)</title><rect x="60.3133%" y="117" width="0.1797%" height="15" fill="rgb(233,99,24)" fg:x="4753672761" fg:w="14163465"/><text x="60.5633%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (7,142,522 samples, 0.09%)</title><rect x="60.4024%" y="101" width="0.0906%" height="15" fill="rgb(234,209,42)" fg:x="4760693704" fg:w="7142522"/><text x="60.6524%" y="111.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7,142,329 samples, 0.09%)</title><rect x="60.4930%" y="133" width="0.0906%" height="15" fill="rgb(227,7,12)" fg:x="4767836226" fg:w="7142329"/><text x="60.7430%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,142,329 samples, 0.09%)</title><rect x="60.4930%" y="117" width="0.0906%" height="15" fill="rgb(245,203,43)" fg:x="4767836226" fg:w="7142329"/><text x="60.7430%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,142,329 samples, 0.09%)</title><rect x="60.4930%" y="101" width="0.0906%" height="15" fill="rgb(238,205,33)" fg:x="4767836226" fg:w="7142329"/><text x="60.7430%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (103,516,760 samples, 1.31%)</title><rect x="59.6830%" y="149" width="1.3134%" height="15" fill="rgb(231,56,7)" fg:x="4703992888" fg:w="103516760"/><text x="59.9330%" y="159.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (32,531,093 samples, 0.41%)</title><rect x="60.5836%" y="133" width="0.4127%" height="15" fill="rgb(244,186,29)" fg:x="4774978555" fg:w="32531093"/><text x="60.8336%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (21,252,922 samples, 0.27%)</title><rect x="62.2066%" y="133" width="0.2697%" height="15" fill="rgb(234,111,31)" fg:x="4902894137" fg:w="21252922"/><text x="62.4566%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (21,252,922 samples, 0.27%)</title><rect x="62.2066%" y="117" width="0.2697%" height="15" fill="rgb(241,149,10)" fg:x="4902894137" fg:w="21252922"/><text x="62.4566%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,281,084,232 samples, 28.94%)</title><rect x="33.8454%" y="197" width="28.9418%" height="15" fill="rgb(249,206,44)" fg:x="2667567776" fg:w="2281084232"/><text x="34.0954%" y="207.50">hashbrown::raw::RawTableInner::resize_inner</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (343,451,110 samples, 4.36%)</title><rect x="58.4295%" y="181" width="4.3576%" height="15" fill="rgb(251,153,30)" fg:x="4605200898" fg:w="343451110"/><text x="58.6795%" y="191.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (343,451,110 samples, 4.36%)</title><rect x="58.4295%" y="165" width="4.3576%" height="15" fill="rgb(239,152,38)" fg:x="4605200898" fg:w="343451110"/><text x="58.6795%" y="175.50">hashb..</text></g><g><title>hashbrown::raw::capacity_to_buckets (141,142,360 samples, 1.79%)</title><rect x="60.9964%" y="149" width="1.7908%" height="15" fill="rgb(249,139,47)" fg:x="4807509648" fg:w="141142360"/><text x="61.2464%" y="159.50">h..</text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (24,504,949 samples, 0.31%)</title><rect x="62.4762%" y="133" width="0.3109%" height="15" fill="rgb(244,64,35)" fg:x="4924147059" fg:w="24504949"/><text x="62.7262%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (17,481,491 samples, 0.22%)</title><rect x="62.5654%" y="117" width="0.2218%" height="15" fill="rgb(216,46,15)" fg:x="4931170517" fg:w="17481491"/><text x="62.8154%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,375,582,599 samples, 30.14%)</title><rect x="33.2340%" y="213" width="30.1407%" height="15" fill="rgb(250,74,19)" fg:x="2619380901" fg:w="2375582599"/><text x="33.4840%" y="223.50">hashbrown::raw::RawTableInner::reserve_rehash_inn..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (46,311,492 samples, 0.59%)</title><rect x="62.7872%" y="197" width="0.5876%" height="15" fill="rgb(249,42,33)" fg:x="4948652008" fg:w="46311492"/><text x="63.0372%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3,399,822,241 samples, 43.14%)</title><rect x="30.5203%" y="245" width="43.1360%" height="15" fill="rgb(242,149,17)" fg:x="2405499026" fg:w="3399822241"/><text x="30.7703%" y="255.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,185,940,366 samples, 40.42%)</title><rect x="33.2340%" y="229" width="40.4223%" height="15" fill="rgb(244,29,21)" fg:x="2619380901" fg:w="3185940366"/><text x="33.4840%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash</text></g><g><title>malloc (810,357,767 samples, 10.28%)</title><rect x="63.3747%" y="213" width="10.2816%" height="15" fill="rgb(220,130,37)" fg:x="4994963500" fg:w="810357767"/><text x="63.6247%" y="223.50">malloc</text></g><g><title>[libc.so.6] (577,191,437 samples, 7.32%)</title><rect x="66.3331%" y="197" width="7.3232%" height="15" fill="rgb(211,67,2)" fg:x="5228129830" fg:w="577191437"/><text x="66.5831%" y="207.50">[libc.so.6]</text></g><g><title>[libc.so.6] (14,037,808 samples, 0.18%)</title><rect x="73.4782%" y="181" width="0.1781%" height="15" fill="rgb(235,68,52)" fg:x="5791283459" fg:w="14037808"/><text x="73.7282%" y="191.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (63,986,132 samples, 0.81%)</title><rect x="73.9254%" y="229" width="0.8118%" height="15" fill="rgb(246,142,3)" fg:x="5826530568" fg:w="63986132"/><text x="74.1754%" y="239.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (63,986,132 samples, 0.81%)</title><rect x="73.9254%" y="213" width="0.8118%" height="15" fill="rgb(241,25,7)" fg:x="5826530568" fg:w="63986132"/><text x="74.1754%" y="223.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (53,344,647 samples, 0.68%)</title><rect x="74.0605%" y="197" width="0.6768%" height="15" fill="rgb(242,119,39)" fg:x="5837172053" fg:w="53344647"/><text x="74.3105%" y="207.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (53,344,647 samples, 0.68%)</title><rect x="74.0605%" y="181" width="0.6768%" height="15" fill="rgb(241,98,45)" fg:x="5837172053" fg:w="53344647"/><text x="74.3105%" y="191.50"></text></g><g><title>core::intrinsics::likely (3,552,100 samples, 0.05%)</title><rect x="74.7373%" y="229" width="0.0451%" height="15" fill="rgb(254,28,30)" fg:x="5890516700" fg:w="3552100"/><text x="74.9873%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (64,127,997 samples, 0.81%)</title><rect x="74.7824%" y="229" width="0.8136%" height="15" fill="rgb(241,142,54)" fg:x="5894068800" fg:w="64127997"/><text x="75.0324%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (64,127,997 samples, 0.81%)</title><rect x="74.7824%" y="213" width="0.8136%" height="15" fill="rgb(222,85,15)" fg:x="5894068800" fg:w="64127997"/><text x="75.0324%" y="223.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (304,967,481 samples, 3.87%)</title><rect x="75.5960%" y="229" width="3.8693%" height="15" fill="rgb(210,85,47)" fg:x="5958196797" fg:w="304967481"/><text x="75.8460%" y="239.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (304,967,481 samples, 3.87%)</title><rect x="75.5960%" y="213" width="3.8693%" height="15" fill="rgb(224,206,25)" fg:x="5958196797" fg:w="304967481"/><text x="75.8460%" y="223.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (304,967,481 samples, 3.87%)</title><rect x="75.5960%" y="197" width="3.8693%" height="15" fill="rgb(243,201,19)" fg:x="5958196797" fg:w="304967481"/><text x="75.8460%" y="207.50">core..</text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (21,191,340 samples, 0.27%)</title><rect x="79.4653%" y="229" width="0.2689%" height="15" fill="rgb(236,59,4)" fg:x="6263164278" fg:w="21191340"/><text x="79.7153%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (21,191,340 samples, 0.27%)</title><rect x="79.4653%" y="213" width="0.2689%" height="15" fill="rgb(254,179,45)" fg:x="6263164278" fg:w="21191340"/><text x="79.7153%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21,191,340 samples, 0.27%)</title><rect x="79.4653%" y="197" width="0.2689%" height="15" fill="rgb(226,14,10)" fg:x="6263164278" fg:w="21191340"/><text x="79.7153%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (255,567,345 samples, 3.24%)</title><rect x="79.7342%" y="229" width="3.2426%" height="15" fill="rgb(244,27,41)" fg:x="6284355618" fg:w="255567345"/><text x="79.9842%" y="239.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (255,567,345 samples, 3.24%)</title><rect x="79.7342%" y="213" width="3.2426%" height="15" fill="rgb(235,35,32)" fg:x="6284355618" fg:w="255567345"/><text x="79.9842%" y="223.50">cor..</text></g><g><title>hashbrown::control::tag::Tag::full (130,969,896 samples, 1.66%)</title><rect x="82.9768%" y="229" width="1.6617%" height="15" fill="rgb(218,68,31)" fg:x="6539922963" fg:w="130969896"/><text x="83.2268%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (3,524,639 samples, 0.04%)</title><rect x="84.6385%" y="229" width="0.0447%" height="15" fill="rgb(207,120,37)" fg:x="6670892859" fg:w="3524639"/><text x="84.8885%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3,524,639 samples, 0.04%)</title><rect x="84.6385%" y="213" width="0.0447%" height="15" fill="rgb(227,98,0)" fg:x="6670892859" fg:w="3524639"/><text x="84.8885%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3,524,639 samples, 0.04%)</title><rect x="84.6385%" y="197" width="0.0447%" height="15" fill="rgb(207,7,3)" fg:x="6670892859" fg:w="3524639"/><text x="84.8885%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,524,639 samples, 0.04%)</title><rect x="84.6385%" y="181" width="0.0447%" height="15" fill="rgb(206,98,19)" fg:x="6670892859" fg:w="3524639"/><text x="84.8885%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (3,524,639 samples, 0.04%)</title><rect x="84.6385%" y="165" width="0.0447%" height="15" fill="rgb(217,5,26)" fg:x="6670892859" fg:w="3524639"/><text x="84.8885%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (45,951,124 samples, 0.58%)</title><rect x="84.6832%" y="213" width="0.5830%" height="15" fill="rgb(235,190,38)" fg:x="6674417498" fg:w="45951124"/><text x="84.9332%" y="223.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (81,613,671 samples, 1.04%)</title><rect x="85.2662%" y="213" width="1.0355%" height="15" fill="rgb(247,86,24)" fg:x="6720368622" fg:w="81613671"/><text x="85.5162%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (138,157,165 samples, 1.75%)</title><rect x="84.6832%" y="229" width="1.7529%" height="15" fill="rgb(205,101,16)" fg:x="6674417498" fg:w="138157165"/><text x="84.9332%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (10,592,370 samples, 0.13%)</title><rect x="86.3017%" y="213" width="0.1344%" height="15" fill="rgb(246,168,33)" fg:x="6801982293" fg:w="10592370"/><text x="86.5517%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10,592,370 samples, 0.13%)</title><rect x="86.3017%" y="197" width="0.1344%" height="15" fill="rgb(231,114,1)" fg:x="6801982293" fg:w="10592370"/><text x="86.5517%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (42,444,827 samples, 0.54%)</title><rect x="86.4361%" y="213" width="0.5385%" height="15" fill="rgb(207,184,53)" fg:x="6812574663" fg:w="42444827"/><text x="86.6861%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (42,444,827 samples, 0.54%)</title><rect x="86.4361%" y="197" width="0.5385%" height="15" fill="rgb(224,95,51)" fg:x="6812574663" fg:w="42444827"/><text x="86.6861%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (6,975,323 samples, 0.09%)</title><rect x="86.9746%" y="213" width="0.0885%" height="15" fill="rgb(212,188,45)" fg:x="6855019490" fg:w="6975323"/><text x="87.2246%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,975,323 samples, 0.09%)</title><rect x="86.9746%" y="197" width="0.0885%" height="15" fill="rgb(223,154,38)" fg:x="6855019490" fg:w="6975323"/><text x="87.2246%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (4,761,496,386 samples, 60.41%)</title><rect x="30.0172%" y="277" width="60.4126%" height="15" fill="rgb(251,22,52)" fg:x="2365846576" fg:w="4761496386"/><text x="30.2672%" y="287.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4,761,496,386 samples, 60.41%)</title><rect x="30.0172%" y="261" width="60.4126%" height="15" fill="rgb(229,209,22)" fg:x="2365846576" fg:w="4761496386"/><text x="30.2672%" y="271.50">hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,322,021,695 samples, 16.77%)</title><rect x="73.6563%" y="245" width="16.7735%" height="15" fill="rgb(234,138,34)" fg:x="5805321267" fg:w="1322021695"/><text x="73.9063%" y="255.50">hashbrown::raw::RawTableIn..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (314,768,299 samples, 3.99%)</title><rect x="86.4361%" y="229" width="3.9937%" height="15" fill="rgb(212,95,11)" fg:x="6812574663" fg:w="314768299"/><text x="86.6861%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (265,348,149 samples, 3.37%)</title><rect x="87.0631%" y="213" width="3.3667%" height="15" fill="rgb(240,179,47)" fg:x="6861994813" fg:w="265348149"/><text x="87.3131%" y="223.50">has..</text></g><g><title>hashbrown::control::tag::Tag::is_full (53,076,663 samples, 0.67%)</title><rect x="89.7564%" y="197" width="0.6734%" height="15" fill="rgb(240,163,11)" fg:x="7074266299" fg:w="53076663"/><text x="90.0064%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3,482,688 samples, 0.04%)</title><rect x="90.4747%" y="245" width="0.0442%" height="15" fill="rgb(236,37,12)" fg:x="7130881902" fg:w="3482688"/><text x="90.7247%" y="255.50"></text></g><g><title>core::ptr::write (3,482,688 samples, 0.04%)</title><rect x="90.4747%" y="229" width="0.0442%" height="15" fill="rgb(232,164,16)" fg:x="7130881902" fg:w="3482688"/><text x="90.7247%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7,016,380 samples, 0.09%)</title><rect x="90.4747%" y="261" width="0.0890%" height="15" fill="rgb(244,205,15)" fg:x="7130881902" fg:w="7016380"/><text x="90.7247%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3,533,692 samples, 0.04%)</title><rect x="90.5189%" y="245" width="0.0448%" height="15" fill="rgb(223,117,47)" fg:x="7134364590" fg:w="3533692"/><text x="90.7689%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,533,692 samples, 0.04%)</title><rect x="90.5189%" y="229" width="0.0448%" height="15" fill="rgb(244,107,35)" fg:x="7134364590" fg:w="3533692"/><text x="90.7689%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (46,189,570 samples, 0.59%)</title><rect x="90.5637%" y="261" width="0.5860%" height="15" fill="rgb(205,140,8)" fg:x="7137898282" fg:w="46189570"/><text x="90.8137%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (46,189,570 samples, 0.59%)</title><rect x="90.5637%" y="245" width="0.5860%" height="15" fill="rgb(228,84,46)" fg:x="7137898282" fg:w="46189570"/><text x="90.8137%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (46,189,570 samples, 0.59%)</title><rect x="90.5637%" y="229" width="0.5860%" height="15" fill="rgb(254,188,9)" fg:x="7137898282" fg:w="46189570"/><text x="90.8137%" y="239.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (46,285,920 samples, 0.59%)</title><rect x="93.4487%" y="245" width="0.5873%" height="15" fill="rgb(206,112,54)" fg:x="7365277727" fg:w="46285920"/><text x="93.6987%" y="255.50"></text></g><g><title>hashbrown::control::tag::Tag::special_is_empty (14,153,347 samples, 0.18%)</title><rect x="94.0359%" y="245" width="0.1796%" height="15" fill="rgb(216,84,49)" fg:x="7411563647" fg:w="14153347"/><text x="94.2859%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,644,561,246 samples, 71.62%)</title><rect x="23.6714%" y="389" width="71.6167%" height="15" fill="rgb(214,194,35)" fg:x="1865690278" fg:w="5644561246"/><text x="23.9214%" y="399.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (5,644,561,246 samples, 71.62%)</title><rect x="23.6714%" y="373" width="71.6167%" height="15" fill="rgb(249,28,3)" fg:x="1865690278" fg:w="5644561246"/><text x="23.9214%" y="383.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,520,472,055 samples, 70.04%)</title><rect x="25.2458%" y="357" width="70.0423%" height="15" fill="rgb(222,56,52)" fg:x="1989779469" fg:w="5520472055"/><text x="25.4958%" y="367.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>aoc2024::day23::part2_brute_force::_{{closure}} (5,520,472,055 samples, 70.04%)</title><rect x="25.2458%" y="341" width="70.0423%" height="15" fill="rgb(245,217,50)" fg:x="1989779469" fg:w="5520472055"/><text x="25.4958%" y="351.50">aoc2024::day23::part2_brute_force::_{{closure}}</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (5,183,589,920 samples, 65.77%)</title><rect x="29.5201%" y="325" width="65.7680%" height="15" fill="rgb(213,201,24)" fg:x="2326661604" fg:w="5183589920"/><text x="29.7701%" y="335.50">std::collections::hash::set::HashSet&lt;T,S&gt;::insert</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5,183,589,920 samples, 65.77%)</title><rect x="29.5201%" y="309" width="65.7680%" height="15" fill="rgb(248,116,28)" fg:x="2326661604" fg:w="5183589920"/><text x="29.7701%" y="319.50">hashbrown::set::HashSet&lt;T,S,A&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,183,589,920 samples, 65.77%)</title><rect x="29.5201%" y="293" width="65.7680%" height="15" fill="rgb(219,72,43)" fg:x="2326661604" fg:w="5183589920"/><text x="29.7701%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (382,908,562 samples, 4.86%)</title><rect x="90.4298%" y="277" width="4.8582%" height="15" fill="rgb(209,138,14)" fg:x="7127342962" fg:w="382908562"/><text x="90.6798%" y="287.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (326,163,672 samples, 4.14%)</title><rect x="91.1498%" y="261" width="4.1383%" height="15" fill="rgb(222,18,33)" fg:x="7184087852" fg:w="326163672"/><text x="91.3998%" y="271.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (84,534,530 samples, 1.07%)</title><rect x="94.2155%" y="245" width="1.0726%" height="15" fill="rgb(213,199,7)" fg:x="7425716994" fg:w="84534530"/><text x="94.4655%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (84,534,530 samples, 1.07%)</title><rect x="94.2155%" y="229" width="1.0726%" height="15" fill="rgb(250,110,10)" fg:x="7425716994" fg:w="84534530"/><text x="94.4655%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (14,175,889 samples, 0.18%)</title><rect x="95.1082%" y="213" width="0.1799%" height="15" fill="rgb(248,123,6)" fg:x="7496075635" fg:w="14175889"/><text x="95.3582%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="389" width="3.2653%" height="15" fill="rgb(206,91,31)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="399.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="373" width="3.2653%" height="15" fill="rgb(211,154,13)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="383.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="357" width="3.2653%" height="15" fill="rgb(225,148,7)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="367.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="341" width="3.2653%" height="15" fill="rgb(220,160,43)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="351.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="325" width="3.2653%" height="15" fill="rgb(213,52,39)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="335.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="309" width="3.2653%" height="15" fill="rgb(243,137,7)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="319.50">all..</text></g><g><title>__rdl_dealloc (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="293" width="3.2653%" height="15" fill="rgb(230,79,13)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="303.50">__r..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="277" width="3.2653%" height="15" fill="rgb(247,105,23)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="287.50">std..</text></g><g><title>cfree (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="261" width="3.2653%" height="15" fill="rgb(223,179,41)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="271.50">cfr..</text></g><g><title>[libc.so.6] (257,358,010 samples, 3.27%)</title><rect x="95.2880%" y="245" width="3.2653%" height="15" fill="rgb(218,9,34)" fg:x="7510251524" fg:w="257358010"/><text x="95.5380%" y="255.50">[li..</text></g><g><title>[libc.so.6] (250,284,605 samples, 3.18%)</title><rect x="95.3778%" y="229" width="3.1755%" height="15" fill="rgb(222,106,8)" fg:x="7517324929" fg:w="250284605"/><text x="95.6278%" y="239.50">[li..</text></g><g><title>[libc.so.6] (31,646,967 samples, 0.40%)</title><rect x="98.1518%" y="213" width="0.4015%" height="15" fill="rgb(211,220,0)" fg:x="7735962567" fg:w="31646967"/><text x="98.4018%" y="223.50"></text></g><g><title>core::fmt::Write::write_fmt (3,545,471 samples, 0.04%)</title><rect x="98.5533%" y="373" width="0.0450%" height="15" fill="rgb(229,52,16)" fg:x="7767609534" fg:w="3545471"/><text x="98.8033%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,545,471 samples, 0.04%)</title><rect x="98.5533%" y="357" width="0.0450%" height="15" fill="rgb(212,155,18)" fg:x="7767609534" fg:w="3545471"/><text x="98.8033%" y="367.50"></text></g><g><title>core::fmt::write (3,545,471 samples, 0.04%)</title><rect x="98.5533%" y="341" width="0.0450%" height="15" fill="rgb(242,21,14)" fg:x="7767609534" fg:w="3545471"/><text x="98.8033%" y="351.50"></text></g><g><title>core::fmt::Formatter::new (3,545,471 samples, 0.04%)</title><rect x="98.5533%" y="325" width="0.0450%" height="15" fill="rgb(222,19,48)" fg:x="7767609534" fg:w="3545471"/><text x="98.8033%" y="335.50"></text></g><g><title>itertools::Itertools::join (6,977,878 samples, 0.09%)</title><rect x="98.5533%" y="389" width="0.0885%" height="15" fill="rgb(232,45,27)" fg:x="7767609534" fg:w="6977878"/><text x="98.8033%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="373" width="0.0435%" height="15" fill="rgb(249,103,42)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="357" width="0.0435%" height="15" fill="rgb(246,81,33)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_fold (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="341" width="0.0435%" height="15" fill="rgb(252,33,42)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="351.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="325" width="0.0435%" height="15" fill="rgb(209,212,41)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="309" width="0.0435%" height="15" fill="rgb(207,154,6)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="293" width="0.0435%" height="15" fill="rgb(223,64,47)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="277" width="0.0435%" height="15" fill="rgb(211,161,38)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="287.50"></text></g><g><title>aoc2024::day23::part2_brute_force::_{{closure}} (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="261" width="0.0435%" height="15" fill="rgb(219,138,40)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="245" width="0.0435%" height="15" fill="rgb(241,228,46)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="229" width="0.0435%" height="15" fill="rgb(223,209,38)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="213" width="0.0435%" height="15" fill="rgb(236,164,45)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="197" width="0.0435%" height="15" fill="rgb(231,15,5)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="181" width="0.0435%" height="15" fill="rgb(252,35,15)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="165" width="0.0435%" height="15" fill="rgb(248,181,18)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="149" width="0.0435%" height="15" fill="rgb(233,39,42)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,432,407 samples, 0.04%)</title><rect x="98.5983%" y="133" width="0.0435%" height="15" fill="rgb(238,110,33)" fg:x="7771155005" fg:w="3432407"/><text x="98.8483%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="373" width="0.3558%" height="15" fill="rgb(233,195,10)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="357" width="0.3558%" height="15" fill="rgb(254,105,3)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="341" width="0.3558%" height="15" fill="rgb(221,225,9)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="325" width="0.3558%" height="15" fill="rgb(224,227,45)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="309" width="0.3558%" height="15" fill="rgb(229,198,43)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="293" width="0.3558%" height="15" fill="rgb(206,209,35)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="277" width="0.3558%" height="15" fill="rgb(245,195,53)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="261" width="0.3558%" height="15" fill="rgb(240,92,26)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="245" width="0.3558%" height="15" fill="rgb(207,40,23)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="229" width="0.3558%" height="15" fill="rgb(223,111,35)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="239.50"></text></g><g><title>alloc::alloc::alloc (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="213" width="0.3558%" height="15" fill="rgb(229,147,28)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="223.50"></text></g><g><title>__rdl_alloc (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="197" width="0.3558%" height="15" fill="rgb(211,29,28)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="181" width="0.3558%" height="15" fill="rgb(228,72,33)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="191.50"></text></g><g><title>malloc (28,046,555 samples, 0.36%)</title><rect x="98.6869%" y="165" width="0.3558%" height="15" fill="rgb(205,214,31)" fg:x="7778133296" fg:w="28046555"/><text x="98.9369%" y="175.50"></text></g><g><title>aoc2024::day23::part2_brute_force (7,433,925,296 samples, 94.32%)</title><rect x="4.7680%" y="405" width="94.3196%" height="15" fill="rgb(224,111,15)" fg:x="375796995" fg:w="7433925296"/><text x="5.0180%" y="415.50">aoc2024::day23::part2_brute_force</text></g><g><title>itertools::Itertools::sorted (35,134,879 samples, 0.45%)</title><rect x="98.6419%" y="389" width="0.4458%" height="15" fill="rgb(253,21,26)" fg:x="7774587412" fg:w="35134879"/><text x="98.8919%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (3,542,440 samples, 0.04%)</title><rect x="99.0427%" y="373" width="0.0449%" height="15" fill="rgb(245,139,43)" fg:x="7806179851" fg:w="3542440"/><text x="99.2927%" y="383.50"></text></g><g><title>alloc::slice::stable_sort (3,542,440 samples, 0.04%)</title><rect x="99.0427%" y="357" width="0.0449%" height="15" fill="rgb(252,170,7)" fg:x="7806179851" fg:w="3542440"/><text x="99.2927%" y="367.50"></text></g><g><title>core::slice::sort::stable::sort (3,542,440 samples, 0.04%)</title><rect x="99.0427%" y="341" width="0.0449%" height="15" fill="rgb(231,118,14)" fg:x="7806179851" fg:w="3542440"/><text x="99.2927%" y="351.50"></text></g><g><title>core::slice::sort::shared::smallsort::insertion_sort_shift_left (3,542,440 samples, 0.04%)</title><rect x="99.0427%" y="325" width="0.0449%" height="15" fill="rgb(238,83,0)" fg:x="7806179851" fg:w="3542440"/><text x="99.2927%" y="335.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (3,542,440 samples, 0.04%)</title><rect x="99.0427%" y="309" width="0.0449%" height="15" fill="rgb(221,39,39)" fg:x="7806179851" fg:w="3542440"/><text x="99.2927%" y="319.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,517,466 samples, 0.04%)</title><rect x="99.0876%" y="309" width="0.0446%" height="15" fill="rgb(222,119,46)" fg:x="7809722291" fg:w="3517466"/><text x="99.3376%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,517,466 samples, 0.04%)</title><rect x="99.0876%" y="293" width="0.0446%" height="15" fill="rgb(222,165,49)" fg:x="7809722291" fg:w="3517466"/><text x="99.3376%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3,517,466 samples, 0.04%)</title><rect x="99.0876%" y="277" width="0.0446%" height="15" fill="rgb(219,113,52)" fg:x="7809722291" fg:w="3517466"/><text x="99.3376%" y="287.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3,517,466 samples, 0.04%)</title><rect x="99.0876%" y="261" width="0.0446%" height="15" fill="rgb(214,7,15)" fg:x="7809722291" fg:w="3517466"/><text x="99.3376%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3,517,466 samples, 0.04%)</title><rect x="99.0876%" y="245" width="0.0446%" height="15" fill="rgb(235,32,4)" fg:x="7809722291" fg:w="3517466"/><text x="99.3376%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (10,422,386 samples, 0.13%)</title><rect x="99.0876%" y="341" width="0.1322%" height="15" fill="rgb(238,90,54)" fg:x="7809722291" fg:w="10422386"/><text x="99.3376%" y="351.50"></text></g><g><title>core::fmt::write (10,422,386 samples, 0.13%)</title><rect x="99.0876%" y="325" width="0.1322%" height="15" fill="rgb(213,208,19)" fg:x="7809722291" fg:w="10422386"/><text x="99.3376%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="309" width="0.0876%" height="15" fill="rgb(233,156,4)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="319.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="293" width="0.0876%" height="15" fill="rgb(207,194,5)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="277" width="0.0876%" height="15" fill="rgb(206,111,30)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="287.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="261" width="0.0876%" height="15" fill="rgb(243,70,54)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="271.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="245" width="0.0876%" height="15" fill="rgb(242,28,8)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="255.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="229" width="0.0876%" height="15" fill="rgb(219,106,18)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="239.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="213" width="0.0876%" height="15" fill="rgb(244,222,10)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="197" width="0.0876%" height="15" fill="rgb(236,179,52)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="207.50"></text></g><g><title>[libc.so.6] (6,904,920 samples, 0.09%)</title><rect x="99.1323%" y="181" width="0.0876%" height="15" fill="rgb(213,23,39)" fg:x="7813239757" fg:w="6904920"/><text x="99.3823%" y="191.50"></text></g><g><title>aoc2024::main (7,447,879,565 samples, 94.50%)</title><rect x="4.7680%" y="421" width="94.4967%" height="15" fill="rgb(238,48,10)" fg:x="375796995" fg:w="7447879565"/><text x="5.0180%" y="431.50">aoc2024::main</text></g><g><title>std::io::stdio::_print (13,954,269 samples, 0.18%)</title><rect x="99.0876%" y="405" width="0.1770%" height="15" fill="rgb(251,196,23)" fg:x="7809722291" fg:w="13954269"/><text x="99.3376%" y="415.50"></text></g><g><title>std::io::stdio::print_to (13,954,269 samples, 0.18%)</title><rect x="99.0876%" y="389" width="0.1770%" height="15" fill="rgb(250,152,24)" fg:x="7809722291" fg:w="13954269"/><text x="99.3376%" y="399.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,954,269 samples, 0.18%)</title><rect x="99.0876%" y="373" width="0.1770%" height="15" fill="rgb(209,150,17)" fg:x="7809722291" fg:w="13954269"/><text x="99.3376%" y="383.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13,954,269 samples, 0.18%)</title><rect x="99.0876%" y="357" width="0.1770%" height="15" fill="rgb(234,202,34)" fg:x="7809722291" fg:w="13954269"/><text x="99.3376%" y="367.50"></text></g><g><title>std::io::stdio::Stdout::lock (3,531,883 samples, 0.04%)</title><rect x="99.2199%" y="341" width="0.0448%" height="15" fill="rgb(253,148,53)" fg:x="7820144677" fg:w="3531883"/><text x="99.4699%" y="351.50"></text></g><g><title>std::sync::reentrant_lock::ReentrantLock&lt;T&gt;::lock (3,531,883 samples, 0.04%)</title><rect x="99.2199%" y="325" width="0.0448%" height="15" fill="rgb(218,129,16)" fg:x="7820144677" fg:w="3531883"/><text x="99.4699%" y="335.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (3,531,883 samples, 0.04%)</title><rect x="99.2199%" y="309" width="0.0448%" height="15" fill="rgb(216,85,19)" fg:x="7820144677" fg:w="3531883"/><text x="99.4699%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3,531,883 samples, 0.04%)</title><rect x="99.2199%" y="293" width="0.0448%" height="15" fill="rgb(235,228,7)" fg:x="7820144677" fg:w="3531883"/><text x="99.4699%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3,531,883 samples, 0.04%)</title><rect x="99.2199%" y="277" width="0.0448%" height="15" fill="rgb(245,175,0)" fg:x="7820144677" fg:w="3531883"/><text x="99.4699%" y="287.50"></text></g><g><title>cfree (29,586,180 samples, 0.38%)</title><rect x="99.2647%" y="421" width="0.3754%" height="15" fill="rgb(208,168,36)" fg:x="7823676560" fg:w="29586180"/><text x="99.5147%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14,128,474 samples, 0.18%)</title><rect x="99.6401%" y="421" width="0.1793%" height="15" fill="rgb(246,171,24)" fg:x="7853262740" fg:w="14128474"/><text x="99.8901%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (7,030,729 samples, 0.09%)</title><rect x="99.7301%" y="405" width="0.0892%" height="15" fill="rgb(215,142,24)" fg:x="7860360485" fg:w="7030729"/><text x="99.9801%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="389" width="0.0450%" height="15" fill="rgb(250,187,7)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="373" width="0.0450%" height="15" fill="rgb(228,66,33)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="383.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="357" width="0.0450%" height="15" fill="rgb(234,215,21)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="341" width="0.0450%" height="15" fill="rgb(222,191,20)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="325" width="0.0450%" height="15" fill="rgb(245,79,54)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="309" width="0.0450%" height="15" fill="rgb(240,10,37)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="293" width="0.0450%" height="15" fill="rgb(214,192,32)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="303.50"></text></g><g><title>__rdl_dealloc (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="277" width="0.0450%" height="15" fill="rgb(209,36,54)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,545,941 samples, 0.04%)</title><rect x="99.7743%" y="261" width="0.0450%" height="15" fill="rgb(220,10,11)" fg:x="7863845273" fg:w="3545941"/><text x="100.0243%" y="271.50"></text></g><g><title>all (7,881,630,767 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(221,106,17)" fg:x="0" fg:w="7881630767"/><text x="0.2500%" y="463.50"></text></g><g><title>aoc2024 (7,881,630,767 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(251,142,44)" fg:x="0" fg:w="7881630767"/><text x="0.2500%" y="447.50">aoc2024</text></g><g><title>malloc (14,239,553 samples, 0.18%)</title><rect x="99.8193%" y="421" width="0.1807%" height="15" fill="rgb(238,13,15)" fg:x="7867391214" fg:w="14239553"/><text x="100.0693%" y="431.50"></text></g></svg></svg>