<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="4900873557"><g><title>[[stack]] (3,594,136 samples, 0.07%)</title><rect x="0.0000%" y="597" width="0.0733%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3594136"/><text x="0.2500%" y="607.50"></text></g><g><title>malloc (3,594,136 samples, 0.07%)</title><rect x="0.0000%" y="581" width="0.0733%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3594136"/><text x="0.2500%" y="591.50"></text></g><g><title>[libc.so.6] (89,986,688 samples, 1.84%)</title><rect x="0.0733%" y="581" width="1.8361%" height="15" fill="rgb(221,193,54)" fg:x="3594136" fg:w="89986688"/><text x="0.3233%" y="591.50">[..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11,482,212 samples, 0.23%)</title><rect x="1.9095%" y="581" width="0.2343%" height="15" fill="rgb(248,212,6)" fg:x="93580824" fg:w="11482212"/><text x="2.1595%" y="591.50"></text></g><g><title>[anon] (147,568,311 samples, 3.01%)</title><rect x="0.0733%" y="597" width="3.0111%" height="15" fill="rgb(208,68,35)" fg:x="3594136" fg:w="147568311"/><text x="0.3233%" y="607.50">[an..</text></g><g><title>realloc (46,099,411 samples, 0.94%)</title><rect x="2.1438%" y="581" width="0.9406%" height="15" fill="rgb(232,128,0)" fg:x="105063036" fg:w="46099411"/><text x="2.3938%" y="591.50"></text></g><g><title>[aoc2024] (18,347,853 samples, 0.37%)</title><rect x="3.0844%" y="597" width="0.3744%" height="15" fill="rgb(207,160,47)" fg:x="151162447" fg:w="18347853"/><text x="3.3344%" y="607.50"></text></g><g><title>[libc.so.6] (18,347,853 samples, 0.37%)</title><rect x="3.0844%" y="581" width="0.3744%" height="15" fill="rgb(228,23,34)" fg:x="151162447" fg:w="18347853"/><text x="3.3344%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,845,809 samples, 0.08%)</title><rect x="3.4588%" y="597" width="0.0785%" height="15" fill="rgb(218,30,26)" fg:x="169510300" fg:w="3845809"/><text x="3.7088%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="581" width="0.0755%" height="15" fill="rgb(220,122,19)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="565" width="0.0755%" height="15" fill="rgb(250,228,42)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="549" width="0.0755%" height="15" fill="rgb(240,193,28)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="533" width="0.0755%" height="15" fill="rgb(216,20,37)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="517" width="0.0755%" height="15" fill="rgb(206,188,39)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="501" width="0.0755%" height="15" fill="rgb(217,207,13)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,698,173 samples, 0.08%)</title><rect x="3.4618%" y="485" width="0.0755%" height="15" fill="rgb(231,73,38)" fg:x="169657936" fg:w="3698173"/><text x="3.7118%" y="495.50"></text></g><g><title>[libc.so.6] (18,164,390 samples, 0.37%)</title><rect x="3.5372%" y="597" width="0.3706%" height="15" fill="rgb(225,20,46)" fg:x="173356109" fg:w="18164390"/><text x="3.7872%" y="607.50"></text></g><g><title>[libc.so.6] (18,164,390 samples, 0.37%)</title><rect x="3.5372%" y="581" width="0.3706%" height="15" fill="rgb(210,31,41)" fg:x="173356109" fg:w="18164390"/><text x="3.7872%" y="591.50"></text></g><g><title>[libc.so.6] (146,210,476 samples, 2.98%)</title><rect x="3.9079%" y="581" width="2.9834%" height="15" fill="rgb(221,200,47)" fg:x="191520499" fg:w="146210476"/><text x="4.1579%" y="591.50">[li..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (63,778,515 samples, 1.30%)</title><rect x="6.8912%" y="581" width="1.3014%" height="15" fill="rgb(226,26,5)" fg:x="337730975" fg:w="63778515"/><text x="7.1412%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (14,122,614 samples, 0.29%)</title><rect x="7.9044%" y="565" width="0.2882%" height="15" fill="rgb(249,33,26)" fg:x="387386876" fg:w="14122614"/><text x="8.1544%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (14,122,614 samples, 0.29%)</title><rect x="7.9044%" y="549" width="0.2882%" height="15" fill="rgb(235,183,28)" fg:x="387386876" fg:w="14122614"/><text x="8.1544%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (42,620,265 samples, 0.87%)</title><rect x="8.1926%" y="581" width="0.8696%" height="15" fill="rgb(221,5,38)" fg:x="401509490" fg:w="42620265"/><text x="8.4426%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,530,875 samples, 0.07%)</title><rect x="8.9902%" y="565" width="0.0720%" height="15" fill="rgb(247,18,42)" fg:x="440598880" fg:w="3530875"/><text x="9.2402%" y="575.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,530,875 samples, 0.07%)</title><rect x="8.9902%" y="549" width="0.0720%" height="15" fill="rgb(241,131,45)" fg:x="440598880" fg:w="3530875"/><text x="9.2402%" y="559.50"></text></g><g><title>alloc::alloc::realloc (3,530,875 samples, 0.07%)</title><rect x="8.9902%" y="533" width="0.0720%" height="15" fill="rgb(249,31,29)" fg:x="440598880" fg:w="3530875"/><text x="9.2402%" y="543.50"></text></g><g><title>__rdl_realloc (3,530,875 samples, 0.07%)</title><rect x="8.9902%" y="517" width="0.0720%" height="15" fill="rgb(225,111,53)" fg:x="440598880" fg:w="3530875"/><text x="9.2402%" y="527.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,530,875 samples, 0.07%)</title><rect x="8.9902%" y="501" width="0.0720%" height="15" fill="rgb(238,160,17)" fg:x="440598880" fg:w="3530875"/><text x="9.2402%" y="511.50"></text></g><g><title>cfree (29,506,480 samples, 0.60%)</title><rect x="9.0623%" y="581" width="0.6021%" height="15" fill="rgb(214,148,48)" fg:x="444129755" fg:w="29506480"/><text x="9.3123%" y="591.50"></text></g><g><title>malloc (10,454,746 samples, 0.21%)</title><rect x="9.6643%" y="581" width="0.2133%" height="15" fill="rgb(232,36,49)" fg:x="473636235" fg:w="10454746"/><text x="9.9143%" y="591.50"></text></g><g><title>[unknown] (320,967,734 samples, 6.55%)</title><rect x="3.9079%" y="597" width="6.5492%" height="15" fill="rgb(209,103,24)" fg:x="191520499" fg:w="320967734"/><text x="4.1579%" y="607.50">[unknown]</text></g><g><title>realloc (28,397,252 samples, 0.58%)</title><rect x="9.8776%" y="581" width="0.5794%" height="15" fill="rgb(229,88,8)" fg:x="484090981" fg:w="28397252"/><text x="10.1276%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (17,568,346 samples, 0.36%)</title><rect x="10.4571%" y="597" width="0.3585%" height="15" fill="rgb(213,181,19)" fg:x="512488233" fg:w="17568346"/><text x="10.7071%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (17,703,378 samples, 0.36%)</title><rect x="10.8156%" y="597" width="0.3612%" height="15" fill="rgb(254,191,54)" fg:x="530056579" fg:w="17703378"/><text x="11.0656%" y="607.50"></text></g><g><title>[libc.so.6] (73,793,448 samples, 1.51%)</title><rect x="11.2499%" y="565" width="1.5057%" height="15" fill="rgb(241,83,37)" fg:x="551341788" fg:w="73793448"/><text x="11.4999%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,547,263 samples, 0.07%)</title><rect x="14.8548%" y="517" width="0.0724%" height="15" fill="rgb(233,36,39)" fg:x="728014727" fg:w="3547263"/><text x="15.1048%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,547,263 samples, 0.07%)</title><rect x="14.8548%" y="501" width="0.0724%" height="15" fill="rgb(226,3,54)" fg:x="728014727" fg:w="3547263"/><text x="15.1048%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,547,263 samples, 0.07%)</title><rect x="14.8548%" y="485" width="0.0724%" height="15" fill="rgb(245,192,40)" fg:x="728014727" fg:w="3547263"/><text x="15.1048%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10,682,613 samples, 0.22%)</title><rect x="14.9272%" y="517" width="0.2180%" height="15" fill="rgb(238,167,29)" fg:x="731561990" fg:w="10682613"/><text x="15.1772%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10,682,613 samples, 0.22%)</title><rect x="14.9272%" y="501" width="0.2180%" height="15" fill="rgb(232,182,51)" fg:x="731561990" fg:w="10682613"/><text x="15.1772%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10,682,613 samples, 0.22%)</title><rect x="14.9272%" y="485" width="0.2180%" height="15" fill="rgb(231,60,39)" fg:x="731561990" fg:w="10682613"/><text x="15.1772%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,543,827 samples, 0.07%)</title><rect x="15.1451%" y="517" width="0.0723%" height="15" fill="rgb(208,69,12)" fg:x="742244603" fg:w="3543827"/><text x="15.3951%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,543,827 samples, 0.07%)</title><rect x="15.1451%" y="501" width="0.0723%" height="15" fill="rgb(235,93,37)" fg:x="742244603" fg:w="3543827"/><text x="15.3951%" y="511.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::increment_indices (113,504,250 samples, 2.32%)</title><rect x="13.1205%" y="533" width="2.3160%" height="15" fill="rgb(213,116,39)" fg:x="643017831" fg:w="113504250"/><text x="13.3705%" y="543.50">i..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (10,733,651 samples, 0.22%)</title><rect x="15.2175%" y="517" width="0.2190%" height="15" fill="rgb(222,207,29)" fg:x="745788430" fg:w="10733651"/><text x="15.4675%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,733,651 samples, 0.22%)</title><rect x="15.2175%" y="501" width="0.2190%" height="15" fill="rgb(206,96,30)" fg:x="745788430" fg:w="10733651"/><text x="15.4675%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (10,733,651 samples, 0.22%)</title><rect x="15.2175%" y="485" width="0.2190%" height="15" fill="rgb(218,138,4)" fg:x="745788430" fg:w="10733651"/><text x="15.4675%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,582,380 samples, 0.07%)</title><rect x="15.3634%" y="469" width="0.0731%" height="15" fill="rgb(250,191,14)" fg:x="752939701" fg:w="3582380"/><text x="15.6134%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,582,380 samples, 0.07%)</title><rect x="15.3634%" y="453" width="0.0731%" height="15" fill="rgb(239,60,40)" fg:x="752939701" fg:w="3582380"/><text x="15.6134%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (3,582,380 samples, 0.07%)</title><rect x="15.3634%" y="437" width="0.0731%" height="15" fill="rgb(206,27,48)" fg:x="752939701" fg:w="3582380"/><text x="15.6134%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,582,380 samples, 0.07%)</title><rect x="15.3634%" y="421" width="0.0731%" height="15" fill="rgb(225,35,8)" fg:x="752939701" fg:w="3582380"/><text x="15.6134%" y="431.50"></text></g><g><title>aoc2024::day23::brute_force_clique_adj::_{{closure}} (3,582,380 samples, 0.07%)</title><rect x="15.3634%" y="405" width="0.0731%" height="15" fill="rgb(250,213,24)" fg:x="752939701" fg:w="3582380"/><text x="15.6134%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,520,233 samples, 0.07%)</title><rect x="15.4365%" y="341" width="0.0718%" height="15" fill="rgb(247,123,22)" fg:x="756522081" fg:w="3520233"/><text x="15.6865%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,520,233 samples, 0.07%)</title><rect x="15.4365%" y="325" width="0.0718%" height="15" fill="rgb(231,138,38)" fg:x="756522081" fg:w="3520233"/><text x="15.6865%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,665,522 samples, 0.93%)</title><rect x="15.4365%" y="389" width="0.9318%" height="15" fill="rgb(231,145,46)" fg:x="756522081" fg:w="45665522"/><text x="15.6865%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,665,522 samples, 0.93%)</title><rect x="15.4365%" y="373" width="0.9318%" height="15" fill="rgb(251,118,11)" fg:x="756522081" fg:w="45665522"/><text x="15.6865%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (45,665,522 samples, 0.93%)</title><rect x="15.4365%" y="357" width="0.9318%" height="15" fill="rgb(217,147,25)" fg:x="756522081" fg:w="45665522"/><text x="15.6865%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (42,145,289 samples, 0.86%)</title><rect x="15.5083%" y="341" width="0.8600%" height="15" fill="rgb(247,81,37)" fg:x="760042314" fg:w="42145289"/><text x="15.7583%" y="351.50"></text></g><g><title>aoc2024::day23::brute_force_clique_adj::_{{closure}} (42,145,289 samples, 0.86%)</title><rect x="15.5083%" y="325" width="0.8600%" height="15" fill="rgb(209,12,38)" fg:x="760042314" fg:w="42145289"/><text x="15.7583%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,186,714 samples, 1.00%)</title><rect x="15.4365%" y="453" width="1.0036%" height="15" fill="rgb(227,1,9)" fg:x="756522081" fg:w="49186714"/><text x="15.6865%" y="463.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (49,186,714 samples, 1.00%)</title><rect x="15.4365%" y="437" width="1.0036%" height="15" fill="rgb(248,47,43)" fg:x="756522081" fg:w="49186714"/><text x="15.6865%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,186,714 samples, 1.00%)</title><rect x="15.4365%" y="421" width="1.0036%" height="15" fill="rgb(221,10,30)" fg:x="756522081" fg:w="49186714"/><text x="15.6865%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (49,186,714 samples, 1.00%)</title><rect x="15.4365%" y="405" width="1.0036%" height="15" fill="rgb(210,229,1)" fg:x="756522081" fg:w="49186714"/><text x="15.6865%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3,521,192 samples, 0.07%)</title><rect x="16.3683%" y="389" width="0.0718%" height="15" fill="rgb(222,148,37)" fg:x="802187603" fg:w="3521192"/><text x="16.6183%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (3,538,491 samples, 0.07%)</title><rect x="16.7300%" y="373" width="0.0722%" height="15" fill="rgb(234,67,33)" fg:x="819917586" fg:w="3538491"/><text x="16.9800%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="357" width="1.5090%" height="15" fill="rgb(247,98,35)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="341" width="1.5090%" height="15" fill="rgb(247,138,52)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="351.50"></text></g><g><title>alloc::alloc::realloc (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="325" width="1.5090%" height="15" fill="rgb(213,79,30)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="335.50"></text></g><g><title>__rdl_realloc (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="309" width="1.5090%" height="15" fill="rgb(246,177,23)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="293" width="1.5090%" height="15" fill="rgb(230,62,27)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="303.50"></text></g><g><title>realloc (73,954,900 samples, 1.51%)</title><rect x="16.8022%" y="277" width="1.5090%" height="15" fill="rgb(216,154,8)" fg:x="823456077" fg:w="73954900"/><text x="17.0522%" y="287.50"></text></g><g><title>[libc.so.6] (70,352,292 samples, 1.44%)</title><rect x="16.8757%" y="261" width="1.4355%" height="15" fill="rgb(244,35,45)" fg:x="827058685" fg:w="70352292"/><text x="17.1257%" y="271.50"></text></g><g><title>[libc.so.6] (59,699,493 samples, 1.22%)</title><rect x="17.0931%" y="245" width="1.2181%" height="15" fill="rgb(251,115,12)" fg:x="837711484" fg:w="59699493"/><text x="17.3431%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (95,257,650 samples, 1.94%)</title><rect x="16.4401%" y="453" width="1.9437%" height="15" fill="rgb(240,54,50)" fg:x="805708795" fg:w="95257650"/><text x="16.6901%" y="463.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (95,257,650 samples, 1.94%)</title><rect x="16.4401%" y="437" width="1.9437%" height="15" fill="rgb(233,84,52)" fg:x="805708795" fg:w="95257650"/><text x="16.6901%" y="447.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (95,257,650 samples, 1.94%)</title><rect x="16.4401%" y="421" width="1.9437%" height="15" fill="rgb(207,117,47)" fg:x="805708795" fg:w="95257650"/><text x="16.6901%" y="431.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (88,158,077 samples, 1.80%)</title><rect x="16.5850%" y="405" width="1.7988%" height="15" fill="rgb(249,43,39)" fg:x="812808368" fg:w="88158077"/><text x="16.8350%" y="415.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (84,550,923 samples, 1.73%)</title><rect x="16.6586%" y="389" width="1.7252%" height="15" fill="rgb(209,38,44)" fg:x="816415522" fg:w="84550923"/><text x="16.9086%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (77,510,368 samples, 1.58%)</title><rect x="16.8022%" y="373" width="1.5816%" height="15" fill="rgb(236,212,23)" fg:x="823456077" fg:w="77510368"/><text x="17.0522%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,555,468 samples, 0.07%)</title><rect x="18.3112%" y="357" width="0.0725%" height="15" fill="rgb(242,79,21)" fg:x="897410977" fg:w="3555468"/><text x="18.5612%" y="367.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::init (155,011,016 samples, 3.16%)</title><rect x="15.4365%" y="533" width="3.1629%" height="15" fill="rgb(211,96,35)" fg:x="756522081" fg:w="155011016"/><text x="15.6865%" y="543.50">ite..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::prefill (155,011,016 samples, 3.16%)</title><rect x="15.4365%" y="517" width="3.1629%" height="15" fill="rgb(253,215,40)" fg:x="756522081" fg:w="155011016"/><text x="15.6865%" y="527.50">ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (155,011,016 samples, 3.16%)</title><rect x="15.4365%" y="501" width="3.1629%" height="15" fill="rgb(211,81,21)" fg:x="756522081" fg:w="155011016"/><text x="15.6865%" y="511.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (155,011,016 samples, 3.16%)</title><rect x="15.4365%" y="485" width="3.1629%" height="15" fill="rgb(208,190,38)" fg:x="756522081" fg:w="155011016"/><text x="15.6865%" y="495.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (155,011,016 samples, 3.16%)</title><rect x="15.4365%" y="469" width="3.1629%" height="15" fill="rgb(235,213,38)" fg:x="756522081" fg:w="155011016"/><text x="15.6865%" y="479.50">all..</text></g><g><title>core::ptr::write (10,566,652 samples, 0.22%)</title><rect x="18.3838%" y="453" width="0.2156%" height="15" fill="rgb(237,122,38)" fg:x="900966445" fg:w="10566652"/><text x="18.6338%" y="463.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (3,578,749 samples, 0.07%)</title><rect x="19.4470%" y="325" width="0.0730%" height="15" fill="rgb(244,218,35)" fg:x="953070619" fg:w="3578749"/><text x="19.6970%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (34,997,712 samples, 0.71%)</title><rect x="19.4470%" y="357" width="0.7141%" height="15" fill="rgb(240,68,47)" fg:x="953070619" fg:w="34997712"/><text x="19.6970%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (34,997,712 samples, 0.71%)</title><rect x="19.4470%" y="341" width="0.7141%" height="15" fill="rgb(210,16,53)" fg:x="953070619" fg:w="34997712"/><text x="19.6970%" y="351.50"></text></g><g><title>core::ptr::write (31,418,963 samples, 0.64%)</title><rect x="19.5200%" y="325" width="0.6411%" height="15" fill="rgb(235,124,12)" fg:x="956649368" fg:w="31418963"/><text x="19.7700%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17,392,542 samples, 0.35%)</title><rect x="20.1611%" y="341" width="0.3549%" height="15" fill="rgb(224,169,11)" fg:x="988068331" fg:w="17392542"/><text x="20.4111%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17,392,542 samples, 0.35%)</title><rect x="20.1611%" y="325" width="0.3549%" height="15" fill="rgb(250,166,2)" fg:x="988068331" fg:w="17392542"/><text x="20.4111%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17,392,542 samples, 0.35%)</title><rect x="20.1611%" y="309" width="0.3549%" height="15" fill="rgb(242,216,29)" fg:x="988068331" fg:w="17392542"/><text x="20.4111%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (83,617,137 samples, 1.71%)</title><rect x="18.8116%" y="453" width="1.7062%" height="15" fill="rgb(230,116,27)" fg:x="921931845" fg:w="83617137"/><text x="19.0616%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (83,617,137 samples, 1.71%)</title><rect x="18.8116%" y="437" width="1.7062%" height="15" fill="rgb(228,99,48)" fg:x="921931845" fg:w="83617137"/><text x="19.0616%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (83,617,137 samples, 1.71%)</title><rect x="18.8116%" y="421" width="1.7062%" height="15" fill="rgb(253,11,6)" fg:x="921931845" fg:w="83617137"/><text x="19.0616%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (83,617,137 samples, 1.71%)</title><rect x="18.8116%" y="405" width="1.7062%" height="15" fill="rgb(247,143,39)" fg:x="921931845" fg:w="83617137"/><text x="19.0616%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (83,617,137 samples, 1.71%)</title><rect x="18.8116%" y="389" width="1.7062%" height="15" fill="rgb(236,97,10)" fg:x="921931845" fg:w="83617137"/><text x="19.0616%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (52,478,363 samples, 1.07%)</title><rect x="19.4470%" y="373" width="1.0708%" height="15" fill="rgb(233,208,19)" fg:x="953070619" fg:w="52478363"/><text x="19.6970%" y="383.50"></text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at::_{{closure}} (17,480,651 samples, 0.36%)</title><rect x="20.1611%" y="357" width="0.3567%" height="15" fill="rgb(216,164,2)" fg:x="988068331" fg:w="17480651"/><text x="20.4111%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3,531,262 samples, 0.07%)</title><rect x="20.5177%" y="453" width="0.0721%" height="15" fill="rgb(220,129,5)" fg:x="1005548982" fg:w="3531262"/><text x="20.7677%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3,531,262 samples, 0.07%)</title><rect x="20.5177%" y="437" width="0.0721%" height="15" fill="rgb(242,17,10)" fg:x="1005548982" fg:w="3531262"/><text x="20.7677%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (3,531,262 samples, 0.07%)</title><rect x="20.5177%" y="421" width="0.0721%" height="15" fill="rgb(242,107,0)" fg:x="1005548982" fg:w="3531262"/><text x="20.7677%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub_ptr (3,531,262 samples, 0.07%)</title><rect x="20.5177%" y="405" width="0.0721%" height="15" fill="rgb(251,28,31)" fg:x="1005548982" fg:w="3531262"/><text x="20.7677%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (3,531,262 samples, 0.07%)</title><rect x="20.5177%" y="389" width="0.0721%" height="15" fill="rgb(233,223,10)" fg:x="1005548982" fg:w="3531262"/><text x="20.7677%" y="399.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (436,868,087 samples, 8.91%)</title><rect x="13.1205%" y="549" width="8.9141%" height="15" fill="rgb(215,21,27)" fg:x="643017831" fg:w="436868087"/><text x="13.3705%" y="559.50">&lt;itertools::c..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at (168,352,821 samples, 3.44%)</title><rect x="18.5994%" y="533" width="3.4352%" height="15" fill="rgb(232,23,21)" fg:x="911533097" fg:w="168352821"/><text x="18.8494%" y="543.50">ite..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (168,352,821 samples, 3.44%)</title><rect x="18.5994%" y="517" width="3.4352%" height="15" fill="rgb(244,5,23)" fg:x="911533097" fg:w="168352821"/><text x="18.8494%" y="527.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (168,352,821 samples, 3.44%)</title><rect x="18.5994%" y="501" width="3.4352%" height="15" fill="rgb(226,81,46)" fg:x="911533097" fg:w="168352821"/><text x="18.8494%" y="511.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (168,352,821 samples, 3.44%)</title><rect x="18.5994%" y="485" width="3.4352%" height="15" fill="rgb(247,70,30)" fg:x="911533097" fg:w="168352821"/><text x="18.8494%" y="495.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (168,352,821 samples, 3.44%)</title><rect x="18.5994%" y="469" width="3.4352%" height="15" fill="rgb(212,68,19)" fg:x="911533097" fg:w="168352821"/><text x="18.8494%" y="479.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (70,805,674 samples, 1.44%)</title><rect x="20.5898%" y="453" width="1.4448%" height="15" fill="rgb(240,187,13)" fg:x="1009080244" fg:w="70805674"/><text x="20.8398%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (70,805,674 samples, 1.44%)</title><rect x="20.5898%" y="437" width="1.4448%" height="15" fill="rgb(223,113,26)" fg:x="1009080244" fg:w="70805674"/><text x="20.8398%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (70,805,674 samples, 1.44%)</title><rect x="20.5898%" y="421" width="1.4448%" height="15" fill="rgb(206,192,2)" fg:x="1009080244" fg:w="70805674"/><text x="20.8398%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (70,805,674 samples, 1.44%)</title><rect x="20.5898%" y="405" width="1.4448%" height="15" fill="rgb(241,108,4)" fg:x="1009080244" fg:w="70805674"/><text x="20.8398%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (70,805,674 samples, 1.44%)</title><rect x="20.5898%" y="389" width="1.4448%" height="15" fill="rgb(247,173,49)" fg:x="1009080244" fg:w="70805674"/><text x="20.8398%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46,114,685 samples, 0.94%)</title><rect x="21.0936%" y="373" width="0.9409%" height="15" fill="rgb(224,114,35)" fg:x="1033771233" fg:w="46114685"/><text x="21.3436%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46,114,685 samples, 0.94%)</title><rect x="21.0936%" y="357" width="0.9409%" height="15" fill="rgb(245,159,27)" fg:x="1033771233" fg:w="46114685"/><text x="21.3436%" y="367.50"></text></g><g><title>alloc::alloc::alloc (46,114,685 samples, 0.94%)</title><rect x="21.0936%" y="341" width="0.9409%" height="15" fill="rgb(245,172,44)" fg:x="1033771233" fg:w="46114685"/><text x="21.3436%" y="351.50"></text></g><g><title>__rdl_alloc (46,114,685 samples, 0.94%)</title><rect x="21.0936%" y="325" width="0.9409%" height="15" fill="rgb(236,23,11)" fg:x="1033771233" fg:w="46114685"/><text x="21.3436%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46,114,685 samples, 0.94%)</title><rect x="21.0936%" y="309" width="0.9409%" height="15" fill="rgb(205,117,38)" fg:x="1033771233" fg:w="46114685"/><text x="21.3436%" y="319.50"></text></g><g><title>malloc (42,522,389 samples, 0.87%)</title><rect x="21.1669%" y="293" width="0.8676%" height="15" fill="rgb(237,72,25)" fg:x="1037363529" fg:w="42522389"/><text x="21.4169%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (24,897,459 samples, 0.51%)</title><rect x="22.5329%" y="485" width="0.5080%" height="15" fill="rgb(244,70,9)" fg:x="1104307129" fg:w="24897459"/><text x="22.7829%" y="495.50"></text></g><g><title>&lt;itertools::adaptors::TupleCombinations&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,937,311 samples, 0.65%)</title><rect x="22.4617%" y="517" width="0.6517%" height="15" fill="rgb(217,125,39)" fg:x="1100817158" fg:w="31937311"/><text x="22.7117%" y="527.50"></text></g><g><title>&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,937,311 samples, 0.65%)</title><rect x="22.4617%" y="501" width="0.6517%" height="15" fill="rgb(235,36,10)" fg:x="1100817158" fg:w="31937311"/><text x="22.7117%" y="511.50"></text></g><g><title>&lt;itertools::adaptors::Tuple1Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,549,881 samples, 0.07%)</title><rect x="23.0409%" y="485" width="0.0724%" height="15" fill="rgb(251,123,47)" fg:x="1129204588" fg:w="3549881"/><text x="23.2909%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,549,881 samples, 0.07%)</title><rect x="23.0409%" y="469" width="0.0724%" height="15" fill="rgb(221,13,13)" fg:x="1129204588" fg:w="3549881"/><text x="23.2909%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (3,549,881 samples, 0.07%)</title><rect x="23.0409%" y="453" width="0.0724%" height="15" fill="rgb(238,131,9)" fg:x="1129204588" fg:w="3549881"/><text x="23.2909%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3,549,881 samples, 0.07%)</title><rect x="23.0409%" y="437" width="0.0724%" height="15" fill="rgb(211,50,8)" fg:x="1129204588" fg:w="3549881"/><text x="23.2909%" y="447.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="405" width="0.2852%" height="15" fill="rgb(245,182,24)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="415.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="389" width="0.2852%" height="15" fill="rgb(242,14,37)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="399.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="373" width="0.2852%" height="15" fill="rgb(246,228,12)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="383.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="357" width="0.2852%" height="15" fill="rgb(213,55,15)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="367.50"></text></g><g><title>tap::pipe::Pipe::pipe (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="341" width="0.2852%" height="15" fill="rgb(209,9,3)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="351.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset::_{{closure}} (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="325" width="0.2852%" height="15" fill="rgb(230,59,30)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13,977,438 samples, 0.29%)</title><rect x="23.4641%" y="309" width="0.2852%" height="15" fill="rgb(209,121,21)" fg:x="1149943559" fg:w="13977438"/><text x="23.7141%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (122,625,637 samples, 2.50%)</title><rect x="22.0346%" y="549" width="2.5021%" height="15" fill="rgb(220,109,13)" fg:x="1079885918" fg:w="122625637"/><text x="22.2846%" y="559.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (122,625,637 samples, 2.50%)</title><rect x="22.0346%" y="533" width="2.5021%" height="15" fill="rgb(232,18,1)" fg:x="1079885918" fg:w="122625637"/><text x="22.2846%" y="543.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (69,757,086 samples, 1.42%)</title><rect x="23.1133%" y="517" width="1.4234%" height="15" fill="rgb(215,41,42)" fg:x="1132754469" fg:w="69757086"/><text x="23.3633%" y="527.50"></text></g><g><title>aoc2024::day23::brute_force_clique_adj::_{{closure}} (69,757,086 samples, 1.42%)</title><rect x="23.1133%" y="501" width="1.4234%" height="15" fill="rgb(224,123,36)" fg:x="1132754469" fg:w="69757086"/><text x="23.3633%" y="511.50"></text></g><g><title>bitvec::array::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::array::BitArray&lt;A,O&gt;&gt;::index (56,093,385 samples, 1.14%)</title><rect x="23.3921%" y="485" width="1.1446%" height="15" fill="rgb(240,125,3)" fg:x="1146418170" fg:w="56093385"/><text x="23.6421%" y="495.50"></text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (56,093,385 samples, 1.14%)</title><rect x="23.3921%" y="469" width="1.1446%" height="15" fill="rgb(205,98,50)" fg:x="1146418170" fg:w="56093385"/><text x="23.6421%" y="479.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (56,093,385 samples, 1.14%)</title><rect x="23.3921%" y="453" width="1.1446%" height="15" fill="rgb(205,185,37)" fg:x="1146418170" fg:w="56093385"/><text x="23.6421%" y="463.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (56,093,385 samples, 1.14%)</title><rect x="23.3921%" y="437" width="1.1446%" height="15" fill="rgb(238,207,15)" fg:x="1146418170" fg:w="56093385"/><text x="23.6421%" y="447.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (52,567,996 samples, 1.07%)</title><rect x="23.4641%" y="421" width="1.0726%" height="15" fill="rgb(213,199,42)" fg:x="1149943559" fg:w="52567996"/><text x="23.7141%" y="431.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref (38,590,558 samples, 0.79%)</title><rect x="23.7493%" y="405" width="0.7874%" height="15" fill="rgb(235,201,11)" fg:x="1163920997" fg:w="38590558"/><text x="23.9993%" y="415.50"></text></g><g><title>bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr (38,590,558 samples, 0.79%)</title><rect x="23.7493%" y="389" width="0.7874%" height="15" fill="rgb(207,46,11)" fg:x="1163920997" fg:w="38590558"/><text x="23.9993%" y="399.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (38,590,558 samples, 0.79%)</title><rect x="23.7493%" y="373" width="0.7874%" height="15" fill="rgb(241,35,35)" fg:x="1163920997" fg:w="38590558"/><text x="23.9993%" y="383.50"></text></g><g><title>bitvec::store::BitStore::get_bit (24,666,153 samples, 0.50%)</title><rect x="24.0334%" y="357" width="0.5033%" height="15" fill="rgb(243,32,47)" fg:x="1177845402" fg:w="24666153"/><text x="24.2834%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (24,666,153 samples, 0.50%)</title><rect x="24.0334%" y="341" width="0.5033%" height="15" fill="rgb(247,202,23)" fg:x="1177845402" fg:w="24666153"/><text x="24.2834%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;: 676]&gt; (430,668,788 samples, 8.79%)</title><rect x="24.5367%" y="549" width="8.7876%" height="15" fill="rgb(219,102,11)" fg:x="1202511555" fg:w="430668788"/><text x="24.7867%" y="559.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="533" width="8.1390%" height="15" fill="rgb(243,110,44)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="543.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="517" width="8.1390%" height="15" fill="rgb(222,74,54)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="527.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="501" width="8.1390%" height="15" fill="rgb(216,99,12)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="511.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="485" width="8.1390%" height="15" fill="rgb(226,22,26)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="495.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="469" width="8.1390%" height="15" fill="rgb(217,163,10)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="479.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="453" width="8.1390%" height="15" fill="rgb(213,25,53)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="463.50">alloc::allo..</text></g><g><title>__rdl_dealloc (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="437" width="8.1390%" height="15" fill="rgb(252,105,26)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="447.50">__rdl_deall..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (398,880,123 samples, 8.14%)</title><rect x="25.1853%" y="421" width="8.1390%" height="15" fill="rgb(220,39,43)" fg:x="1234300220" fg:w="398880123"/><text x="25.4353%" y="431.50">std::sys::a..</text></g><g><title>cfree (376,742,777 samples, 7.69%)</title><rect x="25.6370%" y="405" width="7.6873%" height="15" fill="rgb(229,68,48)" fg:x="1256437566" fg:w="376742777"/><text x="25.8870%" y="415.50">cfree</text></g><g><title>[libc.so.6] (309,024,500 samples, 6.31%)</title><rect x="27.0188%" y="389" width="6.3055%" height="15" fill="rgb(252,8,32)" fg:x="1324155843" fg:w="309024500"/><text x="27.2688%" y="399.50">[libc.so..</text></g><g><title>[libc.so.6] (88,604,257 samples, 1.81%)</title><rect x="31.5163%" y="373" width="1.8079%" height="15" fill="rgb(223,20,43)" fg:x="1544576086" fg:w="88604257"/><text x="31.7663%" y="383.50">[..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (98,217,544 samples, 2.00%)</title><rect x="33.3243%" y="549" width="2.0041%" height="15" fill="rgb(229,81,49)" fg:x="1633180343" fg:w="98217544"/><text x="33.5743%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (98,217,544 samples, 2.00%)</title><rect x="33.3243%" y="533" width="2.0041%" height="15" fill="rgb(236,28,36)" fg:x="1633180343" fg:w="98217544"/><text x="33.5743%" y="543.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98,217,544 samples, 2.00%)</title><rect x="33.3243%" y="517" width="2.0041%" height="15" fill="rgb(249,185,26)" fg:x="1633180343" fg:w="98217544"/><text x="33.5743%" y="527.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (98,217,544 samples, 2.00%)</title><rect x="33.3243%" y="501" width="2.0041%" height="15" fill="rgb(249,174,33)" fg:x="1633180343" fg:w="98217544"/><text x="33.5743%" y="511.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91,305,900 samples, 1.86%)</title><rect x="33.4653%" y="485" width="1.8631%" height="15" fill="rgb(233,201,37)" fg:x="1640091987" fg:w="91305900"/><text x="33.7153%" y="495.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (91,305,900 samples, 1.86%)</title><rect x="33.4653%" y="469" width="1.8631%" height="15" fill="rgb(221,78,26)" fg:x="1640091987" fg:w="91305900"/><text x="33.7153%" y="479.50">a..</text></g><g><title>__rdl_dealloc (91,305,900 samples, 1.86%)</title><rect x="33.4653%" y="453" width="1.8631%" height="15" fill="rgb(250,127,30)" fg:x="1640091987" fg:w="91305900"/><text x="33.7153%" y="463.50">_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (91,305,900 samples, 1.86%)</title><rect x="33.4653%" y="437" width="1.8631%" height="15" fill="rgb(230,49,44)" fg:x="1640091987" fg:w="91305900"/><text x="33.7153%" y="447.50">s..</text></g><g><title>cfree (84,235,054 samples, 1.72%)</title><rect x="33.6096%" y="421" width="1.7188%" height="15" fill="rgb(229,67,23)" fg:x="1647162833" fg:w="84235054"/><text x="33.8596%" y="431.50"></text></g><g><title>[libc.so.6] (45,273,907 samples, 0.92%)</title><rect x="34.4046%" y="405" width="0.9238%" height="15" fill="rgb(249,83,47)" fg:x="1686123980" fg:w="45273907"/><text x="34.6546%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="533" width="0.0731%" height="15" fill="rgb(215,43,3)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="517" width="0.0731%" height="15" fill="rgb(238,154,13)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="501" width="0.0731%" height="15" fill="rgb(219,56,2)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="485" width="0.0731%" height="15" fill="rgb(233,0,4)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="469" width="0.0731%" height="15" fill="rgb(235,30,7)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="453" width="0.0731%" height="15" fill="rgb(250,79,13)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="463.50"></text></g><g><title>__rdl_dealloc (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="437" width="0.0731%" height="15" fill="rgb(211,146,34)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="447.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="421" width="0.0731%" height="15" fill="rgb(228,22,38)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="431.50"></text></g><g><title>cfree (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="405" width="0.0731%" height="15" fill="rgb(235,168,5)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="415.50"></text></g><g><title>[libc.so.6] (3,584,003 samples, 0.07%)</title><rect x="35.4034%" y="389" width="0.0731%" height="15" fill="rgb(221,155,16)" fg:x="1735075424" fg:w="3584003"/><text x="35.6534%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;usize&gt;,aoc2024::day23::brute_force_clique_adj::{{closure}}&gt;&gt;&gt;&gt; (358,446,031 samples, 7.31%)</title><rect x="35.3284%" y="549" width="7.3139%" height="15" fill="rgb(215,215,53)" fg:x="1731397887" fg:w="358446031"/><text x="35.5784%" y="559.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;itertools::lazy_buffer::LazyBuffer&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;usize&gt;,aoc2024::day23::brute_force_clique_adj::{{closure}}&gt;&gt;&gt;&gt; (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="533" width="7.1658%" height="15" fill="rgb(223,4,10)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="543.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="517" width="7.1658%" height="15" fill="rgb(234,103,6)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="527.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="501" width="7.1658%" height="15" fill="rgb(227,97,0)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="511.50">core::ptr:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="485" width="7.1658%" height="15" fill="rgb(234,150,53)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="495.50">&lt;alloc::ra..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="469" width="7.1658%" height="15" fill="rgb(228,201,54)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="479.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="453" width="7.1658%" height="15" fill="rgb(222,22,37)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="463.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="437" width="7.1658%" height="15" fill="rgb(237,53,32)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="447.50">alloc::all..</text></g><g><title>__rdl_dealloc (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="421" width="7.1658%" height="15" fill="rgb(233,25,53)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="431.50">__rdl_deal..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="405" width="7.1658%" height="15" fill="rgb(210,40,34)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="415.50">std::sys::..</text></g><g><title>cfree (351,184,491 samples, 7.17%)</title><rect x="35.4765%" y="389" width="7.1658%" height="15" fill="rgb(241,220,44)" fg:x="1738659427" fg:w="351184491"/><text x="35.7265%" y="399.50">cfree</text></g><g><title>[libc.so.6] (344,118,345 samples, 7.02%)</title><rect x="35.6207%" y="373" width="7.0216%" height="15" fill="rgb(235,28,35)" fg:x="1745725573" fg:w="344118345"/><text x="35.8707%" y="383.50">[libc.so...</text></g><g><title>[libc.so.6] (340,466,279 samples, 6.95%)</title><rect x="35.6952%" y="357" width="6.9471%" height="15" fill="rgb(210,56,17)" fg:x="1749377639" fg:w="340466279"/><text x="35.9452%" y="367.50">[libc.so...</text></g><g><title>[libc.so.6] (57,273,906 samples, 1.17%)</title><rect x="41.4736%" y="341" width="1.1686%" height="15" fill="rgb(224,130,29)" fg:x="2032570012" fg:w="57273906"/><text x="41.7236%" y="351.50"></text></g><g><title>itertools::Itertools::combinations (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="549" width="0.1429%" height="15" fill="rgb(235,212,8)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="559.50"></text></g><g><title>itertools::combinations::combinations (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="533" width="0.1429%" height="15" fill="rgb(223,33,50)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="517" width="0.1429%" height="15" fill="rgb(219,149,13)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="501" width="0.1429%" height="15" fill="rgb(250,156,29)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="485" width="0.1429%" height="15" fill="rgb(216,193,19)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="469" width="0.1429%" height="15" fill="rgb(216,135,14)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="453" width="0.1429%" height="15" fill="rgb(241,47,5)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="437" width="0.1429%" height="15" fill="rgb(233,42,35)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="421" width="0.1429%" height="15" fill="rgb(231,13,6)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="405" width="0.1429%" height="15" fill="rgb(207,181,40)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="389" width="0.1429%" height="15" fill="rgb(254,173,49)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="373" width="0.1429%" height="15" fill="rgb(221,1,38)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="357" width="0.1429%" height="15" fill="rgb(206,124,46)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="367.50"></text></g><g><title>alloc::alloc::alloc (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="341" width="0.1429%" height="15" fill="rgb(249,21,11)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="351.50"></text></g><g><title>__rdl_alloc (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="325" width="0.1429%" height="15" fill="rgb(222,201,40)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="309" width="0.1429%" height="15" fill="rgb(235,61,29)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="319.50"></text></g><g><title>malloc (7,000,925 samples, 0.14%)</title><rect x="42.6423%" y="293" width="0.1429%" height="15" fill="rgb(219,207,3)" fg:x="2089843918" fg:w="7000925"/><text x="42.8923%" y="303.50"></text></g><g><title>aoc2024::day23::brute_force_clique_adj (1,475,248,541 samples, 30.10%)</title><rect x="12.7556%" y="565" width="30.1017%" height="15" fill="rgb(222,56,46)" fg:x="625135236" fg:w="1475248541"/><text x="13.0056%" y="575.50">aoc2024::day23::brute_force_clique_adj</text></g><g><title>itertools::Itertools::tuple_combinations (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="549" width="0.0722%" height="15" fill="rgb(239,76,54)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="559.50"></text></g><g><title>itertools::adaptors::tuple_combinations (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="533" width="0.0722%" height="15" fill="rgb(231,124,27)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="543.50"></text></g><g><title>&lt;itertools::adaptors::Tuple2Combination&lt;core::iter::adapters::fuse::Fuse&lt;I&gt;&gt; as core::convert::From&lt;I&gt;&gt;::from (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="517" width="0.0722%" height="15" fill="rgb(249,195,6)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="527.50"></text></g><g><title>&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::convert::From&lt;I&gt;&gt;::from (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="501" width="0.0722%" height="15" fill="rgb(237,174,47)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="485" width="0.0722%" height="15" fill="rgb(206,201,31)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="469" width="0.0722%" height="15" fill="rgb(231,57,52)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3,538,934 samples, 0.07%)</title><rect x="42.7851%" y="453" width="0.0722%" height="15" fill="rgb(248,177,22)" fg:x="2096844843" fg:w="3538934"/><text x="43.0351%" y="463.50"></text></g><g><title>&lt;core::ops::try_trait::NeverShortCircuit&lt;T&gt; as core::ops::try_trait::Try&gt;::from_output (14,092,089 samples, 0.29%)</title><rect x="42.8573%" y="533" width="0.2875%" height="15" fill="rgb(215,211,37)" fg:x="2100383777" fg:w="14092089"/><text x="43.1073%" y="543.50"></text></g><g><title>[libc.so.6] (14,092,089 samples, 0.29%)</title><rect x="42.8573%" y="517" width="0.2875%" height="15" fill="rgb(241,128,51)" fg:x="2100383777" fg:w="14092089"/><text x="43.1073%" y="527.50"></text></g><g><title>core::array::from_fn (57,672,178 samples, 1.18%)</title><rect x="42.8573%" y="565" width="1.1768%" height="15" fill="rgb(227,165,31)" fg:x="2100383777" fg:w="57672178"/><text x="43.1073%" y="575.50"></text></g><g><title>core::array::try_from_fn (57,672,178 samples, 1.18%)</title><rect x="42.8573%" y="549" width="1.1768%" height="15" fill="rgb(228,167,24)" fg:x="2100383777" fg:w="57672178"/><text x="43.1073%" y="559.50"></text></g><g><title>core::array::try_from_fn_erased (43,580,089 samples, 0.89%)</title><rect x="43.1449%" y="533" width="0.8892%" height="15" fill="rgb(228,143,12)" fg:x="2114475866" fg:w="43580089"/><text x="43.3949%" y="543.50"></text></g><g><title>core::array::Guard&lt;T&gt;::push_unchecked (43,580,089 samples, 0.89%)</title><rect x="43.1449%" y="517" width="0.8892%" height="15" fill="rgb(249,149,8)" fg:x="2114475866" fg:w="43580089"/><text x="43.3949%" y="527.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (43,580,089 samples, 0.89%)</title><rect x="43.1449%" y="501" width="0.8892%" height="15" fill="rgb(243,35,44)" fg:x="2114475866" fg:w="43580089"/><text x="43.3949%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51,009,689 samples, 1.04%)</title><rect x="44.6778%" y="533" width="1.0408%" height="15" fill="rgb(246,89,9)" fg:x="2189600676" fg:w="51009689"/><text x="44.9278%" y="543.50"></text></g><g><title>core::cmp::min (35,374,215 samples, 0.72%)</title><rect x="44.9968%" y="517" width="0.7218%" height="15" fill="rgb(233,213,13)" fg:x="2205236150" fg:w="35374215"/><text x="45.2468%" y="527.50"></text></g><g><title>core::cmp::Ord::min (35,374,215 samples, 0.72%)</title><rect x="44.9968%" y="501" width="0.7218%" height="15" fill="rgb(233,141,41)" fg:x="2205236150" fg:w="35374215"/><text x="45.2468%" y="511.50"></text></g><g><title>core::cmp::min_by (35,374,215 samples, 0.72%)</title><rect x="44.9968%" y="485" width="0.7218%" height="15" fill="rgb(239,167,4)" fg:x="2205236150" fg:w="35374215"/><text x="45.2468%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19,369,900 samples, 0.40%)</title><rect x="61.7187%" y="437" width="0.3952%" height="15" fill="rgb(209,217,16)" fg:x="3024757563" fg:w="19369900"/><text x="61.9687%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (53,157,120 samples, 1.08%)</title><rect x="62.1140%" y="437" width="1.0846%" height="15" fill="rgb(219,88,35)" fg:x="3044127463" fg:w="53157120"/><text x="62.3640%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (28,277,601 samples, 0.58%)</title><rect x="63.1986%" y="437" width="0.5770%" height="15" fill="rgb(220,193,23)" fg:x="3097284583" fg:w="28277601"/><text x="63.4486%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,056,508 samples, 0.14%)</title><rect x="64.4257%" y="421" width="0.1440%" height="15" fill="rgb(230,90,52)" fg:x="3157421174" fg:w="7056508"/><text x="64.6757%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,056,508 samples, 0.14%)</title><rect x="64.4257%" y="405" width="0.1440%" height="15" fill="rgb(252,106,19)" fg:x="3157421174" fg:w="7056508"/><text x="64.6757%" y="415.50"></text></g><g><title>alloc::alloc::alloc (7,056,508 samples, 0.14%)</title><rect x="64.4257%" y="389" width="0.1440%" height="15" fill="rgb(206,74,20)" fg:x="3157421174" fg:w="7056508"/><text x="64.6757%" y="399.50"></text></g><g><title>core::ptr::read_volatile (7,056,508 samples, 0.14%)</title><rect x="64.4257%" y="373" width="0.1440%" height="15" fill="rgb(230,138,44)" fg:x="3157421174" fg:w="7056508"/><text x="64.6757%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (974,250,795 samples, 19.88%)</title><rect x="64.5697%" y="421" width="19.8791%" height="15" fill="rgb(235,182,43)" fg:x="3164477682" fg:w="974250795"/><text x="64.8197%" y="431.50">&lt;alloc::alloc::Global as core::..</text></g><g><title>alloc::alloc::Global::grow_impl (974,250,795 samples, 19.88%)</title><rect x="64.5697%" y="405" width="19.8791%" height="15" fill="rgb(242,16,51)" fg:x="3164477682" fg:w="974250795"/><text x="64.8197%" y="415.50">alloc::alloc::Global::grow_impl</text></g><g><title>alloc::alloc::realloc (974,250,795 samples, 19.88%)</title><rect x="64.5697%" y="389" width="19.8791%" height="15" fill="rgb(248,9,4)" fg:x="3164477682" fg:w="974250795"/><text x="64.8197%" y="399.50">alloc::alloc::realloc</text></g><g><title>__rdl_realloc (974,250,795 samples, 19.88%)</title><rect x="64.5697%" y="373" width="19.8791%" height="15" fill="rgb(210,31,22)" fg:x="3164477682" fg:w="974250795"/><text x="64.8197%" y="383.50">__rdl_realloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (974,250,795 samples, 19.88%)</title><rect x="64.5697%" y="357" width="19.8791%" height="15" fill="rgb(239,54,39)" fg:x="3164477682" fg:w="974250795"/><text x="64.8197%" y="367.50">std::sys::alloc::unix::&lt;impl co..</text></g><g><title>realloc (956,425,016 samples, 19.52%)</title><rect x="64.9334%" y="341" width="19.5154%" height="15" fill="rgb(230,99,41)" fg:x="3182303461" fg:w="956425016"/><text x="65.1834%" y="351.50">realloc</text></g><g><title>[libc.so.6] (728,701,424 samples, 14.87%)</title><rect x="69.5800%" y="325" width="14.8688%" height="15" fill="rgb(253,106,12)" fg:x="3410027053" fg:w="728701424"/><text x="69.8300%" y="335.50">[libc.so.6]</text></g><g><title>[libc.so.6] (556,008,845 samples, 11.35%)</title><rect x="73.1037%" y="309" width="11.3451%" height="15" fill="rgb(213,46,41)" fg:x="3582719632" fg:w="556008845"/><text x="73.3537%" y="319.50">[libc.so.6]</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42,218,189 samples, 0.86%)</title><rect x="84.4488%" y="421" width="0.8614%" height="15" fill="rgb(215,133,35)" fg:x="4138728477" fg:w="42218189"/><text x="84.6988%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,291,553,052 samples, 26.35%)</title><rect x="63.7756%" y="437" width="26.3535%" height="15" fill="rgb(213,28,5)" fg:x="3125562184" fg:w="1291553052"/><text x="64.0256%" y="447.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (236,168,570 samples, 4.82%)</title><rect x="85.3102%" y="421" width="4.8189%" height="15" fill="rgb(215,77,49)" fg:x="4180946666" fg:w="236168570"/><text x="85.5602%" y="431.50">malloc</text></g><g><title>[libc.so.6] (178,851,802 samples, 3.65%)</title><rect x="86.4798%" y="405" width="3.6494%" height="15" fill="rgb(248,100,22)" fg:x="4238263434" fg:w="178851802"/><text x="86.7298%" y="415.50">[lib..</text></g><g><title>[libc.so.6] (7,088,741 samples, 0.14%)</title><rect x="89.9845%" y="389" width="0.1446%" height="15" fill="rgb(208,67,9)" fg:x="4410026495" fg:w="7088741"/><text x="90.2345%" y="399.50"></text></g><g><title>alloc::raw_vec::layout_array (14,185,468 samples, 0.29%)</title><rect x="90.1291%" y="437" width="0.2894%" height="15" fill="rgb(219,133,21)" fg:x="4417115236" fg:w="14185468"/><text x="90.3791%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::repeat (14,185,468 samples, 0.29%)</title><rect x="90.1291%" y="421" width="0.2894%" height="15" fill="rgb(246,46,29)" fg:x="4417115236" fg:w="14185468"/><text x="90.3791%" y="431.50"></text></g><g><title>core::cmp::max (17,821,982 samples, 0.36%)</title><rect x="90.4186%" y="437" width="0.3636%" height="15" fill="rgb(246,185,52)" fg:x="4431300704" fg:w="17821982"/><text x="90.6686%" y="447.50"></text></g><g><title>core::cmp::Ord::max (17,821,982 samples, 0.36%)</title><rect x="90.4186%" y="421" width="0.3636%" height="15" fill="rgb(252,136,11)" fg:x="4431300704" fg:w="17821982"/><text x="90.6686%" y="431.50"></text></g><g><title>core::cmp::max_by (17,821,982 samples, 0.36%)</title><rect x="90.4186%" y="405" width="0.3636%" height="15" fill="rgb(219,138,53)" fg:x="4431300704" fg:w="17821982"/><text x="90.6686%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,466,810,155 samples, 29.93%)</title><rect x="61.1417%" y="485" width="29.9296%" height="15" fill="rgb(211,51,23)" fg:x="2996479031" fg:w="1466810155"/><text x="61.3917%" y="495.50">alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,456,230,252 samples, 29.71%)</title><rect x="61.3576%" y="469" width="29.7137%" height="15" fill="rgb(247,221,28)" fg:x="3007058934" fg:w="1456230252"/><text x="61.6076%" y="479.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,456,230,252 samples, 29.71%)</title><rect x="61.3576%" y="453" width="29.7137%" height="15" fill="rgb(251,222,45)" fg:x="3007058934" fg:w="1456230252"/><text x="61.6076%" y="463.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (14,166,500 samples, 0.29%)</title><rect x="90.7822%" y="437" width="0.2891%" height="15" fill="rgb(217,162,53)" fg:x="4449122686" fg:w="14166500"/><text x="91.0322%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16,626,966 samples, 0.34%)</title><rect x="91.0713%" y="485" width="0.3393%" height="15" fill="rgb(229,93,14)" fg:x="4463289186" fg:w="16626966"/><text x="91.3213%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16,626,966 samples, 0.34%)</title><rect x="91.0713%" y="469" width="0.3393%" height="15" fill="rgb(209,67,49)" fg:x="4463289186" fg:w="16626966"/><text x="91.3213%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (16,626,966 samples, 0.34%)</title><rect x="91.0713%" y="453" width="0.3393%" height="15" fill="rgb(213,87,29)" fg:x="4463289186" fg:w="16626966"/><text x="91.3213%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (16,626,966 samples, 0.34%)</title><rect x="91.0713%" y="437" width="0.3393%" height="15" fill="rgb(205,151,52)" fg:x="4463289186" fg:w="16626966"/><text x="91.3213%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,036,302,803 samples, 41.55%)</title><rect x="52.9910%" y="501" width="41.5498%" height="15" fill="rgb(253,215,39)" fg:x="2597022637" fg:w="2036302803"/><text x="53.2410%" y="511.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (153,409,288 samples, 3.13%)</title><rect x="91.4106%" y="485" width="3.1302%" height="15" fill="rgb(221,220,41)" fg:x="4479916152" fg:w="153409288"/><text x="91.6606%" y="495.50">cor..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (32,138,133 samples, 0.66%)</title><rect x="94.5408%" y="421" width="0.6558%" height="15" fill="rgb(218,133,21)" fg:x="4633325440" fg:w="32138133"/><text x="94.7908%" y="431.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (32,138,133 samples, 0.66%)</title><rect x="94.5408%" y="405" width="0.6558%" height="15" fill="rgb(221,193,43)" fg:x="4633325440" fg:w="32138133"/><text x="94.7908%" y="415.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (42,877,953 samples, 0.87%)</title><rect x="94.5408%" y="453" width="0.8749%" height="15" fill="rgb(240,128,52)" fg:x="4633325440" fg:w="42877953"/><text x="94.7908%" y="463.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (42,877,953 samples, 0.87%)</title><rect x="94.5408%" y="437" width="0.8749%" height="15" fill="rgb(253,114,12)" fg:x="4633325440" fg:w="42877953"/><text x="94.7908%" y="447.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset (10,739,820 samples, 0.22%)</title><rect x="95.1966%" y="421" width="0.2191%" height="15" fill="rgb(215,223,47)" fg:x="4665463573" fg:w="10739820"/><text x="95.4466%" y="431.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (10,739,820 samples, 0.22%)</title><rect x="95.1966%" y="405" width="0.2191%" height="15" fill="rgb(248,225,23)" fg:x="4665463573" fg:w="10739820"/><text x="95.4466%" y="415.50"></text></g><g><title>tap::pipe::Pipe::pipe (10,739,820 samples, 0.22%)</title><rect x="95.1966%" y="389" width="0.2191%" height="15" fill="rgb(250,108,0)" fg:x="4665463573" fg:w="10739820"/><text x="95.4466%" y="399.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset::_{{closure}} (10,739,820 samples, 0.22%)</title><rect x="95.1966%" y="373" width="0.2191%" height="15" fill="rgb(228,208,7)" fg:x="4665463573" fg:w="10739820"/><text x="95.4466%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10,739,820 samples, 0.22%)</title><rect x="95.1966%" y="357" width="0.2191%" height="15" fill="rgb(244,45,10)" fg:x="4665463573" fg:w="10739820"/><text x="95.4466%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,693,302,885 samples, 54.96%)</title><rect x="44.0341%" y="565" width="54.9556%" height="15" fill="rgb(207,125,25)" fg:x="2158055955" fg:w="2693302885"/><text x="44.2841%" y="575.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,693,302,885 samples, 54.96%)</title><rect x="44.0341%" y="549" width="54.9556%" height="15" fill="rgb(210,195,18)" fg:x="2158055955" fg:w="2693302885"/><text x="44.2841%" y="559.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2,610,748,475 samples, 53.27%)</title><rect x="45.7186%" y="533" width="53.2711%" height="15" fill="rgb(249,80,12)" fg:x="2240610365" fg:w="2610748475"/><text x="45.9686%" y="543.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>aoc2024::day23::part2_brute_adj::_{{closure}} (2,610,748,475 samples, 53.27%)</title><rect x="45.7186%" y="517" width="53.2711%" height="15" fill="rgb(221,65,9)" fg:x="2240610365" fg:w="2610748475"/><text x="45.9686%" y="527.50">aoc2024::day23::part2_brute_adj::_{{closure}}</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set (218,033,400 samples, 4.45%)</title><rect x="94.5408%" y="501" width="4.4489%" height="15" fill="rgb(235,49,36)" fg:x="4633325440" fg:w="218033400"/><text x="94.7908%" y="511.50">bitve..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace (218,033,400 samples, 4.45%)</title><rect x="94.5408%" y="485" width="4.4489%" height="15" fill="rgb(225,32,20)" fg:x="4633325440" fg:w="218033400"/><text x="94.7908%" y="495.50">bitve..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (218,033,400 samples, 4.45%)</title><rect x="94.5408%" y="469" width="4.4489%" height="15" fill="rgb(215,141,46)" fg:x="4633325440" fg:w="218033400"/><text x="94.7908%" y="479.50">bitve..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (175,155,447 samples, 3.57%)</title><rect x="95.4157%" y="453" width="3.5740%" height="15" fill="rgb(250,160,47)" fg:x="4676203393" fg:w="175155447"/><text x="95.6657%" y="463.50">bitv..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (175,155,447 samples, 3.57%)</title><rect x="95.4157%" y="437" width="3.5740%" height="15" fill="rgb(216,222,40)" fg:x="4676203393" fg:w="175155447"/><text x="95.6657%" y="447.50">bitv..</text></g><g><title>bitvec::access::BitAccess::write_bit (175,155,447 samples, 3.57%)</title><rect x="95.4157%" y="421" width="3.5740%" height="15" fill="rgb(234,217,39)" fg:x="4676203393" fg:w="175155447"/><text x="95.6657%" y="431.50">bitv..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (7,132,071 samples, 0.15%)</title><rect x="98.8441%" y="405" width="0.1455%" height="15" fill="rgb(207,178,40)" fg:x="4844226769" fg:w="7132071"/><text x="99.0941%" y="415.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::select (7,132,071 samples, 0.15%)</title><rect x="98.8441%" y="389" width="0.1455%" height="15" fill="rgb(221,136,13)" fg:x="4844226769" fg:w="7132071"/><text x="99.0941%" y="399.50"></text></g><g><title>&lt;usize as core::ops::bit::Shl&lt;u8&gt;&gt;::shl (7,132,071 samples, 0.15%)</title><rect x="98.8441%" y="373" width="0.1455%" height="15" fill="rgb(249,199,10)" fg:x="4844226769" fg:w="7132071"/><text x="99.0941%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="549" width="0.0740%" height="15" fill="rgb(249,222,13)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="533" width="0.0740%" height="15" fill="rgb(244,185,38)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="517" width="0.0740%" height="15" fill="rgb(236,202,9)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="527.50"></text></g><g><title>aoc2024::day23::part2_brute_adj::_{{closure}} (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="501" width="0.0740%" height="15" fill="rgb(250,229,37)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="511.50"></text></g><g><title>alloc::string::String::from_utf8 (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="485" width="0.0740%" height="15" fill="rgb(206,174,23)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (3,625,194 samples, 0.07%)</title><rect x="98.9897%" y="469" width="0.0740%" height="15" fill="rgb(211,33,43)" fg:x="4851358840" fg:w="3625194"/><text x="99.2397%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (3,321,731 samples, 0.07%)</title><rect x="99.0636%" y="549" width="0.0678%" height="15" fill="rgb(245,58,50)" fg:x="4854984034" fg:w="3321731"/><text x="99.3136%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,321,731 samples, 0.07%)</title><rect x="99.0636%" y="533" width="0.0678%" height="15" fill="rgb(244,68,36)" fg:x="4854984034" fg:w="3321731"/><text x="99.3136%" y="543.50"></text></g><g><title>core::fmt::write (3,321,731 samples, 0.07%)</title><rect x="99.0636%" y="517" width="0.0678%" height="15" fill="rgb(232,229,15)" fg:x="4854984034" fg:w="3321731"/><text x="99.3136%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="245" width="0.0718%" height="15" fill="rgb(254,30,23)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="229" width="0.0718%" height="15" fill="rgb(235,160,14)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="213" width="0.0718%" height="15" fill="rgb(212,155,44)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="197" width="0.0718%" height="15" fill="rgb(226,2,50)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="181" width="0.0718%" height="15" fill="rgb(234,177,6)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="165" width="0.0718%" height="15" fill="rgb(217,24,9)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="149" width="0.0718%" height="15" fill="rgb(220,13,46)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="133" width="0.0718%" height="15" fill="rgb(239,221,27)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="143.50"></text></g><g><title>alloc::alloc::realloc (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="117" width="0.0718%" height="15" fill="rgb(222,198,25)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="127.50"></text></g><g><title>__rdl_realloc (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="101" width="0.0718%" height="15" fill="rgb(211,99,13)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="85" width="0.0718%" height="15" fill="rgb(232,111,31)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="95.50"></text></g><g><title>realloc (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="69" width="0.0718%" height="15" fill="rgb(245,82,37)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="79.50"></text></g><g><title>[libc.so.6] (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="53" width="0.0718%" height="15" fill="rgb(227,149,46)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="63.50"></text></g><g><title>[libc.so.6] (3,520,689 samples, 0.07%)</title><rect x="99.1314%" y="37" width="0.0718%" height="15" fill="rgb(218,36,50)" fg:x="4858305765" fg:w="3520689"/><text x="99.3814%" y="47.50"></text></g><g><title>core::fmt::Write::write_fmt (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="389" width="0.1433%" height="15" fill="rgb(226,80,48)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="373" width="0.1433%" height="15" fill="rgb(238,224,15)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="383.50"></text></g><g><title>core::fmt::write (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="357" width="0.1433%" height="15" fill="rgb(241,136,10)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="341" width="0.1433%" height="15" fill="rgb(208,32,45)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="325" width="0.1433%" height="15" fill="rgb(207,135,9)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="335.50"></text></g><g><title>alloc::string::String::push_str (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="309" width="0.1433%" height="15" fill="rgb(206,86,44)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="293" width="0.1433%" height="15" fill="rgb(245,177,15)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="277" width="0.1433%" height="15" fill="rgb(206,64,50)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,024,212 samples, 0.14%)</title><rect x="99.1314%" y="261" width="0.1433%" height="15" fill="rgb(234,36,40)" fg:x="4858305765" fg:w="7024212"/><text x="99.3814%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,503,523 samples, 0.07%)</title><rect x="99.2033%" y="245" width="0.0715%" height="15" fill="rgb(213,64,8)" fg:x="4861826454" fg:w="3503523"/><text x="99.4533%" y="255.50"></text></g><g><title>[libc.so.6] (3,503,523 samples, 0.07%)</title><rect x="99.2033%" y="229" width="0.0715%" height="15" fill="rgb(210,75,36)" fg:x="4861826454" fg:w="3503523"/><text x="99.4533%" y="239.50"></text></g><g><title>aoc2024::day23::part2_brute_adj (4,317,526,513 samples, 88.10%)</title><rect x="11.2499%" y="581" width="88.0971%" height="15" fill="rgb(229,88,21)" fg:x="551341788" fg:w="4317526513"/><text x="11.4999%" y="591.50">aoc2024::day23::part2_brute_adj</text></g><g><title>itertools::Itertools::join (17,509,461 samples, 0.36%)</title><rect x="98.9897%" y="565" width="0.3573%" height="15" fill="rgb(252,204,47)" fg:x="4851358840" fg:w="17509461"/><text x="99.2397%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="549" width="0.2155%" height="15" fill="rgb(208,77,27)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="559.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="533" width="0.2155%" height="15" fill="rgb(221,76,26)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="543.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_fold (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="517" width="0.2155%" height="15" fill="rgb(225,139,18)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="501" width="0.2155%" height="15" fill="rgb(230,137,11)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="485" width="0.2155%" height="15" fill="rgb(212,28,1)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="469" width="0.2155%" height="15" fill="rgb(248,164,17)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="453" width="0.2155%" height="15" fill="rgb(222,171,42)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="463.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="437" width="0.2155%" height="15" fill="rgb(243,84,45)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="421" width="0.2155%" height="15" fill="rgb(252,49,23)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="431.50"></text></g><g><title>itertools::Itertools::join::_{{closure}} (10,562,536 samples, 0.22%)</title><rect x="99.1314%" y="405" width="0.2155%" height="15" fill="rgb(215,19,7)" fg:x="4858305765" fg:w="10562536"/><text x="99.3814%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="389" width="0.0722%" height="15" fill="rgb(238,81,41)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="373" width="0.0722%" height="15" fill="rgb(210,199,37)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="357" width="0.0722%" height="15" fill="rgb(244,192,49)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="341" width="0.0722%" height="15" fill="rgb(226,211,11)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="325" width="0.0722%" height="15" fill="rgb(236,162,54)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="309" width="0.0722%" height="15" fill="rgb(220,229,9)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="293" width="0.0722%" height="15" fill="rgb(250,87,22)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="303.50"></text></g><g><title>__rdl_dealloc (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="277" width="0.0722%" height="15" fill="rgb(239,43,17)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="261" width="0.0722%" height="15" fill="rgb(231,177,25)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="271.50"></text></g><g><title>cfree (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="245" width="0.0722%" height="15" fill="rgb(219,179,1)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="255.50"></text></g><g><title>[libc.so.6] (3,538,324 samples, 0.07%)</title><rect x="99.2748%" y="229" width="0.0722%" height="15" fill="rgb(238,219,53)" fg:x="4865329977" fg:w="3538324"/><text x="99.5248%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="581" width="0.0742%" height="15" fill="rgb(232,167,36)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="565" width="0.0742%" height="15" fill="rgb(244,19,51)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="549" width="0.0742%" height="15" fill="rgb(224,6,22)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="533" width="0.0742%" height="15" fill="rgb(224,145,5)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="517" width="0.0742%" height="15" fill="rgb(234,130,49)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="501" width="0.0742%" height="15" fill="rgb(254,6,2)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="485" width="0.0742%" height="15" fill="rgb(208,96,46)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="495.50"></text></g><g><title>__rdl_dealloc (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="469" width="0.0742%" height="15" fill="rgb(239,3,39)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="479.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="453" width="0.0742%" height="15" fill="rgb(233,210,1)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="463.50"></text></g><g><title>cfree (3,635,317 samples, 0.07%)</title><rect x="99.3469%" y="437" width="0.0742%" height="15" fill="rgb(244,137,37)" fg:x="4868868301" fg:w="3635317"/><text x="99.5969%" y="447.50"></text></g><g><title>aoc2024::main (4,331,881,759 samples, 88.39%)</title><rect x="11.1768%" y="597" width="88.3900%" height="15" fill="rgb(240,136,2)" fg:x="547759957" fg:w="4331881759"/><text x="11.4268%" y="607.50">aoc2024::main</text></g><g><title>std::io::stdio::_print (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="581" width="0.1456%" height="15" fill="rgb(239,18,37)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="591.50"></text></g><g><title>std::io::stdio::print_to (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="565" width="0.1456%" height="15" fill="rgb(218,185,22)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="575.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="549" width="0.1456%" height="15" fill="rgb(225,218,4)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="559.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="533" width="0.1456%" height="15" fill="rgb(230,182,32)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="517" width="0.1456%" height="15" fill="rgb(242,56,43)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="527.50"></text></g><g><title>core::fmt::write (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="501" width="0.1456%" height="15" fill="rgb(233,99,24)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="511.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="485" width="0.1456%" height="15" fill="rgb(234,209,42)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="469" width="0.1456%" height="15" fill="rgb(227,7,12)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="453" width="0.1456%" height="15" fill="rgb(245,203,43)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="437" width="0.1456%" height="15" fill="rgb(238,205,33)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="447.50"></text></g><g><title>core::slice::memchr::memrchr (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="421" width="0.1456%" height="15" fill="rgb(231,56,7)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="405" width="0.1456%" height="15" fill="rgb(244,186,29)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="415.50"></text></g><g><title>core::slice::memchr::memrchr::_{{closure}} (7,138,098 samples, 0.15%)</title><rect x="99.4211%" y="389" width="0.1456%" height="15" fill="rgb(234,111,31)" fg:x="4872503618" fg:w="7138098"/><text x="99.6711%" y="399.50"></text></g><g><title>cfree (3,400,908 samples, 0.07%)</title><rect x="99.5668%" y="597" width="0.0694%" height="15" fill="rgb(241,149,10)" fg:x="4879641716" fg:w="3400908"/><text x="99.8168%" y="607.50"></text></g><g><title>all (4,900,873,557 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="4900873557"/><text x="0.2500%" y="639.50"></text></g><g><title>aoc2024 (4,900,873,557 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="4900873557"/><text x="0.2500%" y="623.50">aoc2024</text></g><g><title>malloc (17,830,933 samples, 0.36%)</title><rect x="99.6362%" y="597" width="0.3638%" height="15" fill="rgb(239,152,38)" fg:x="4883042624" fg:w="17830933"/><text x="99.8862%" y="607.50"></text></g></svg></svg>