<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="1835072716"><g><title>[libc.so.6] (6,792,856 samples, 0.37%)</title><rect x="0.0000%" y="405" width="0.3702%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6792856"/><text x="0.2500%" y="415.50"></text></g><g><title>[[stack]] (10,171,317 samples, 0.55%)</title><rect x="0.0000%" y="421" width="0.5543%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10171317"/><text x="0.2500%" y="431.50"></text></g><g><title>malloc (3,378,461 samples, 0.18%)</title><rect x="0.3702%" y="405" width="0.1841%" height="15" fill="rgb(221,193,54)" fg:x="6792856" fg:w="3378461"/><text x="0.6202%" y="415.50"></text></g><g><title>[anon] (3,437,591 samples, 0.19%)</title><rect x="0.5543%" y="421" width="0.1873%" height="15" fill="rgb(248,212,6)" fg:x="10171317" fg:w="3437591"/><text x="0.8043%" y="431.50"></text></g><g><title>[libc.so.6] (3,437,591 samples, 0.19%)</title><rect x="0.5543%" y="405" width="0.1873%" height="15" fill="rgb(208,68,35)" fg:x="10171317" fg:w="3437591"/><text x="0.8043%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,568,505 samples, 0.19%)</title><rect x="0.7416%" y="421" width="0.1945%" height="15" fill="rgb(232,128,0)" fg:x="13608908" fg:w="3568505"/><text x="0.9916%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="405" width="0.1882%" height="15" fill="rgb(207,160,47)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="389" width="0.1882%" height="15" fill="rgb(228,23,34)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="373" width="0.1882%" height="15" fill="rgb(218,30,26)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="357" width="0.1882%" height="15" fill="rgb(220,122,19)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="367.50"></text></g><g><title>_dl_catch_exception (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="341" width="0.1882%" height="15" fill="rgb(250,228,42)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="325" width="0.1882%" height="15" fill="rgb(240,193,28)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="309" width="0.1882%" height="15" fill="rgb(216,20,37)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="293" width="0.1882%" height="15" fill="rgb(206,188,39)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,453,962 samples, 0.19%)</title><rect x="0.7478%" y="277" width="0.1882%" height="15" fill="rgb(217,207,13)" fg:x="13723451" fg:w="3453962"/><text x="0.9978%" y="287.50"></text></g><g><title>[libc.so.6] (13,767,338 samples, 0.75%)</title><rect x="0.9361%" y="405" width="0.7502%" height="15" fill="rgb(231,73,38)" fg:x="17177413" fg:w="13767338"/><text x="1.1861%" y="415.50"></text></g><g><title>malloc (10,669,044 samples, 0.58%)</title><rect x="1.6863%" y="405" width="0.5814%" height="15" fill="rgb(225,20,46)" fg:x="30944751" fg:w="10669044"/><text x="1.9363%" y="415.50"></text></g><g><title>realloc (10,176,064 samples, 0.55%)</title><rect x="2.2677%" y="405" width="0.5545%" height="15" fill="rgb(210,31,41)" fg:x="41613795" fg:w="10176064"/><text x="2.5177%" y="415.50"></text></g><g><title>[unknown] (37,983,263 samples, 2.07%)</title><rect x="0.9361%" y="421" width="2.0699%" height="15" fill="rgb(221,200,47)" fg:x="17177413" fg:w="37983263"/><text x="1.1861%" y="431.50">[..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3,370,817 samples, 0.18%)</title><rect x="2.8222%" y="405" width="0.1837%" height="15" fill="rgb(226,26,5)" fg:x="51789859" fg:w="3370817"/><text x="3.0722%" y="415.50"></text></g><g><title>[libc.so.6] (99,713,685 samples, 5.43%)</title><rect x="3.0059%" y="389" width="5.4338%" height="15" fill="rgb(249,33,26)" fg:x="55160676" fg:w="99713685"/><text x="3.2559%" y="399.50">[libc.s..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,361,522 samples, 0.18%)</title><rect x="9.5443%" y="373" width="0.1832%" height="15" fill="rgb(235,183,28)" fg:x="175145211" fg:w="3361522"/><text x="9.7943%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,361,522 samples, 0.18%)</title><rect x="9.5443%" y="357" width="0.1832%" height="15" fill="rgb(221,5,38)" fg:x="175145211" fg:w="3361522"/><text x="9.7943%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (3,361,522 samples, 0.18%)</title><rect x="9.5443%" y="341" width="0.1832%" height="15" fill="rgb(247,18,42)" fg:x="175145211" fg:w="3361522"/><text x="9.7943%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3,361,522 samples, 0.18%)</title><rect x="9.5443%" y="325" width="0.1832%" height="15" fill="rgb(241,131,45)" fg:x="175145211" fg:w="3361522"/><text x="9.7943%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3,361,522 samples, 0.18%)</title><rect x="9.5443%" y="309" width="0.1832%" height="15" fill="rgb(249,31,29)" fg:x="175145211" fg:w="3361522"/><text x="9.7943%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10,213,542 samples, 0.56%)</title><rect x="13.0427%" y="341" width="0.5566%" height="15" fill="rgb(225,111,53)" fg:x="239343439" fg:w="10213542"/><text x="13.2927%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10,213,542 samples, 0.56%)</title><rect x="13.0427%" y="325" width="0.5566%" height="15" fill="rgb(238,160,17)" fg:x="239343439" fg:w="10213542"/><text x="13.2927%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10,213,542 samples, 0.56%)</title><rect x="13.0427%" y="309" width="0.5566%" height="15" fill="rgb(214,148,48)" fg:x="239343439" fg:w="10213542"/><text x="13.2927%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10,239,982 samples, 0.56%)</title><rect x="13.5993%" y="341" width="0.5580%" height="15" fill="rgb(232,36,49)" fg:x="249556981" fg:w="10239982"/><text x="13.8493%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10,239,982 samples, 0.56%)</title><rect x="13.5993%" y="325" width="0.5580%" height="15" fill="rgb(209,103,24)" fg:x="249556981" fg:w="10239982"/><text x="13.8493%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,383,228 samples, 0.18%)</title><rect x="13.9729%" y="309" width="0.1844%" height="15" fill="rgb(229,88,8)" fg:x="256413735" fg:w="3383228"/><text x="14.2229%" y="319.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::increment_indices (84,732,294 samples, 4.62%)</title><rect x="9.7275%" y="357" width="4.6174%" height="15" fill="rgb(213,181,19)" fg:x="178506733" fg:w="84732294"/><text x="9.9775%" y="367.50">itert..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="341" width="0.1876%" height="15" fill="rgb(254,191,54)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="325" width="0.1876%" height="15" fill="rgb(241,83,37)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="309" width="0.1876%" height="15" fill="rgb(233,36,39)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="293" width="0.1876%" height="15" fill="rgb(226,3,54)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="277" width="0.1876%" height="15" fill="rgb(245,192,40)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="261" width="0.1876%" height="15" fill="rgb(238,167,29)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="245" width="0.1876%" height="15" fill="rgb(232,182,51)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,442,064 samples, 0.19%)</title><rect x="14.1573%" y="229" width="0.1876%" height="15" fill="rgb(231,60,39)" fg:x="259796963" fg:w="3442064"/><text x="14.4073%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (34,687,480 samples, 1.89%)</title><rect x="14.3449%" y="277" width="1.8903%" height="15" fill="rgb(208,69,12)" fg:x="263239027" fg:w="34687480"/><text x="14.5949%" y="287.50">&lt;..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="261" width="1.4934%" height="15" fill="rgb(235,93,37)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="245" width="1.4934%" height="15" fill="rgb(213,116,39)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="229" width="1.4934%" height="15" fill="rgb(222,207,29)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="213" width="1.4934%" height="15" fill="rgb(206,96,30)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="197" width="1.4934%" height="15" fill="rgb(218,138,4)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (27,405,460 samples, 1.49%)</title><rect x="14.7417%" y="181" width="1.4934%" height="15" fill="rgb(250,191,14)" fg:x="270521047" fg:w="27405460"/><text x="14.9917%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20,613,262 samples, 1.12%)</title><rect x="15.1118%" y="165" width="1.1233%" height="15" fill="rgb(239,60,40)" fg:x="277313245" fg:w="20613262"/><text x="15.3618%" y="175.50"></text></g><g><title>aoc2024::day23::brute_force_clique_adj::_{{closure}} (20,613,262 samples, 1.12%)</title><rect x="15.1118%" y="149" width="1.1233%" height="15" fill="rgb(206,27,48)" fg:x="277313245" fg:w="20613262"/><text x="15.3618%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6,952,841 samples, 0.38%)</title><rect x="16.2351%" y="277" width="0.3789%" height="15" fill="rgb(225,35,8)" fg:x="297926507" fg:w="6952841"/><text x="16.4851%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,952,841 samples, 0.38%)</title><rect x="16.2351%" y="261" width="0.3789%" height="15" fill="rgb(250,213,24)" fg:x="297926507" fg:w="6952841"/><text x="16.4851%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,952,841 samples, 0.38%)</title><rect x="16.2351%" y="245" width="0.3789%" height="15" fill="rgb(247,123,22)" fg:x="297926507" fg:w="6952841"/><text x="16.4851%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,952,841 samples, 0.38%)</title><rect x="16.2351%" y="229" width="0.3789%" height="15" fill="rgb(231,138,38)" fg:x="297926507" fg:w="6952841"/><text x="16.4851%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (14,218,308 samples, 0.77%)</title><rect x="16.6140%" y="197" width="0.7748%" height="15" fill="rgb(231,145,46)" fg:x="304879348" fg:w="14218308"/><text x="16.8640%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="181" width="3.7392%" height="15" fill="rgb(251,118,11)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="191.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="165" width="3.7392%" height="15" fill="rgb(217,147,25)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="175.50">allo..</text></g><g><title>alloc::alloc::realloc (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="149" width="3.7392%" height="15" fill="rgb(247,81,37)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="159.50">allo..</text></g><g><title>__rdl_realloc (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="133" width="3.7392%" height="15" fill="rgb(209,12,38)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="143.50">__rd..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="117" width="3.7392%" height="15" fill="rgb(227,1,9)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="127.50">std:..</text></g><g><title>realloc (68,617,201 samples, 3.74%)</title><rect x="17.3888%" y="101" width="3.7392%" height="15" fill="rgb(248,47,43)" fg:x="319097656" fg:w="68617201"/><text x="17.6388%" y="111.50">real..</text></g><g><title>[libc.so.6] (58,350,284 samples, 3.18%)</title><rect x="17.9483%" y="85" width="3.1797%" height="15" fill="rgb(221,10,30)" fg:x="329364573" fg:w="58350284"/><text x="18.1983%" y="95.50">[li..</text></g><g><title>[libc.so.6] (51,460,970 samples, 2.80%)</title><rect x="18.3237%" y="69" width="2.8043%" height="15" fill="rgb(210,229,1)" fg:x="336253887" fg:w="51460970"/><text x="18.5737%" y="79.50">[l..</text></g><g><title>[libc.so.6] (20,352,501 samples, 1.11%)</title><rect x="20.0190%" y="53" width="1.1091%" height="15" fill="rgb(222,148,37)" fg:x="367362356" fg:w="20352501"/><text x="20.2690%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,459,165 samples, 0.19%)</title><rect x="21.1280%" y="181" width="0.1885%" height="15" fill="rgb(234,67,33)" fg:x="387714857" fg:w="3459165"/><text x="21.3780%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (75,461,719 samples, 4.11%)</title><rect x="17.3888%" y="197" width="4.1122%" height="15" fill="rgb(247,98,35)" fg:x="319097656" fg:w="75461719"/><text x="17.6388%" y="207.50">allo..</text></g><g><title>malloc (3,385,353 samples, 0.18%)</title><rect x="21.3165%" y="181" width="0.1845%" height="15" fill="rgb(247,138,52)" fg:x="391174022" fg:w="3385353"/><text x="21.5665%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (93,112,493 samples, 5.07%)</title><rect x="16.6140%" y="277" width="5.0740%" height="15" fill="rgb(213,79,30)" fg:x="304879348" fg:w="93112493"/><text x="16.8640%" y="287.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (93,112,493 samples, 5.07%)</title><rect x="16.6140%" y="261" width="5.0740%" height="15" fill="rgb(246,177,23)" fg:x="304879348" fg:w="93112493"/><text x="16.8640%" y="271.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (93,112,493 samples, 5.07%)</title><rect x="16.6140%" y="245" width="5.0740%" height="15" fill="rgb(230,62,27)" fg:x="304879348" fg:w="93112493"/><text x="16.8640%" y="255.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (93,112,493 samples, 5.07%)</title><rect x="16.6140%" y="229" width="5.0740%" height="15" fill="rgb(216,154,8)" fg:x="304879348" fg:w="93112493"/><text x="16.8640%" y="239.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (93,112,493 samples, 5.07%)</title><rect x="16.6140%" y="213" width="5.0740%" height="15" fill="rgb(244,35,45)" fg:x="304879348" fg:w="93112493"/><text x="16.8640%" y="223.50">alloc:..</text></g><g><title>alloc::raw_vec::layout_array (3,432,466 samples, 0.19%)</title><rect x="21.5010%" y="197" width="0.1870%" height="15" fill="rgb(251,115,12)" fg:x="394559375" fg:w="3432466"/><text x="21.7510%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,432,466 samples, 0.19%)</title><rect x="21.5010%" y="181" width="0.1870%" height="15" fill="rgb(240,54,50)" fg:x="394559375" fg:w="3432466"/><text x="21.7510%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (3,432,466 samples, 0.19%)</title><rect x="21.5010%" y="165" width="0.1870%" height="15" fill="rgb(233,84,52)" fg:x="394559375" fg:w="3432466"/><text x="21.7510%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (3,432,466 samples, 0.19%)</title><rect x="21.5010%" y="149" width="0.1870%" height="15" fill="rgb(207,117,47)" fg:x="394559375" fg:w="3432466"/><text x="21.7510%" y="159.50"></text></g><g><title>itertools::combinations::Combinations&lt;I&gt;::init (138,188,954 samples, 7.53%)</title><rect x="14.3449%" y="357" width="7.5304%" height="15" fill="rgb(249,43,39)" fg:x="263239027" fg:w="138188954"/><text x="14.5949%" y="367.50">itertools:..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::prefill (138,188,954 samples, 7.53%)</title><rect x="14.3449%" y="341" width="7.5304%" height="15" fill="rgb(209,38,44)" fg:x="263239027" fg:w="138188954"/><text x="14.5949%" y="351.50">itertools:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (138,188,954 samples, 7.53%)</title><rect x="14.3449%" y="325" width="7.5304%" height="15" fill="rgb(236,212,23)" fg:x="263239027" fg:w="138188954"/><text x="14.5949%" y="335.50">&lt;alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (138,188,954 samples, 7.53%)</title><rect x="14.3449%" y="309" width="7.5304%" height="15" fill="rgb(242,79,21)" fg:x="263239027" fg:w="138188954"/><text x="14.5949%" y="319.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (138,188,954 samples, 7.53%)</title><rect x="14.3449%" y="293" width="7.5304%" height="15" fill="rgb(211,96,35)" fg:x="263239027" fg:w="138188954"/><text x="14.5949%" y="303.50">alloc::vec..</text></g><g><title>core::ptr::write (3,436,140 samples, 0.19%)</title><rect x="21.6881%" y="277" width="0.1872%" height="15" fill="rgb(253,215,40)" fg:x="397991841" fg:w="3436140"/><text x="21.9381%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (20,294,584 samples, 1.11%)</title><rect x="22.6258%" y="181" width="1.1059%" height="15" fill="rgb(211,81,21)" fg:x="415199083" fg:w="20294584"/><text x="22.8758%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (20,294,584 samples, 1.11%)</title><rect x="22.6258%" y="165" width="1.1059%" height="15" fill="rgb(208,190,38)" fg:x="415199083" fg:w="20294584"/><text x="22.8758%" y="175.50"></text></g><g><title>core::ptr::write (20,294,584 samples, 1.11%)</title><rect x="22.6258%" y="149" width="1.1059%" height="15" fill="rgb(235,213,38)" fg:x="415199083" fg:w="20294584"/><text x="22.8758%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (61,597,634 samples, 3.36%)</title><rect x="21.8753%" y="277" width="3.3567%" height="15" fill="rgb(237,122,38)" fg:x="401427981" fg:w="61597634"/><text x="22.1253%" y="287.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (61,597,634 samples, 3.36%)</title><rect x="21.8753%" y="261" width="3.3567%" height="15" fill="rgb(244,218,35)" fg:x="401427981" fg:w="61597634"/><text x="22.1253%" y="271.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61,597,634 samples, 3.36%)</title><rect x="21.8753%" y="245" width="3.3567%" height="15" fill="rgb(240,68,47)" fg:x="401427981" fg:w="61597634"/><text x="22.1253%" y="255.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,597,634 samples, 3.36%)</title><rect x="21.8753%" y="229" width="3.3567%" height="15" fill="rgb(210,16,53)" fg:x="401427981" fg:w="61597634"/><text x="22.1253%" y="239.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (61,597,634 samples, 3.36%)</title><rect x="21.8753%" y="213" width="3.3567%" height="15" fill="rgb(235,124,12)" fg:x="401427981" fg:w="61597634"/><text x="22.1253%" y="223.50">&lt;co..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (47,826,532 samples, 2.61%)</title><rect x="22.6258%" y="197" width="2.6062%" height="15" fill="rgb(224,169,11)" fg:x="415199083" fg:w="47826532"/><text x="22.8758%" y="207.50">co..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at::_{{closure}} (27,531,948 samples, 1.50%)</title><rect x="23.7317%" y="181" width="1.5003%" height="15" fill="rgb(250,166,2)" fg:x="435493667" fg:w="27531948"/><text x="23.9817%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27,531,948 samples, 1.50%)</title><rect x="23.7317%" y="165" width="1.5003%" height="15" fill="rgb(242,216,29)" fg:x="435493667" fg:w="27531948"/><text x="23.9817%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27,531,948 samples, 1.50%)</title><rect x="23.7317%" y="149" width="1.5003%" height="15" fill="rgb(230,116,27)" fg:x="435493667" fg:w="27531948"/><text x="23.9817%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27,531,948 samples, 1.50%)</title><rect x="23.7317%" y="133" width="1.5003%" height="15" fill="rgb(228,99,48)" fg:x="435493667" fg:w="27531948"/><text x="23.9817%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44,724,949 samples, 2.44%)</title><rect x="25.4187%" y="197" width="2.4372%" height="15" fill="rgb(253,11,6)" fg:x="466450963" fg:w="44724949"/><text x="25.6687%" y="207.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (44,724,949 samples, 2.44%)</title><rect x="25.4187%" y="181" width="2.4372%" height="15" fill="rgb(247,143,39)" fg:x="466450963" fg:w="44724949"/><text x="25.6687%" y="191.50">al..</text></g><g><title>alloc::alloc::alloc (44,724,949 samples, 2.44%)</title><rect x="25.4187%" y="165" width="2.4372%" height="15" fill="rgb(236,97,10)" fg:x="466450963" fg:w="44724949"/><text x="25.6687%" y="175.50">al..</text></g><g><title>__rdl_alloc (44,724,949 samples, 2.44%)</title><rect x="25.4187%" y="149" width="2.4372%" height="15" fill="rgb(233,208,19)" fg:x="466450963" fg:w="44724949"/><text x="25.6687%" y="159.50">__..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44,724,949 samples, 2.44%)</title><rect x="25.4187%" y="133" width="2.4372%" height="15" fill="rgb(216,164,2)" fg:x="466450963" fg:w="44724949"/><text x="25.6687%" y="143.50">st..</text></g><g><title>malloc (30,989,999 samples, 1.69%)</title><rect x="26.1671%" y="117" width="1.6888%" height="15" fill="rgb(220,129,5)" fg:x="480185913" fg:w="30989999"/><text x="26.4171%" y="127.50"></text></g><g><title>&lt;itertools::combinations::Combinations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (336,048,227 samples, 18.31%)</title><rect x="9.7275%" y="373" width="18.3125%" height="15" fill="rgb(242,17,10)" fg:x="178506733" fg:w="336048227"/><text x="9.9775%" y="383.50">&lt;itertools::combinations::Com..</text></g><g><title>itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_at (113,126,979 samples, 6.16%)</title><rect x="21.8753%" y="357" width="6.1647%" height="15" fill="rgb(242,107,0)" fg:x="401427981" fg:w="113126979"/><text x="22.1253%" y="367.50">itertool..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (113,126,979 samples, 6.16%)</title><rect x="21.8753%" y="341" width="6.1647%" height="15" fill="rgb(251,28,31)" fg:x="401427981" fg:w="113126979"/><text x="22.1253%" y="351.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (113,126,979 samples, 6.16%)</title><rect x="21.8753%" y="325" width="6.1647%" height="15" fill="rgb(233,223,10)" fg:x="401427981" fg:w="113126979"/><text x="22.1253%" y="335.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (113,126,979 samples, 6.16%)</title><rect x="21.8753%" y="309" width="6.1647%" height="15" fill="rgb(215,21,27)" fg:x="401427981" fg:w="113126979"/><text x="22.1253%" y="319.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (113,126,979 samples, 6.16%)</title><rect x="21.8753%" y="293" width="6.1647%" height="15" fill="rgb(232,23,21)" fg:x="401427981" fg:w="113126979"/><text x="22.1253%" y="303.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (51,529,345 samples, 2.81%)</title><rect x="25.2320%" y="277" width="2.8080%" height="15" fill="rgb(244,5,23)" fg:x="463025615" fg:w="51529345"/><text x="25.4820%" y="287.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51,529,345 samples, 2.81%)</title><rect x="25.2320%" y="261" width="2.8080%" height="15" fill="rgb(226,81,46)" fg:x="463025615" fg:w="51529345"/><text x="25.4820%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51,529,345 samples, 2.81%)</title><rect x="25.2320%" y="245" width="2.8080%" height="15" fill="rgb(247,70,30)" fg:x="463025615" fg:w="51529345"/><text x="25.4820%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (51,529,345 samples, 2.81%)</title><rect x="25.2320%" y="229" width="2.8080%" height="15" fill="rgb(212,68,19)" fg:x="463025615" fg:w="51529345"/><text x="25.4820%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (51,529,345 samples, 2.81%)</title><rect x="25.2320%" y="213" width="2.8080%" height="15" fill="rgb(240,187,13)" fg:x="463025615" fg:w="51529345"/><text x="25.4820%" y="223.50">al..</text></g><g><title>alloc::raw_vec::layout_array (3,379,048 samples, 0.18%)</title><rect x="27.8559%" y="197" width="0.1841%" height="15" fill="rgb(223,113,26)" fg:x="511175912" fg:w="3379048"/><text x="28.1059%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,379,048 samples, 0.18%)</title><rect x="27.8559%" y="181" width="0.1841%" height="15" fill="rgb(206,192,2)" fg:x="511175912" fg:w="3379048"/><text x="28.1059%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3,379,048 samples, 0.18%)</title><rect x="27.8559%" y="165" width="0.1841%" height="15" fill="rgb(241,108,4)" fg:x="511175912" fg:w="3379048"/><text x="28.1059%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,379,048 samples, 0.18%)</title><rect x="27.8559%" y="149" width="0.1841%" height="15" fill="rgb(247,173,49)" fg:x="511175912" fg:w="3379048"/><text x="28.1059%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,379,048 samples, 0.18%)</title><rect x="27.8559%" y="133" width="0.1841%" height="15" fill="rgb(224,114,35)" fg:x="511175912" fg:w="3379048"/><text x="28.1059%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (15,483,892 samples, 0.84%)</title><rect x="29.5275%" y="309" width="0.8438%" height="15" fill="rgb(245,159,27)" fg:x="541850826" fg:w="15483892"/><text x="29.7775%" y="319.50"></text></g><g><title>&lt;itertools::adaptors::TupleCombinations&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36,091,136 samples, 1.97%)</title><rect x="28.7812%" y="341" width="1.9667%" height="15" fill="rgb(245,172,44)" fg:x="528156788" fg:w="36091136"/><text x="29.0312%" y="351.50">&lt;..</text></g><g><title>&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (36,091,136 samples, 1.97%)</title><rect x="28.7812%" y="325" width="1.9667%" height="15" fill="rgb(236,23,11)" fg:x="528156788" fg:w="36091136"/><text x="29.0312%" y="335.50">&lt;..</text></g><g><title>&lt;itertools::adaptors::Tuple1Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,913,206 samples, 0.38%)</title><rect x="30.3713%" y="309" width="0.3767%" height="15" fill="rgb(205,117,38)" fg:x="557334718" fg:w="6913206"/><text x="30.6213%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,913,206 samples, 0.38%)</title><rect x="30.3713%" y="293" width="0.3767%" height="15" fill="rgb(237,72,25)" fg:x="557334718" fg:w="6913206"/><text x="30.6213%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (6,913,206 samples, 0.38%)</title><rect x="30.3713%" y="277" width="0.3767%" height="15" fill="rgb(244,70,9)" fg:x="557334718" fg:w="6913206"/><text x="30.6213%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (6,913,206 samples, 0.38%)</title><rect x="30.3713%" y="261" width="0.3767%" height="15" fill="rgb(217,125,39)" fg:x="557334718" fg:w="6913206"/><text x="30.6213%" y="271.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="229" width="0.7407%" height="15" fill="rgb(235,36,10)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="239.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="213" width="0.7407%" height="15" fill="rgb(251,123,47)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="223.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="197" width="0.7407%" height="15" fill="rgb(221,13,13)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="207.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="181" width="0.7407%" height="15" fill="rgb(238,131,9)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="191.50"></text></g><g><title>tap::pipe::Pipe::pipe (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="165" width="0.7407%" height="15" fill="rgb(211,50,8)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="175.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset::_{{closure}} (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="149" width="0.7407%" height="15" fill="rgb(245,182,24)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13,592,766 samples, 0.74%)</title><rect x="31.4937%" y="133" width="0.7407%" height="15" fill="rgb(242,14,37)" fg:x="577932925" fg:w="13592766"/><text x="31.7437%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (122,172,194 samples, 6.66%)</title><rect x="28.0400%" y="373" width="6.6576%" height="15" fill="rgb(246,228,12)" fg:x="514554960" fg:w="122172194"/><text x="28.2900%" y="383.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (122,172,194 samples, 6.66%)</title><rect x="28.0400%" y="357" width="6.6576%" height="15" fill="rgb(213,55,15)" fg:x="514554960" fg:w="122172194"/><text x="28.2900%" y="367.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (72,479,230 samples, 3.95%)</title><rect x="30.7480%" y="341" width="3.9497%" height="15" fill="rgb(209,9,3)" fg:x="564247924" fg:w="72479230"/><text x="30.9980%" y="351.50">core..</text></g><g><title>aoc2024::day23::brute_force_clique_adj::_{{closure}} (72,479,230 samples, 3.95%)</title><rect x="30.7480%" y="325" width="3.9497%" height="15" fill="rgb(230,59,30)" fg:x="564247924" fg:w="72479230"/><text x="30.9980%" y="335.50">aoc2..</text></g><g><title>bitvec::array::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::array::BitArray&lt;A,O&gt;&gt;::index (62,226,518 samples, 3.39%)</title><rect x="31.3067%" y="309" width="3.3910%" height="15" fill="rgb(209,121,21)" fg:x="574500636" fg:w="62226518"/><text x="31.5567%" y="319.50">bit..</text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (62,226,518 samples, 3.39%)</title><rect x="31.3067%" y="293" width="3.3910%" height="15" fill="rgb(220,109,13)" fg:x="574500636" fg:w="62226518"/><text x="31.5567%" y="303.50">bit..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (62,226,518 samples, 3.39%)</title><rect x="31.3067%" y="277" width="3.3910%" height="15" fill="rgb(232,18,1)" fg:x="574500636" fg:w="62226518"/><text x="31.5567%" y="287.50">&lt;us..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (62,226,518 samples, 3.39%)</title><rect x="31.3067%" y="261" width="3.3910%" height="15" fill="rgb(215,41,42)" fg:x="574500636" fg:w="62226518"/><text x="31.5567%" y="271.50">&lt;us..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (58,794,229 samples, 3.20%)</title><rect x="31.4937%" y="245" width="3.2039%" height="15" fill="rgb(224,123,36)" fg:x="577932925" fg:w="58794229"/><text x="31.7437%" y="255.50">&lt;us..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref (45,201,463 samples, 2.46%)</title><rect x="32.2345%" y="229" width="2.4632%" height="15" fill="rgb(240,125,3)" fg:x="591525691" fg:w="45201463"/><text x="32.4845%" y="239.50">bi..</text></g><g><title>bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr (45,201,463 samples, 2.46%)</title><rect x="32.2345%" y="213" width="2.4632%" height="15" fill="rgb(205,98,50)" fg:x="591525691" fg:w="45201463"/><text x="32.4845%" y="223.50">bi..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (45,201,463 samples, 2.46%)</title><rect x="32.2345%" y="197" width="2.4632%" height="15" fill="rgb(205,185,37)" fg:x="591525691" fg:w="45201463"/><text x="32.4845%" y="207.50">bi..</text></g><g><title>bitvec::store::BitStore::get_bit (3,373,856 samples, 0.18%)</title><rect x="34.5138%" y="181" width="0.1839%" height="15" fill="rgb(238,207,15)" fg:x="633353298" fg:w="3373856"/><text x="34.7638%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (3,373,856 samples, 0.18%)</title><rect x="34.5138%" y="165" width="0.1839%" height="15" fill="rgb(213,199,42)" fg:x="633353298" fg:w="3373856"/><text x="34.7638%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="373" width="4.8467%" height="15" fill="rgb(235,201,11)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="383.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="357" width="4.8467%" height="15" fill="rgb(207,46,11)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="367.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="341" width="4.8467%" height="15" fill="rgb(241,35,35)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="351.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="325" width="4.8467%" height="15" fill="rgb(243,32,47)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="335.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="309" width="4.8467%" height="15" fill="rgb(247,202,23)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="319.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="293" width="4.8467%" height="15" fill="rgb(219,102,11)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="303.50">alloc:..</text></g><g><title>__rdl_dealloc (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="277" width="4.8467%" height="15" fill="rgb(243,110,44)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="287.50">__rdl_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (88,941,109 samples, 4.85%)</title><rect x="34.6977%" y="261" width="4.8467%" height="15" fill="rgb(222,74,54)" fg:x="636727154" fg:w="88941109"/><text x="34.9477%" y="271.50">std::s..</text></g><g><title>cfree (57,938,628 samples, 3.16%)</title><rect x="36.3871%" y="245" width="3.1573%" height="15" fill="rgb(216,99,12)" fg:x="667729635" fg:w="57938628"/><text x="36.6371%" y="255.50">cfr..</text></g><g><title>[libc.so.6] (47,743,497 samples, 2.60%)</title><rect x="36.9427%" y="229" width="2.6017%" height="15" fill="rgb(226,22,26)" fg:x="677924766" fg:w="47743497"/><text x="37.1927%" y="239.50">[l..</text></g><g><title>aoc2024::day23::brute_force_clique_adj (577,659,081 samples, 31.48%)</title><rect x="8.4397%" y="389" width="31.4788%" height="15" fill="rgb(217,163,10)" fg:x="154874361" fg:w="577659081"/><text x="8.6897%" y="399.50">aoc2024::day23::brute_force_clique_adj</text></g><g><title>core::ptr::drop_in_place&lt;itertools::combinations::Combinations&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u32&gt;,aoc2024::day23::brute_force_clique_adj::{{closure}}&gt;&gt;&gt;&gt; (6,865,179 samples, 0.37%)</title><rect x="39.5444%" y="373" width="0.3741%" height="15" fill="rgb(213,25,53)" fg:x="725668263" fg:w="6865179"/><text x="39.7944%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::lazy_buffer::LazyBuffer&lt;core::iter::adapters::copied::Copied&lt;core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;u32&gt;,aoc2024::day23::brute_force_clique_adj::{{closure}}&gt;&gt;&gt;&gt; (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="357" width="0.1879%" height="15" fill="rgb(252,105,26)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="341" width="0.1879%" height="15" fill="rgb(220,39,43)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="325" width="0.1879%" height="15" fill="rgb(229,68,48)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="309" width="0.1879%" height="15" fill="rgb(252,8,32)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="293" width="0.1879%" height="15" fill="rgb(223,20,43)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="277" width="0.1879%" height="15" fill="rgb(229,81,49)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="261" width="0.1879%" height="15" fill="rgb(236,28,36)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="271.50"></text></g><g><title>__rdl_dealloc (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="245" width="0.1879%" height="15" fill="rgb(249,185,26)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="229" width="0.1879%" height="15" fill="rgb(249,174,33)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="239.50"></text></g><g><title>cfree (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="213" width="0.1879%" height="15" fill="rgb(233,201,37)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="223.50"></text></g><g><title>[libc.so.6] (3,448,207 samples, 0.19%)</title><rect x="39.7306%" y="197" width="0.1879%" height="15" fill="rgb(221,78,26)" fg:x="729085235" fg:w="3448207"/><text x="39.9806%" y="207.50"></text></g><g><title>&lt;core::ops::try_trait::NeverShortCircuit&lt;T&gt; as core::ops::try_trait::Try&gt;::from_output (46,644,568 samples, 2.54%)</title><rect x="39.9185%" y="357" width="2.5418%" height="15" fill="rgb(250,127,30)" fg:x="732533442" fg:w="46644568"/><text x="40.1685%" y="367.50">&lt;c..</text></g><g><title>[libc.so.6] (46,644,568 samples, 2.54%)</title><rect x="39.9185%" y="341" width="2.5418%" height="15" fill="rgb(230,49,44)" fg:x="732533442" fg:w="46644568"/><text x="40.1685%" y="351.50">[l..</text></g><g><title>core::array::Guard&lt;T&gt;::push_unchecked (121,703,083 samples, 6.63%)</title><rect x="42.4603%" y="341" width="6.6321%" height="15" fill="rgb(229,67,23)" fg:x="779178010" fg:w="121703083"/><text x="42.7103%" y="351.50">core::arr..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (121,703,083 samples, 6.63%)</title><rect x="42.4603%" y="325" width="6.6321%" height="15" fill="rgb(249,83,47)" fg:x="779178010" fg:w="121703083"/><text x="42.7103%" y="335.50">core::mem..</text></g><g><title>core::array::from_fn (358,697,334 samples, 19.55%)</title><rect x="39.9185%" y="389" width="19.5468%" height="15" fill="rgb(215,43,3)" fg:x="732533442" fg:w="358697334"/><text x="40.1685%" y="399.50">core::array::from_fn</text></g><g><title>core::array::try_from_fn (358,697,334 samples, 19.55%)</title><rect x="39.9185%" y="373" width="19.5468%" height="15" fill="rgb(238,154,13)" fg:x="732533442" fg:w="358697334"/><text x="40.1685%" y="383.50">core::array::try_from_fn</text></g><g><title>core::array::try_from_fn_erased (312,052,766 samples, 17.00%)</title><rect x="42.4603%" y="357" width="17.0049%" height="15" fill="rgb(219,56,2)" fg:x="779178010" fg:w="312052766"/><text x="42.7103%" y="367.50">core::array::try_from_fn_e..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (190,349,683 samples, 10.37%)</title><rect x="49.0924%" y="341" width="10.3729%" height="15" fill="rgb(233,0,4)" fg:x="900881093" fg:w="190349683"/><text x="49.3424%" y="351.50">core::ops::try_..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,171,267 samples, 2.46%)</title><rect x="60.2060%" y="357" width="2.4616%" height="15" fill="rgb(235,30,7)" fg:x="1104823368" fg:w="45171267"/><text x="60.4560%" y="367.50">&lt;c..</text></g><g><title>core::cmp::min (31,521,108 samples, 1.72%)</title><rect x="60.9498%" y="341" width="1.7177%" height="15" fill="rgb(250,79,13)" fg:x="1118473527" fg:w="31521108"/><text x="61.1998%" y="351.50"></text></g><g><title>core::cmp::Ord::min (31,521,108 samples, 1.72%)</title><rect x="60.9498%" y="325" width="1.7177%" height="15" fill="rgb(211,146,34)" fg:x="1118473527" fg:w="31521108"/><text x="61.1998%" y="335.50"></text></g><g><title>core::cmp::min_by (31,521,108 samples, 1.72%)</title><rect x="60.9498%" y="309" width="1.7177%" height="15" fill="rgb(228,22,38)" fg:x="1118473527" fg:w="31521108"/><text x="61.1998%" y="319.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="277" width="0.5819%" height="15" fill="rgb(235,168,5)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="287.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="261" width="0.5819%" height="15" fill="rgb(221,155,16)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="271.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="245" width="0.5819%" height="15" fill="rgb(215,215,53)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="255.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="229" width="0.5819%" height="15" fill="rgb(223,4,10)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="239.50"></text></g><g><title>tap::pipe::Pipe::pipe (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="213" width="0.5819%" height="15" fill="rgb(234,103,6)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="223.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset::_{{closure}} (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="197" width="0.5819%" height="15" fill="rgb(227,97,0)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10,678,875 samples, 0.58%)</title><rect x="79.5380%" y="181" width="0.5819%" height="15" fill="rgb(234,150,53)" fg:x="1459580218" fg:w="10678875"/><text x="79.7880%" y="191.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set (183,221,610 samples, 9.98%)</title><rect x="79.5380%" y="325" width="9.9844%" height="15" fill="rgb(228,201,54)" fg:x="1459580218" fg:w="183221610"/><text x="79.7880%" y="335.50">bitvec::slice:..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace (183,221,610 samples, 9.98%)</title><rect x="79.5380%" y="309" width="9.9844%" height="15" fill="rgb(222,22,37)" fg:x="1459580218" fg:w="183221610"/><text x="79.7880%" y="319.50">bitvec::slice:..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (183,221,610 samples, 9.98%)</title><rect x="79.5380%" y="293" width="9.9844%" height="15" fill="rgb(237,53,32)" fg:x="1459580218" fg:w="183221610"/><text x="79.7880%" y="303.50">bitvec::slice:..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (172,542,735 samples, 9.40%)</title><rect x="80.1199%" y="277" width="9.4025%" height="15" fill="rgb(233,25,53)" fg:x="1470259093" fg:w="172542735"/><text x="80.3699%" y="287.50">bitvec::ptr::..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (172,542,735 samples, 9.40%)</title><rect x="80.1199%" y="261" width="9.4025%" height="15" fill="rgb(210,40,34)" fg:x="1470259093" fg:w="172542735"/><text x="80.3699%" y="271.50">bitvec::ptr::..</text></g><g><title>bitvec::access::BitAccess::write_bit (172,542,735 samples, 9.40%)</title><rect x="80.1199%" y="245" width="9.4025%" height="15" fill="rgb(241,220,44)" fg:x="1470259093" fg:w="172542735"/><text x="80.3699%" y="255.50">bitvec::acces..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (13,630,999 samples, 0.74%)</title><rect x="88.7796%" y="229" width="0.7428%" height="15" fill="rgb(235,28,35)" fg:x="1629170829" fg:w="13630999"/><text x="89.0296%" y="239.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::select (13,630,999 samples, 0.74%)</title><rect x="88.7796%" y="213" width="0.7428%" height="15" fill="rgb(210,56,17)" fg:x="1629170829" fg:w="13630999"/><text x="89.0296%" y="223.50"></text></g><g><title>&lt;usize as core::ops::bit::Shl&lt;u8&gt;&gt;::shl (13,630,999 samples, 0.74%)</title><rect x="88.7796%" y="197" width="0.7428%" height="15" fill="rgb(224,130,29)" fg:x="1629170829" fg:w="13630999"/><text x="89.0296%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (712,993,471 samples, 38.85%)</title><rect x="59.4653%" y="389" width="38.8537%" height="15" fill="rgb(235,212,8)" fg:x="1091230776" fg:w="712993471"/><text x="59.7153%" y="399.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (712,993,471 samples, 38.85%)</title><rect x="59.4653%" y="373" width="38.8537%" height="15" fill="rgb(223,33,50)" fg:x="1091230776" fg:w="712993471"/><text x="59.7153%" y="383.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (654,229,612 samples, 35.65%)</title><rect x="62.6675%" y="357" width="35.6514%" height="15" fill="rgb(219,149,13)" fg:x="1149994635" fg:w="654229612"/><text x="62.9175%" y="367.50">core::iter::traits::iterator::Iterator::for_each::call::_{..</text></g><g><title>aoc2024::day23::part2_brute_adj::_{{closure}} (654,229,612 samples, 35.65%)</title><rect x="62.6675%" y="341" width="35.6514%" height="15" fill="rgb(250,156,29)" fg:x="1149994635" fg:w="654229612"/><text x="62.9175%" y="351.50">aoc2024::day23::part2_brute_adj::_{{closure}}</text></g><g><title>tinyvec::arrayvec::ArrayVec&lt;A&gt;::push (161,422,419 samples, 8.80%)</title><rect x="89.5224%" y="325" width="8.7965%" height="15" fill="rgb(216,193,19)" fg:x="1642801828" fg:w="161422419"/><text x="89.7724%" y="335.50">tinyvec::arr..</text></g><g><title>tinyvec::arrayvec::ArrayVec&lt;A&gt;::try_push (161,422,419 samples, 8.80%)</title><rect x="89.5224%" y="309" width="8.7965%" height="15" fill="rgb(216,135,14)" fg:x="1642801828" fg:w="161422419"/><text x="89.7724%" y="319.50">tinyvec::arr..</text></g><g><title>alloc::string::String::with_capacity (3,491,273 samples, 0.19%)</title><rect x="98.3190%" y="373" width="0.1903%" height="15" fill="rgb(241,47,5)" fg:x="1804224247" fg:w="3491273"/><text x="98.5690%" y="383.50"></text></g><g><title>aoc2024::day23::part2_brute_adj::_{{closure}} (6,830,185 samples, 0.37%)</title><rect x="98.5092%" y="261" width="0.3722%" height="15" fill="rgb(233,42,35)" fg:x="1807715520" fg:w="6830185"/><text x="98.7592%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="245" width="0.1887%" height="15" fill="rgb(231,13,6)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="229" width="0.1887%" height="15" fill="rgb(207,181,40)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="213" width="0.1887%" height="15" fill="rgb(254,173,49)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="197" width="0.1887%" height="15" fill="rgb(221,1,38)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="181" width="0.1887%" height="15" fill="rgb(206,124,46)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="165" width="0.1887%" height="15" fill="rgb(249,21,11)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="149" width="0.1887%" height="15" fill="rgb(222,201,40)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="133" width="0.1887%" height="15" fill="rgb(235,61,29)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="117" width="0.1887%" height="15" fill="rgb(219,207,3)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="101" width="0.1887%" height="15" fill="rgb(222,56,46)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="111.50"></text></g><g><title>alloc::alloc::alloc (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="85" width="0.1887%" height="15" fill="rgb(239,76,54)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="95.50"></text></g><g><title>__rdl_alloc (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="69" width="0.1887%" height="15" fill="rgb(231,124,27)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="53" width="0.1887%" height="15" fill="rgb(249,195,6)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="63.50"></text></g><g><title>malloc (3,462,663 samples, 0.19%)</title><rect x="98.6927%" y="37" width="0.1887%" height="15" fill="rgb(237,174,47)" fg:x="1811083042" fg:w="3462663"/><text x="98.9427%" y="47.50"></text></g><g><title>itertools::Itertools::join (13,726,212 samples, 0.75%)</title><rect x="98.3190%" y="389" width="0.7480%" height="15" fill="rgb(206,201,31)" fg:x="1804224247" fg:w="13726212"/><text x="98.5690%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="373" width="0.5577%" height="15" fill="rgb(231,57,52)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="357" width="0.5577%" height="15" fill="rgb(248,177,22)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_fold (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="341" width="0.5577%" height="15" fill="rgb(215,211,37)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="351.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="325" width="0.5577%" height="15" fill="rgb(241,128,51)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="309" width="0.5577%" height="15" fill="rgb(227,165,31)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="293" width="0.5577%" height="15" fill="rgb(228,167,24)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (10,234,939 samples, 0.56%)</title><rect x="98.5092%" y="277" width="0.5577%" height="15" fill="rgb(228,143,12)" fg:x="1807715520" fg:w="10234939"/><text x="98.7592%" y="287.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="261" width="0.1855%" height="15" fill="rgb(249,149,8)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="245" width="0.1855%" height="15" fill="rgb(243,35,44)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="255.50"></text></g><g><title>itertools::Itertools::join::_{{closure}} (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="229" width="0.1855%" height="15" fill="rgb(246,89,9)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="239.50"></text></g><g><title>core::fmt::Write::write_fmt (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="213" width="0.1855%" height="15" fill="rgb(233,213,13)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="197" width="0.1855%" height="15" fill="rgb(233,141,41)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="207.50"></text></g><g><title>core::fmt::write (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="181" width="0.1855%" height="15" fill="rgb(239,167,4)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="191.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="165" width="0.1855%" height="15" fill="rgb(209,217,16)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="149" width="0.1855%" height="15" fill="rgb(219,88,35)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="159.50"></text></g><g><title>alloc::string::String::push_str (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="133" width="0.1855%" height="15" fill="rgb(220,193,23)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="117" width="0.1855%" height="15" fill="rgb(230,90,52)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="101" width="0.1855%" height="15" fill="rgb(252,106,19)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="85" width="0.1855%" height="15" fill="rgb(206,74,20)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="69" width="0.1855%" height="15" fill="rgb(230,138,44)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="79.50"></text></g><g><title>[libc.so.6] (3,404,754 samples, 0.19%)</title><rect x="98.8814%" y="53" width="0.1855%" height="15" fill="rgb(235,182,43)" fg:x="1814545705" fg:w="3404754"/><text x="99.1314%" y="63.50"></text></g><g><title>aoc2024::day23::part2_brute_adj (1,766,235,064 samples, 96.25%)</title><rect x="3.0059%" y="405" width="96.2488%" height="15" fill="rgb(242,16,51)" fg:x="55160676" fg:w="1766235064"/><text x="3.2559%" y="415.50">aoc2024::day23::part2_brute_adj</text></g><g><title>itertools::Itertools::sorted (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="389" width="0.1877%" height="15" fill="rgb(248,9,4)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="373" width="0.1877%" height="15" fill="rgb(210,31,22)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="357" width="0.1877%" height="15" fill="rgb(239,54,39)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="341" width="0.1877%" height="15" fill="rgb(230,99,41)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="325" width="0.1877%" height="15" fill="rgb(253,106,12)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="309" width="0.1877%" height="15" fill="rgb(213,46,41)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="293" width="0.1877%" height="15" fill="rgb(215,133,35)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="277" width="0.1877%" height="15" fill="rgb(213,28,5)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="287.50"></text></g><g><title>core::ptr::write (3,445,281 samples, 0.19%)</title><rect x="99.0669%" y="261" width="0.1877%" height="15" fill="rgb(215,77,49)" fg:x="1817950459" fg:w="3445281"/><text x="99.3169%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="405" width="0.1854%" height="15" fill="rgb(248,100,22)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="389" width="0.1854%" height="15" fill="rgb(208,67,9)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="373" width="0.1854%" height="15" fill="rgb(219,133,21)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="357" width="0.1854%" height="15" fill="rgb(246,46,29)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="341" width="0.1854%" height="15" fill="rgb(246,185,52)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="325" width="0.1854%" height="15" fill="rgb(252,136,11)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="309" width="0.1854%" height="15" fill="rgb(219,138,53)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="319.50"></text></g><g><title>__rdl_dealloc (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="293" width="0.1854%" height="15" fill="rgb(211,51,23)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="277" width="0.1854%" height="15" fill="rgb(247,221,28)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="287.50"></text></g><g><title>cfree (3,402,982 samples, 0.19%)</title><rect x="99.2547%" y="261" width="0.1854%" height="15" fill="rgb(251,222,45)" fg:x="1821395740" fg:w="3402982"/><text x="99.5047%" y="271.50"></text></g><g><title>all (1,835,072,716 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="1835072716"/><text x="0.2500%" y="463.50"></text></g><g><title>aoc2024 (1,835,072,716 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="1835072716"/><text x="0.2500%" y="447.50">aoc2024</text></g><g><title>aoc2024::main (1,779,912,040 samples, 96.99%)</title><rect x="3.0059%" y="421" width="96.9941%" height="15" fill="rgb(209,67,49)" fg:x="55160676" fg:w="1779912040"/><text x="3.2559%" y="431.50">aoc2024::main</text></g><g><title>std::io::stdio::_print (10,273,994 samples, 0.56%)</title><rect x="99.4401%" y="405" width="0.5599%" height="15" fill="rgb(213,87,29)" fg:x="1824798722" fg:w="10273994"/><text x="99.6901%" y="415.50"></text></g><g><title>std::io::stdio::print_to (10,273,994 samples, 0.56%)</title><rect x="99.4401%" y="389" width="0.5599%" height="15" fill="rgb(205,151,52)" fg:x="1824798722" fg:w="10273994"/><text x="99.6901%" y="399.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6,856,755 samples, 0.37%)</title><rect x="99.6263%" y="373" width="0.3737%" height="15" fill="rgb(253,215,39)" fg:x="1828215961" fg:w="6856755"/><text x="99.8763%" y="383.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6,856,755 samples, 0.37%)</title><rect x="99.6263%" y="357" width="0.3737%" height="15" fill="rgb(221,220,41)" fg:x="1828215961" fg:w="6856755"/><text x="99.8763%" y="367.50"></text></g><g><title>std::io::Write::write_fmt (6,856,755 samples, 0.37%)</title><rect x="99.6263%" y="341" width="0.3737%" height="15" fill="rgb(218,133,21)" fg:x="1828215961" fg:w="6856755"/><text x="99.8763%" y="351.50"></text></g><g><title>core::fmt::write (3,400,599 samples, 0.19%)</title><rect x="99.8147%" y="325" width="0.1853%" height="15" fill="rgb(221,193,43)" fg:x="1831672117" fg:w="3400599"/><text x="100.0647%" y="335.50"></text></g></svg></svg>