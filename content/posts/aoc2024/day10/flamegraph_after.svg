<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="947106171"><g><title>[anon] (2,584,402 samples, 0.27%)</title><rect x="0.0000%" y="533" width="0.2729%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2584402"/><text x="0.2500%" y="543.50"></text></g><g><title>cfree (2,584,402 samples, 0.27%)</title><rect x="0.0000%" y="517" width="0.2729%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2584402"/><text x="0.2500%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (801,041 samples, 0.08%)</title><rect x="0.2729%" y="533" width="0.0846%" height="15" fill="rgb(221,193,54)" fg:x="2584402" fg:w="801041"/><text x="0.5229%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (760,209 samples, 0.08%)</title><rect x="0.2772%" y="517" width="0.0803%" height="15" fill="rgb(248,212,6)" fg:x="2625234" fg:w="760209"/><text x="0.5272%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (760,209 samples, 0.08%)</title><rect x="0.2772%" y="501" width="0.0803%" height="15" fill="rgb(208,68,35)" fg:x="2625234" fg:w="760209"/><text x="0.5272%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (760,209 samples, 0.08%)</title><rect x="0.2772%" y="485" width="0.0803%" height="15" fill="rgb(232,128,0)" fg:x="2625234" fg:w="760209"/><text x="0.5272%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (760,209 samples, 0.08%)</title><rect x="0.2772%" y="469" width="0.0803%" height="15" fill="rgb(207,160,47)" fg:x="2625234" fg:w="760209"/><text x="0.5272%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (760,209 samples, 0.08%)</title><rect x="0.2772%" y="453" width="0.0803%" height="15" fill="rgb(228,23,34)" fg:x="2625234" fg:w="760209"/><text x="0.5272%" y="463.50"></text></g><g><title>[libc.so.6] (2,587,271 samples, 0.27%)</title><rect x="0.3575%" y="533" width="0.2732%" height="15" fill="rgb(218,30,26)" fg:x="3385443" fg:w="2587271"/><text x="0.6075%" y="543.50"></text></g><g><title>[unknown] (2,586,836 samples, 0.27%)</title><rect x="0.6306%" y="533" width="0.2731%" height="15" fill="rgb(220,122,19)" fg:x="5972714" fg:w="2586836"/><text x="0.8806%" y="543.50"></text></g><g><title>[libc.so.6] (2,586,836 samples, 0.27%)</title><rect x="0.6306%" y="517" width="0.2731%" height="15" fill="rgb(250,228,42)" fg:x="5972714" fg:w="2586836"/><text x="0.8806%" y="527.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (2,584,693 samples, 0.27%)</title><rect x="2.2683%" y="197" width="0.2729%" height="15" fill="rgb(240,193,28)" fg:x="21483238" fg:w="2584693"/><text x="2.5183%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (2,584,693 samples, 0.27%)</title><rect x="2.2683%" y="181" width="0.2729%" height="15" fill="rgb(216,20,37)" fg:x="21483238" fg:w="2584693"/><text x="2.5183%" y="191.50"></text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="309" width="1.9103%" height="15" fill="rgb(206,188,39)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="319.50">&lt;..</text></g><g><title>memchr::arch::generic::memchr::Iter::next_back (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="293" width="1.9103%" height="15" fill="rgb(217,207,13)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="303.50">m..</text></g><g><title>&lt;memchr::memchr::Memchr as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::_{{closure}} (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="277" width="1.9103%" height="15" fill="rgb(231,73,38)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="287.50">&lt;..</text></g><g><title>memchr::memchr::memrchr_raw (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="261" width="1.9103%" height="15" fill="rgb(225,20,46)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="271.50">m..</text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="245" width="1.9103%" height="15" fill="rgb(210,31,41)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="255.50">m..</text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw::find_avx2 (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="229" width="1.9103%" height="15" fill="rgb(221,200,47)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="239.50">m..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw (18,092,364 samples, 1.91%)</title><rect x="0.9038%" y="213" width="1.9103%" height="15" fill="rgb(226,26,5)" fg:x="8559550" fg:w="18092364"/><text x="1.1538%" y="223.50">m..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw_avx2 (2,583,983 samples, 0.27%)</title><rect x="2.5412%" y="197" width="0.2728%" height="15" fill="rgb(249,33,26)" fg:x="24067931" fg:w="2583983"/><text x="2.7912%" y="207.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::rfind_raw (2,583,983 samples, 0.27%)</title><rect x="2.5412%" y="181" width="0.2728%" height="15" fill="rgb(235,183,28)" fg:x="24067931" fg:w="2583983"/><text x="2.7912%" y="191.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (2,583,983 samples, 0.27%)</title><rect x="2.5412%" y="165" width="0.2728%" height="15" fill="rgb(221,5,38)" fg:x="24067931" fg:w="2583983"/><text x="2.7912%" y="175.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (2,583,983 samples, 0.27%)</title><rect x="2.5412%" y="149" width="0.2728%" height="15" fill="rgb(247,18,42)" fg:x="24067931" fg:w="2583983"/><text x="2.7912%" y="159.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (2,583,983 samples, 0.27%)</title><rect x="2.5412%" y="133" width="0.2728%" height="15" fill="rgb(241,131,45)" fg:x="24067931" fg:w="2583983"/><text x="2.7912%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (18,082,518 samples, 1.91%)</title><rect x="66.3135%" y="245" width="1.9092%" height="15" fill="rgb(249,31,29)" fg:x="628058991" fg:w="18082518"/><text x="66.5635%" y="255.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (43,953,725 samples, 4.64%)</title><rect x="63.8546%" y="261" width="4.6408%" height="15" fill="rgb(225,111,53)" fg:x="604770470" fg:w="43953725"/><text x="64.1046%" y="271.50">alloc..</text></g><g><title>core::ptr::read (2,582,686 samples, 0.27%)</title><rect x="68.2227%" y="245" width="0.2727%" height="15" fill="rgb(238,160,17)" fg:x="646141509" fg:w="2582686"/><text x="68.4727%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,746,837 samples, 0.82%)</title><rect x="72.6500%" y="245" width="0.8179%" height="15" fill="rgb(214,148,48)" fg:x="688072524" fg:w="7746837"/><text x="72.9000%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (101,343,527 samples, 10.70%)</title><rect x="68.4954%" y="261" width="10.7003%" height="15" fill="rgb(232,36,49)" fg:x="648724195" fg:w="101343527"/><text x="68.7454%" y="271.50">alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::write (54,248,361 samples, 5.73%)</title><rect x="73.4679%" y="245" width="5.7278%" height="15" fill="rgb(209,103,24)" fg:x="695819361" fg:w="54248361"/><text x="73.7179%" y="255.50">core::p..</text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_or (5,170,341 samples, 0.55%)</title><rect x="83.2851%" y="165" width="0.5459%" height="15" fill="rgb(229,88,8)" fg:x="788797903" fg:w="5170341"/><text x="83.5351%" y="175.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (46,486,340 samples, 4.91%)</title><rect x="79.1957%" y="213" width="4.9083%" height="15" fill="rgb(213,181,19)" fg:x="750067722" fg:w="46486340"/><text x="79.4457%" y="223.50">bitvec..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (46,486,340 samples, 4.91%)</title><rect x="79.1957%" y="197" width="4.9083%" height="15" fill="rgb(254,191,54)" fg:x="750067722" fg:w="46486340"/><text x="79.4457%" y="207.50">bitvec..</text></g><g><title>bitvec::access::BitAccess::write_bit (46,486,340 samples, 4.91%)</title><rect x="79.1957%" y="181" width="4.9083%" height="15" fill="rgb(241,83,37)" fg:x="750067722" fg:w="46486340"/><text x="79.4457%" y="191.50">bitvec..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (2,585,818 samples, 0.27%)</title><rect x="83.8310%" y="165" width="0.2730%" height="15" fill="rgb(233,36,39)" fg:x="793968244" fg:w="2585818"/><text x="84.0810%" y="175.50"></text></g><g><title>&lt;bitvec::order::Lsb0 as bitvec::order::BitOrder&gt;::select (2,585,818 samples, 0.27%)</title><rect x="83.8310%" y="149" width="0.2730%" height="15" fill="rgb(226,3,54)" fg:x="793968244" fg:w="2585818"/><text x="84.0810%" y="159.50"></text></g><g><title>&lt;usize as core::ops::bit::Shl&lt;u8&gt;&gt;::shl (2,585,818 samples, 0.27%)</title><rect x="83.8310%" y="133" width="0.2730%" height="15" fill="rgb(245,192,40)" fg:x="793968244" fg:w="2585818"/><text x="84.0810%" y="143.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set (49,064,661 samples, 5.18%)</title><rect x="79.1957%" y="261" width="5.1805%" height="15" fill="rgb(238,167,29)" fg:x="750067722" fg:w="49064661"/><text x="79.4457%" y="271.50">bitvec..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace (49,064,661 samples, 5.18%)</title><rect x="79.1957%" y="245" width="5.1805%" height="15" fill="rgb(232,182,51)" fg:x="750067722" fg:w="49064661"/><text x="79.4457%" y="255.50">bitvec..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (49,064,661 samples, 5.18%)</title><rect x="79.1957%" y="229" width="5.1805%" height="15" fill="rgb(231,60,39)" fg:x="750067722" fg:w="49064661"/><text x="79.4457%" y="239.50">bitvec..</text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_mut_bitptr (2,578,321 samples, 0.27%)</title><rect x="84.1040%" y="213" width="0.2722%" height="15" fill="rgb(208,69,12)" fg:x="796554062" fg:w="2578321"/><text x="84.3540%" y="223.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (2,578,321 samples, 0.27%)</title><rect x="84.1040%" y="197" width="0.2722%" height="15" fill="rgb(235,93,37)" fg:x="796554062" fg:w="2578321"/><text x="84.3540%" y="207.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (2,578,321 samples, 0.27%)</title><rect x="84.1040%" y="181" width="0.2722%" height="15" fill="rgb(213,116,39)" fg:x="796554062" fg:w="2578321"/><text x="84.3540%" y="191.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::with_capacity (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="245" width="1.9100%" height="15" fill="rgb(222,207,29)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="255.50">b..</text></g><g><title>tap::pipe::Pipe::pipe (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="229" width="1.9100%" height="15" fill="rgb(206,96,30)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="239.50">t..</text></g><g><title>core::ops::function::FnOnce::call_once (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="213" width="1.9100%" height="15" fill="rgb(218,138,4)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="223.50">c..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="197" width="1.9100%" height="15" fill="rgb(250,191,14)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="207.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="181" width="1.9100%" height="15" fill="rgb(239,60,40)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="165" width="1.9100%" height="15" fill="rgb(206,27,48)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="149" width="1.9100%" height="15" fill="rgb(225,35,8)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (18,089,264 samples, 1.91%)</title><rect x="84.3762%" y="133" width="1.9100%" height="15" fill="rgb(250,213,24)" fg:x="799132383" fg:w="18089264"/><text x="84.6262%" y="143.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="117" width="1.6372%" height="15" fill="rgb(247,123,22)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="101" width="1.6372%" height="15" fill="rgb(231,138,38)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="111.50"></text></g><g><title>alloc::alloc::alloc (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="85" width="1.6372%" height="15" fill="rgb(231,145,46)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="95.50"></text></g><g><title>__rdl_alloc (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="69" width="1.6372%" height="15" fill="rgb(251,118,11)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="53" width="1.6372%" height="15" fill="rgb(217,147,25)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="63.50"></text></g><g><title>malloc (15,506,425 samples, 1.64%)</title><rect x="84.6489%" y="37" width="1.6372%" height="15" fill="rgb(247,81,37)" fg:x="801715222" fg:w="15506425"/><text x="84.8989%" y="47.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::repeat (23,263,192 samples, 2.46%)</title><rect x="84.3762%" y="261" width="2.4562%" height="15" fill="rgb(209,12,38)" fg:x="799132383" fg:w="23263192"/><text x="84.6262%" y="271.50">bi..</text></g><g><title>core::slice::&lt;impl [T]&gt;::fill_with (5,173,928 samples, 0.55%)</title><rect x="86.2862%" y="245" width="0.5463%" height="15" fill="rgb(227,1,9)" fg:x="817221647" fg:w="5173928"/><text x="86.5362%" y="255.50"></text></g><g><title>[libc.so.6] (5,173,928 samples, 0.55%)</title><rect x="86.2862%" y="229" width="0.5463%" height="15" fill="rgb(248,47,43)" fg:x="817221647" fg:w="5173928"/><text x="86.5362%" y="239.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (28,402,615 samples, 3.00%)</title><rect x="86.8325%" y="181" width="2.9989%" height="15" fill="rgb(221,10,30)" fg:x="822395575" fg:w="28402615"/><text x="87.0825%" y="191.50">bit..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (28,402,615 samples, 3.00%)</title><rect x="86.8325%" y="165" width="2.9989%" height="15" fill="rgb(210,229,1)" fg:x="822395575" fg:w="28402615"/><text x="87.0825%" y="175.50">bit..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (28,402,615 samples, 3.00%)</title><rect x="86.8325%" y="149" width="2.9989%" height="15" fill="rgb(222,148,37)" fg:x="822395575" fg:w="28402615"/><text x="87.0825%" y="159.50">bit..</text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (10,337,226 samples, 1.09%)</title><rect x="88.7399%" y="133" width="1.0915%" height="15" fill="rgb(234,67,33)" fg:x="840460964" fg:w="10337226"/><text x="88.9899%" y="143.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::index (82,719,853 samples, 8.73%)</title><rect x="86.8325%" y="261" width="8.7340%" height="15" fill="rgb(247,98,35)" fg:x="822395575" fg:w="82719853"/><text x="87.0825%" y="271.50">bitvec::vec:..</text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (82,719,853 samples, 8.73%)</title><rect x="86.8325%" y="245" width="8.7340%" height="15" fill="rgb(247,138,52)" fg:x="822395575" fg:w="82719853"/><text x="87.0825%" y="255.50">bitvec::slic..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (82,719,853 samples, 8.73%)</title><rect x="86.8325%" y="229" width="8.7340%" height="15" fill="rgb(213,79,30)" fg:x="822395575" fg:w="82719853"/><text x="87.0825%" y="239.50">&lt;usize as bi..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (82,719,853 samples, 8.73%)</title><rect x="86.8325%" y="213" width="8.7340%" height="15" fill="rgb(246,177,23)" fg:x="822395575" fg:w="82719853"/><text x="87.0825%" y="223.50">&lt;usize as bi..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (82,719,853 samples, 8.73%)</title><rect x="86.8325%" y="197" width="8.7340%" height="15" fill="rgb(230,62,27)" fg:x="822395575" fg:w="82719853"/><text x="87.0825%" y="207.50">&lt;usize as bi..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref (54,317,238 samples, 5.74%)</title><rect x="89.8313%" y="181" width="5.7351%" height="15" fill="rgb(216,154,8)" fg:x="850798190" fg:w="54317238"/><text x="90.0813%" y="191.50">bitvec:..</text></g><g><title>bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr (54,317,238 samples, 5.74%)</title><rect x="89.8313%" y="165" width="5.7351%" height="15" fill="rgb(244,35,45)" fg:x="850798190" fg:w="54317238"/><text x="90.0813%" y="175.50">bitvec:..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (54,317,238 samples, 5.74%)</title><rect x="89.8313%" y="149" width="5.7351%" height="15" fill="rgb(251,115,12)" fg:x="850798190" fg:w="54317238"/><text x="90.0813%" y="159.50">bitvec:..</text></g><g><title>bitvec::store::BitStore::get_bit (12,986,397 samples, 1.37%)</title><rect x="94.1953%" y="133" width="1.3712%" height="15" fill="rgb(240,54,50)" fg:x="892129031" fg:w="12986397"/><text x="94.4453%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (12,986,397 samples, 1.37%)</title><rect x="94.1953%" y="117" width="1.3712%" height="15" fill="rgb(233,84,52)" fg:x="892129031" fg:w="12986397"/><text x="94.4453%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (930,794,067 samples, 98.28%)</title><rect x="0.9038%" y="389" width="98.2777%" height="15" fill="rgb(207,117,47)" fg:x="8559550" fg:w="930794067"/><text x="1.1538%" y="399.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;u32 as core::iter::traits::accum::Sum&gt;::sum (930,794,067 samples, 98.28%)</title><rect x="0.9038%" y="373" width="98.2777%" height="15" fill="rgb(249,43,39)" fg:x="8559550" fg:w="930794067"/><text x="1.1538%" y="383.50">&lt;u32 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (930,794,067 samples, 98.28%)</title><rect x="0.9038%" y="357" width="98.2777%" height="15" fill="rgb(209,38,44)" fg:x="8559550" fg:w="930794067"/><text x="1.1538%" y="367.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (930,794,067 samples, 98.28%)</title><rect x="0.9038%" y="341" width="98.2777%" height="15" fill="rgb(236,212,23)" fg:x="8559550" fg:w="930794067"/><text x="1.1538%" y="351.50">&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (930,794,067 samples, 98.28%)</title><rect x="0.9038%" y="325" width="98.2777%" height="15" fill="rgb(242,79,21)" fg:x="8559550" fg:w="930794067"/><text x="1.1538%" y="335.50">core::iter::traits::double_ended::DoubleEndedIterator::rfold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (912,701,703 samples, 96.37%)</title><rect x="2.8140%" y="309" width="96.3674%" height="15" fill="rgb(211,96,35)" fg:x="26651914" fg:w="912701703"/><text x="3.0640%" y="319.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>aoc2024::day10::part1_buffer::_{{closure}} (912,701,703 samples, 96.37%)</title><rect x="2.8140%" y="293" width="96.3674%" height="15" fill="rgb(253,215,40)" fg:x="26651914" fg:w="912701703"/><text x="3.0640%" y="303.50">aoc2024::day10::part1_buffer::_{{closure}}</text></g><g><title>aoc2024::day10::find_trailhead_score_buffer (912,701,703 samples, 96.37%)</title><rect x="2.8140%" y="277" width="96.3674%" height="15" fill="rgb(211,81,21)" fg:x="26651914" fg:w="912701703"/><text x="3.0640%" y="287.50">aoc2024::day10::find_trailhead_score_buffer</text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="261" width="3.6150%" height="15" fill="rgb(208,190,38)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="271.50">core..</text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="245" width="3.6150%" height="15" fill="rgb(235,213,38)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="255.50">bitv..</text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="229" width="3.6150%" height="15" fill="rgb(237,122,38)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="239.50">bitv..</text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="213" width="3.6150%" height="15" fill="rgb(244,218,35)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="223.50">bitv..</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="197" width="3.6150%" height="15" fill="rgb(240,68,47)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="207.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="181" width="3.6150%" height="15" fill="rgb(210,16,53)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="191.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="165" width="3.6150%" height="15" fill="rgb(235,124,12)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="175.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="149" width="3.6150%" height="15" fill="rgb(224,169,11)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="159.50">&lt;all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="133" width="3.6150%" height="15" fill="rgb(250,166,2)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="143.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="117" width="3.6150%" height="15" fill="rgb(242,216,29)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="127.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="101" width="3.6150%" height="15" fill="rgb(230,116,27)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="111.50">allo..</text></g><g><title>__rdl_dealloc (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="85" width="3.6150%" height="15" fill="rgb(228,99,48)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="95.50">__rd..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="69" width="3.6150%" height="15" fill="rgb(253,11,6)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="79.50">std:..</text></g><g><title>cfree (34,238,189 samples, 3.62%)</title><rect x="95.5664%" y="53" width="3.6150%" height="15" fill="rgb(247,143,39)" fg:x="905115428" fg:w="34238189"/><text x="95.8164%" y="63.50">cfree</text></g><g><title>[libc.so.6] (16,111,584 samples, 1.70%)</title><rect x="97.4803%" y="37" width="1.7011%" height="15" fill="rgb(236,97,10)" fg:x="923242033" fg:w="16111584"/><text x="97.7303%" y="47.50"></text></g><g><title>_start (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="533" width="98.5505%" height="15" fill="rgb(233,208,19)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="543.50">_start</text></g><g><title>__libc_start_main (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="517" width="98.5505%" height="15" fill="rgb(216,164,2)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="501" width="98.5505%" height="15" fill="rgb(220,129,5)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="511.50">[libc.so.6]</text></g><g><title>main (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="485" width="98.5505%" height="15" fill="rgb(242,17,10)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="495.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="469" width="98.5505%" height="15" fill="rgb(242,107,0)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="453" width="98.5505%" height="15" fill="rgb(251,28,31)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc2024::main (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="437" width="98.5505%" height="15" fill="rgb(233,223,10)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="447.50">aoc2024::main</text></g><g><title>aoc2024::day10::part1 (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="421" width="98.5505%" height="15" fill="rgb(215,21,27)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="431.50">aoc2024::day10::part1</text></g><g><title>aoc2024::day10::part1_buffer (933,377,774 samples, 98.55%)</title><rect x="0.9038%" y="405" width="98.5505%" height="15" fill="rgb(232,23,21)" fg:x="8559550" fg:w="933377774"/><text x="1.1538%" y="415.50">aoc2024::day10::part1_buffer</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize,usize,u8)&gt;&gt; (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="389" width="0.2728%" height="15" fill="rgb(244,5,23)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize,usize,u8)&gt;&gt; (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="373" width="0.2728%" height="15" fill="rgb(226,81,46)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="357" width="0.2728%" height="15" fill="rgb(247,70,30)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="341" width="0.2728%" height="15" fill="rgb(212,68,19)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="325" width="0.2728%" height="15" fill="rgb(240,187,13)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="309" width="0.2728%" height="15" fill="rgb(223,113,26)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="319.50"></text></g><g><title>__rdl_dealloc (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="293" width="0.2728%" height="15" fill="rgb(206,192,2)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="277" width="0.2728%" height="15" fill="rgb(241,108,4)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="287.50"></text></g><g><title>cfree (2,583,707 samples, 0.27%)</title><rect x="99.1814%" y="261" width="0.2728%" height="15" fill="rgb(247,173,49)" fg:x="939353617" fg:w="2583707"/><text x="99.4314%" y="271.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::repeat (2,583,109 samples, 0.27%)</title><rect x="99.4542%" y="357" width="0.2727%" height="15" fill="rgb(224,114,35)" fg:x="941937324" fg:w="2583109"/><text x="99.7042%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill_with (2,583,109 samples, 0.27%)</title><rect x="99.4542%" y="341" width="0.2727%" height="15" fill="rgb(245,159,27)" fg:x="941937324" fg:w="2583109"/><text x="99.7042%" y="351.50"></text></g><g><title>all (947,106,171 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="947106171"/><text x="0.2500%" y="575.50"></text></g><g><title>aoc2024 (947,106,171 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="947106171"/><text x="0.2500%" y="559.50">aoc2024</text></g><g><title>aoc2024::main (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="533" width="0.5458%" height="15" fill="rgb(205,117,38)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="543.50"></text></g><g><title>aoc2024::day10::part1 (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="517" width="0.5458%" height="15" fill="rgb(237,72,25)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="527.50"></text></g><g><title>aoc2024::day10::part1_buffer (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="501" width="0.5458%" height="15" fill="rgb(244,70,9)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="485" width="0.5458%" height="15" fill="rgb(217,125,39)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="495.50"></text></g><g><title>&lt;u32 as core::iter::traits::accum::Sum&gt;::sum (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="469" width="0.5458%" height="15" fill="rgb(235,36,10)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="453" width="0.5458%" height="15" fill="rgb(251,123,47)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="437" width="0.5458%" height="15" fill="rgb(221,13,13)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="447.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="421" width="0.5458%" height="15" fill="rgb(238,131,9)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="405" width="0.5458%" height="15" fill="rgb(211,50,8)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="415.50"></text></g><g><title>aoc2024::day10::part1_buffer::_{{closure}} (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="389" width="0.5458%" height="15" fill="rgb(245,182,24)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="399.50"></text></g><g><title>aoc2024::day10::find_trailhead_score_buffer (5,168,847 samples, 0.55%)</title><rect x="99.4542%" y="373" width="0.5458%" height="15" fill="rgb(242,14,37)" fg:x="941937324" fg:w="5168847"/><text x="99.7042%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="357" width="0.2730%" height="15" fill="rgb(246,228,12)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="367.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="341" width="0.2730%" height="15" fill="rgb(213,55,15)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="351.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="325" width="0.2730%" height="15" fill="rgb(209,9,3)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="335.50"></text></g><g><title>bitvec::vec::ops::_&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::_{{closure}} (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="309" width="0.2730%" height="15" fill="rgb(230,59,30)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="293" width="0.2730%" height="15" fill="rgb(209,121,21)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="277" width="0.2730%" height="15" fill="rgb(220,109,13)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="261" width="0.2730%" height="15" fill="rgb(232,18,1)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="245" width="0.2730%" height="15" fill="rgb(215,41,42)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="229" width="0.2730%" height="15" fill="rgb(224,123,36)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="213" width="0.2730%" height="15" fill="rgb(240,125,3)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="197" width="0.2730%" height="15" fill="rgb(205,98,50)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="207.50"></text></g><g><title>__rdl_dealloc (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="181" width="0.2730%" height="15" fill="rgb(205,185,37)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,585,738 samples, 0.27%)</title><rect x="99.7270%" y="165" width="0.2730%" height="15" fill="rgb(238,207,15)" fg:x="944520433" fg:w="2585738"/><text x="99.9770%" y="175.50"></text></g></svg></svg>